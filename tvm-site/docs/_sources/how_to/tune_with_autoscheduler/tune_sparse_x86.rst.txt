.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_sparse_x86.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_sparse_x86.py:


Auto-scheduling Sparse Matrix Multiplication on CPU with Custom Sketch Rule
===========================================================================
**Author**: `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler to tune a sparse matrix multiplication for
CPUs.

Auto-scheduler is designed to explore the schedule with best performance for a given computation
declaration automatically. While sometimes, we may have a demand to try some special ops which may
not been well-supported by auto-scheduler's default sketch rules and result in poor performance.
Fortunately, auto-scheduler currently allows user to provide a CustomSketch to cover these cases.

We use sparse matrix multiplication as an example in this tutorial to demonstrate how to implement
and plug a custom sketch rule to the auto-scheduler's search policy.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.


.. code-block:: default


    import os

    import numpy as np
    import tvm
    import tvm.testing
    from tvm import te, auto_scheduler, runtime, topi
    from tvm.auto_scheduler import _ffi_api
    from tvm.topi.utils import get_const_tuple
    from tvm.topi.sparse.utils import random_bsr_matrix







Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a sparse matmul with several relu and bias add.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.


.. code-block:: default



    @auto_scheduler.register_workload
    def sparse_dense(M, N, K, w_data_shape, w_indices_shape, w_indptr_shape, dtype):
        X = te.placeholder(shape=(M, K), dtype=dtype)
        W_data = te.placeholder(shape=w_data_shape, dtype=dtype)
        W_indices = te.placeholder(shape=w_indices_shape, dtype="int32")
        W_indptr = te.placeholder(shape=w_indptr_shape, dtype="int32")
        B = te.placeholder(shape=(M, N), dtype=dtype)

        out = topi.nn.sparse_dense(topi.nn.relu(X), W_data, W_indices, W_indptr)
        out = te.compute((M, N), lambda i, j: out[i, j] + B[i, j], name="BiasAdd")
        out = topi.nn.relu(out)

        return [X, W_data, W_indices, W_indptr, B, out]








Special step for sparse workload
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
During schedule tuning, auto-scheduler will use random inputs to measure the performance of a
generated schedule. While we cannot directly use a random array as the input of a sparse op, for
the "indices" and "indptr" array are meaningful for the computation.

To solve this problem, we register these as special buffers, and load them when process program
measuring.
See the `tvm.auto_scheduler.measure.py` for more details.


.. code-block:: default


    # Define the basic shapes of this sparse computation
    M = 128
    K = 256
    N = 512
    BS_R = 16
    BS_C = 1
    density = 0.6

    # Generate the test data with numpy
    X_np = np.random.randn(M, K).astype("float32")
    X_np = np.maximum(np.zeros((M, K), dtype="float32"), X_np)  # Relu
    W_sp_np = random_bsr_matrix(N, K, BS_R, BS_C, density=density, dtype="float32")
    W_np = W_sp_np.todense()
    Y_np = X_np @ W_np.T  # Process the matrix multiplication
    B_np = np.random.randn(M, N).astype("float32")
    Y_np = Y_np + B_np  # Bias add
    Y_np = np.maximum(np.zeros((M, N), dtype="float32"), Y_np)  # Relu







Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task with M=N=K=512 and dtype="float32"
If your machine supports avx instructions, you can

  - replace "llvm" below with "llvm -mcpu=core-avx2" to enable AVX2
  - replace "llvm" below with "llvm -mcpu=skylake-avx512" to enable AVX-512


.. code-block:: default


    target = tvm.target.Target("llvm")

    # Register the sparse data to task inputs
    prefix = "sparse_dense_bsr_%d_%d_%d_%d_%d_%d_" % (
        N,
        K,
        BS_R,
        BS_C,
        W_sp_np.indices.shape[0],
        W_sp_np.indptr.shape[0],
    )
    task = tvm.auto_scheduler.SearchTask(
        func=sparse_dense,
        args=(M, N, K, W_sp_np.data.shape, W_sp_np.indices.shape, W_sp_np.indptr.shape, "float32"),
        target=target,
        task_inputs={
            prefix + "W_data": runtime.ndarray.array(W_sp_np.data),
            prefix + "W_indices": runtime.ndarray.array(W_sp_np.indices),
            prefix + "W_indptr": runtime.ndarray.array(W_sp_np.indptr),
        },
        task_inputs_save_to_file=True,
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Computational DAG:
    placeholder = PLACEHOLDER [33]
    placeholder = PLACEHOLDER [4916, 16, 1]
    placeholder = PLACEHOLDER [4916]
    placeholder = PLACEHOLDER [128, 256]
    compute(i0, i1) = max(placeholder[i0, i1], 0f)
    compute(i, nb_j, j) += (placeholder[(placeholder[nb_j] + elem_idx), j, c]*compute[i, (placeholder[(placeholder[nb_j] + elem_idx)] + c)])
    compute(m, n) = compute[m, floordiv(n, 16), floormod(n, 16)]
    placeholder = PLACEHOLDER [128, 512]
    BiasAdd(i, j) = (compute[i, j] + placeholder[i, j])
    compute(i0, i1) = max(BiasAdd[i0, i1], 0f)




Write the custom sketch for sparse dense op
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Before tuning, we will need to define the CustomSketchRule for the sparse dense op.

CustomSketchRule consists of two parts: the condition function and the apply function.

  - condition function: describe when to apply this sketch rule. For example, we can only apply
    the rule to the sparse ops by matching their name and tag.
  - apply function: describe how to generate the initial sketch. You can implement it using
    auto-scheduler provided loop state APIs.


.. code-block:: default



    def meet_condition_func(search_policy, state, stage_id):
        state = auto_scheduler.loop_state.State(state, search_policy.search_task.compute_dag)
        if state.stages[stage_id].op.tag in [
            "sparse_dense_sp_rhs_bsrmm",
            "sparse_dense_sp_rhs_bsrmm_block",
        ]:
            return auto_scheduler.PreloadCustomSketchRule.APPLY_AND_SKIP_REST
        else:
            return auto_scheduler.PreloadCustomSketchRule.PASS


    def apply_func(search_policy, state, stage_id):
        ret = []
        s0 = auto_scheduler.loop_state.State(state, search_policy.search_task.compute_dag)
        if s0.stages[stage_id].op.tag == "sparse_dense_sp_rhs_bsrmm_block":
            return [s0.state_object, stage_id - 1]

        sparse_dense = s0.stages[stage_id].op
        sparse_dense_block = s0.stages[stage_id - 1].op
        assert sparse_dense.tag == "sparse_dense_sp_rhs_bsrmm"
        assert sparse_dense_block.tag == "sparse_dense_sp_rhs_bsrmm_block"

        # Set the default consumer of compute block
        consumer = sparse_dense

        # If sparse dense has a single elementwise consumer
        # We can compute inline the sparse_dense output stage
        consumers = _ffi_api.SearchPolicyUtilsGetConsumers(
            search_policy.search_task, s0.state_object, stage_id
        )
        if len(consumers) == 1:
            consumer_id = int(consumers.items()[0][0])
            if _ffi_api.SearchPolicyUtilsIsElementwiseMatch(
                search_policy.search_task, s0.state_object, stage_id, consumer_id
            ):
                consumer = s0.stages[consumer_id].op
                s0.compute_inline(sparse_dense)

        i, nb_j, j, row_offset, c = s0[sparse_dense_block].iters
        m, n = s0[consumer].iters
        i0, i1, i2 = s0.split(sparse_dense_block, i, [None, None])
        m0, m1 = s0.follow_split(consumer, m, len(s0.transform_steps) - 1, 1)
        j0, j1 = s0.split(sparse_dense_block, nb_j, [None])
        n0, n1 = s0.follow_split(consumer, n, len(s0.transform_steps) - 1, 1)
        s0.reorder(sparse_dense_block, [i0, j0, i1, j1, row_offset, i2, j, c])
        s0.reorder(consumer, [m0, n0, m1, n1])
        s0.compute_at(sparse_dense_block, consumer, n0)

        ret.append([s0.state_object, stage_id - 2])

        return ret








Next, we set parameters for the auto-scheduler with the custom sketch plugged in.

* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file
  `sparse_dense.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions` for more parameters
* Here, we need to create a :code:`auto_scheduler.SketchPolicy` object, and add the custom sketch
  rule as a `init_search_callbacks`.


.. code-block:: default


    log_file = "sparse_dense.json"
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )

    search_policy = auto_scheduler.SketchPolicy(
        task,
        program_cost_model=auto_scheduler.XGBModel(),
        init_search_callbacks=[
            auto_scheduler.PreloadCustomSketchRule(meet_condition_func, apply_func, "SparseDense")
        ],
    )







Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready.
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.


.. code-block:: default


    # Run auto-tuning (search)
    # Notice: We do not run the tuning in our webpage server since it takes too long.
    # Uncomment the following line to run it by yourself.
    task.tune(tune_option, search_policy)

    # Apply the best schedule
    sch, args = task.apply_best(log_file)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /usr/local/lib/python3.6/dist-packages/numpy/core/_methods.py:43: RuntimeWarning: invalid value encountered in reduce
      return umr_minimum(a, axis, None, out, keepdims, initial, where)
    /usr/local/lib/python3.6/dist-packages/numpy/core/_methods.py:39: RuntimeWarning: invalid value encountered in reduce
      return umr_maximum(a, axis, None, out, keepdims, initial, where)





We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
layout transformation, parallelization, vectorization, unrolling, and operator fusion.


.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Lowered TIR:
    @main = primfn(placeholder_5: handle, placeholder_6: handle, placeholder_7: handle, placeholder_8: handle, placeholder_9: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [65536], []),
                 placeholder_4: Buffer(placeholder_10: Pointer(float32), float32, [78656], []),
                 placeholder_3: Buffer(placeholder_11: Pointer(int32), int32, [33], []),
                 placeholder_2: Buffer(placeholder_12: Pointer(float32), float32, [32768], []),
                 placeholder: Buffer(placeholder_13: Pointer(float32), float32, [65536], []),
                 placeholder_1: Buffer(placeholder_14: Pointer(int32), int32, [4916], [])}
      buffer_map = {placeholder_9: placeholder, placeholder_7: placeholder_1, placeholder_5: placeholder_2, placeholder_8: placeholder_3, placeholder_6: placeholder_4, compute_1: compute} {
      for (i0.outer.i1.outer.fused: int32, 0, 32) "parallel" {
        allocate(compute_3: Pointer(global float32), float32, [2048]), storage_scope = global {
          for (i.outer.inner: int32, 0, 4) {
            for (nb_j.inner: int32, 0, 2) {
              let cse_var_2: int32 = ((floormod(i0.outer.i1.outer.fused, 16)*2) + nb_j.inner)
              let cse_var_1: int32 = ((i.outer.inner*512) + (nb_j.inner*16))
               {
                compute_4: Buffer(compute_3, float32, [2048], [])[cse_var_1] = 0f32
                compute_4[(cse_var_1 + 1)] = 0f32
                compute_4[(cse_var_1 + 2)] = 0f32
                compute_4[(cse_var_1 + 3)] = 0f32
                compute_4[(cse_var_1 + 4)] = 0f32
                compute_4[(cse_var_1 + 5)] = 0f32
                compute_4[(cse_var_1 + 6)] = 0f32
                compute_4[(cse_var_1 + 7)] = 0f32
                compute_4[(cse_var_1 + 8)] = 0f32
                compute_4[(cse_var_1 + 9)] = 0f32
                compute_4[(cse_var_1 + 10)] = 0f32
                compute_4[(cse_var_1 + 11)] = 0f32
                compute_4[(cse_var_1 + 12)] = 0f32
                compute_4[(cse_var_1 + 13)] = 0f32
                compute_4[(cse_var_1 + 14)] = 0f32
                compute_4[(cse_var_1 + 15)] = 0f32
                compute_4[(cse_var_1 + 32)] = 0f32
                compute_4[(cse_var_1 + 33)] = 0f32
                compute_4[(cse_var_1 + 34)] = 0f32
                compute_4[(cse_var_1 + 35)] = 0f32
                compute_4[(cse_var_1 + 36)] = 0f32
                compute_4[(cse_var_1 + 37)] = 0f32
                compute_4[(cse_var_1 + 38)] = 0f32
                compute_4[(cse_var_1 + 39)] = 0f32
                compute_4[(cse_var_1 + 40)] = 0f32
                compute_4[(cse_var_1 + 41)] = 0f32
                compute_4[(cse_var_1 + 42)] = 0f32
                compute_4[(cse_var_1 + 43)] = 0f32
                compute_4[(cse_var_1 + 44)] = 0f32
                compute_4[(cse_var_1 + 45)] = 0f32
                compute_4[(cse_var_1 + 46)] = 0f32
                compute_4[(cse_var_1 + 47)] = 0f32
                compute_4[(cse_var_1 + 64)] = 0f32
                compute_4[(cse_var_1 + 65)] = 0f32
                compute_4[(cse_var_1 + 66)] = 0f32
                compute_4[(cse_var_1 + 67)] = 0f32
                compute_4[(cse_var_1 + 68)] = 0f32
                compute_4[(cse_var_1 + 69)] = 0f32
                compute_4[(cse_var_1 + 70)] = 0f32
                compute_4[(cse_var_1 + 71)] = 0f32
                compute_4[(cse_var_1 + 72)] = 0f32
                compute_4[(cse_var_1 + 73)] = 0f32
                compute_4[(cse_var_1 + 74)] = 0f32
                compute_4[(cse_var_1 + 75)] = 0f32
                compute_4[(cse_var_1 + 76)] = 0f32
                compute_4[(cse_var_1 + 77)] = 0f32
                compute_4[(cse_var_1 + 78)] = 0f32
                compute_4[(cse_var_1 + 79)] = 0f32
                compute_4[(cse_var_1 + 96)] = 0f32
                compute_4[(cse_var_1 + 97)] = 0f32
                compute_4[(cse_var_1 + 98)] = 0f32
                compute_4[(cse_var_1 + 99)] = 0f32
                compute_4[(cse_var_1 + 100)] = 0f32
                compute_4[(cse_var_1 + 101)] = 0f32
                compute_4[(cse_var_1 + 102)] = 0f32
                compute_4[(cse_var_1 + 103)] = 0f32
                compute_4[(cse_var_1 + 104)] = 0f32
                compute_4[(cse_var_1 + 105)] = 0f32
                compute_4[(cse_var_1 + 106)] = 0f32
                compute_4[(cse_var_1 + 107)] = 0f32
                compute_4[(cse_var_1 + 108)] = 0f32
                compute_4[(cse_var_1 + 109)] = 0f32
                compute_4[(cse_var_1 + 110)] = 0f32
                compute_4[(cse_var_1 + 111)] = 0f32
                compute_4[(cse_var_1 + 128)] = 0f32
                compute_4[(cse_var_1 + 129)] = 0f32
                compute_4[(cse_var_1 + 130)] = 0f32
                compute_4[(cse_var_1 + 131)] = 0f32
                compute_4[(cse_var_1 + 132)] = 0f32
                compute_4[(cse_var_1 + 133)] = 0f32
                compute_4[(cse_var_1 + 134)] = 0f32
                compute_4[(cse_var_1 + 135)] = 0f32
                compute_4[(cse_var_1 + 136)] = 0f32
                compute_4[(cse_var_1 + 137)] = 0f32
                compute_4[(cse_var_1 + 138)] = 0f32
                compute_4[(cse_var_1 + 139)] = 0f32
                compute_4[(cse_var_1 + 140)] = 0f32
                compute_4[(cse_var_1 + 141)] = 0f32
                compute_4[(cse_var_1 + 142)] = 0f32
                compute_4[(cse_var_1 + 143)] = 0f32
                compute_4[(cse_var_1 + 160)] = 0f32
                compute_4[(cse_var_1 + 161)] = 0f32
                compute_4[(cse_var_1 + 162)] = 0f32
                compute_4[(cse_var_1 + 163)] = 0f32
                compute_4[(cse_var_1 + 164)] = 0f32
                compute_4[(cse_var_1 + 165)] = 0f32
                compute_4[(cse_var_1 + 166)] = 0f32
                compute_4[(cse_var_1 + 167)] = 0f32
                compute_4[(cse_var_1 + 168)] = 0f32
                compute_4[(cse_var_1 + 169)] = 0f32
                compute_4[(cse_var_1 + 170)] = 0f32
                compute_4[(cse_var_1 + 171)] = 0f32
                compute_4[(cse_var_1 + 172)] = 0f32
                compute_4[(cse_var_1 + 173)] = 0f32
                compute_4[(cse_var_1 + 174)] = 0f32
                compute_4[(cse_var_1 + 175)] = 0f32
                compute_4[(cse_var_1 + 192)] = 0f32
                compute_4[(cse_var_1 + 193)] = 0f32
                compute_4[(cse_var_1 + 194)] = 0f32
                compute_4[(cse_var_1 + 195)] = 0f32
                compute_4[(cse_var_1 + 196)] = 0f32
                compute_4[(cse_var_1 + 197)] = 0f32
                compute_4[(cse_var_1 + 198)] = 0f32
                compute_4[(cse_var_1 + 199)] = 0f32
                compute_4[(cse_var_1 + 200)] = 0f32
                compute_4[(cse_var_1 + 201)] = 0f32
                compute_4[(cse_var_1 + 202)] = 0f32
                compute_4[(cse_var_1 + 203)] = 0f32
                compute_4[(cse_var_1 + 204)] = 0f32
                compute_4[(cse_var_1 + 205)] = 0f32
                compute_4[(cse_var_1 + 206)] = 0f32
                compute_4[(cse_var_1 + 207)] = 0f32
                compute_4[(cse_var_1 + 224)] = 0f32
                compute_4[(cse_var_1 + 225)] = 0f32
                compute_4[(cse_var_1 + 226)] = 0f32
                compute_4[(cse_var_1 + 227)] = 0f32
                compute_4[(cse_var_1 + 228)] = 0f32
                compute_4[(cse_var_1 + 229)] = 0f32
                compute_4[(cse_var_1 + 230)] = 0f32
                compute_4[(cse_var_1 + 231)] = 0f32
                compute_4[(cse_var_1 + 232)] = 0f32
                compute_4[(cse_var_1 + 233)] = 0f32
                compute_4[(cse_var_1 + 234)] = 0f32
                compute_4[(cse_var_1 + 235)] = 0f32
                compute_4[(cse_var_1 + 236)] = 0f32
                compute_4[(cse_var_1 + 237)] = 0f32
                compute_4[(cse_var_1 + 238)] = 0f32
                compute_4[(cse_var_1 + 239)] = 0f32
                compute_4[(cse_var_1 + 256)] = 0f32
                compute_4[(cse_var_1 + 257)] = 0f32
                compute_4[(cse_var_1 + 258)] = 0f32
                compute_4[(cse_var_1 + 259)] = 0f32
                compute_4[(cse_var_1 + 260)] = 0f32
                compute_4[(cse_var_1 + 261)] = 0f32
                compute_4[(cse_var_1 + 262)] = 0f32
                compute_4[(cse_var_1 + 263)] = 0f32
                compute_4[(cse_var_1 + 264)] = 0f32
                compute_4[(cse_var_1 + 265)] = 0f32
                compute_4[(cse_var_1 + 266)] = 0f32
                compute_4[(cse_var_1 + 267)] = 0f32
                compute_4[(cse_var_1 + 268)] = 0f32
                compute_4[(cse_var_1 + 269)] = 0f32
                compute_4[(cse_var_1 + 270)] = 0f32
                compute_4[(cse_var_1 + 271)] = 0f32
                compute_4[(cse_var_1 + 288)] = 0f32
                compute_4[(cse_var_1 + 289)] = 0f32
                compute_4[(cse_var_1 + 290)] = 0f32
                compute_4[(cse_var_1 + 291)] = 0f32
                compute_4[(cse_var_1 + 292)] = 0f32
                compute_4[(cse_var_1 + 293)] = 0f32
                compute_4[(cse_var_1 + 294)] = 0f32
                compute_4[(cse_var_1 + 295)] = 0f32
                compute_4[(cse_var_1 + 296)] = 0f32
                compute_4[(cse_var_1 + 297)] = 0f32
                compute_4[(cse_var_1 + 298)] = 0f32
                compute_4[(cse_var_1 + 299)] = 0f32
                compute_4[(cse_var_1 + 300)] = 0f32
                compute_4[(cse_var_1 + 301)] = 0f32
                compute_4[(cse_var_1 + 302)] = 0f32
                compute_4[(cse_var_1 + 303)] = 0f32
                compute_4[(cse_var_1 + 320)] = 0f32
                compute_4[(cse_var_1 + 321)] = 0f32
                compute_4[(cse_var_1 + 322)] = 0f32
                compute_4[(cse_var_1 + 323)] = 0f32
                compute_4[(cse_var_1 + 324)] = 0f32
                compute_4[(cse_var_1 + 325)] = 0f32
                compute_4[(cse_var_1 + 326)] = 0f32
                compute_4[(cse_var_1 + 327)] = 0f32
                compute_4[(cse_var_1 + 328)] = 0f32
                compute_4[(cse_var_1 + 329)] = 0f32
                compute_4[(cse_var_1 + 330)] = 0f32
                compute_4[(cse_var_1 + 331)] = 0f32
                compute_4[(cse_var_1 + 332)] = 0f32
                compute_4[(cse_var_1 + 333)] = 0f32
                compute_4[(cse_var_1 + 334)] = 0f32
                compute_4[(cse_var_1 + 335)] = 0f32
                compute_4[(cse_var_1 + 352)] = 0f32
                compute_4[(cse_var_1 + 353)] = 0f32
                compute_4[(cse_var_1 + 354)] = 0f32
                compute_4[(cse_var_1 + 355)] = 0f32
                compute_4[(cse_var_1 + 356)] = 0f32
                compute_4[(cse_var_1 + 357)] = 0f32
                compute_4[(cse_var_1 + 358)] = 0f32
                compute_4[(cse_var_1 + 359)] = 0f32
                compute_4[(cse_var_1 + 360)] = 0f32
                compute_4[(cse_var_1 + 361)] = 0f32
                compute_4[(cse_var_1 + 362)] = 0f32
                compute_4[(cse_var_1 + 363)] = 0f32
                compute_4[(cse_var_1 + 364)] = 0f32
                compute_4[(cse_var_1 + 365)] = 0f32
                compute_4[(cse_var_1 + 366)] = 0f32
                compute_4[(cse_var_1 + 367)] = 0f32
                compute_4[(cse_var_1 + 384)] = 0f32
                compute_4[(cse_var_1 + 385)] = 0f32
                compute_4[(cse_var_1 + 386)] = 0f32
                compute_4[(cse_var_1 + 387)] = 0f32
                compute_4[(cse_var_1 + 388)] = 0f32
                compute_4[(cse_var_1 + 389)] = 0f32
                compute_4[(cse_var_1 + 390)] = 0f32
                compute_4[(cse_var_1 + 391)] = 0f32
                compute_4[(cse_var_1 + 392)] = 0f32
                compute_4[(cse_var_1 + 393)] = 0f32
                compute_4[(cse_var_1 + 394)] = 0f32
                compute_4[(cse_var_1 + 395)] = 0f32
                compute_4[(cse_var_1 + 396)] = 0f32
                compute_4[(cse_var_1 + 397)] = 0f32
                compute_4[(cse_var_1 + 398)] = 0f32
                compute_4[(cse_var_1 + 399)] = 0f32
                compute_4[(cse_var_1 + 416)] = 0f32
                compute_4[(cse_var_1 + 417)] = 0f32
                compute_4[(cse_var_1 + 418)] = 0f32
                compute_4[(cse_var_1 + 419)] = 0f32
                compute_4[(cse_var_1 + 420)] = 0f32
                compute_4[(cse_var_1 + 421)] = 0f32
                compute_4[(cse_var_1 + 422)] = 0f32
                compute_4[(cse_var_1 + 423)] = 0f32
                compute_4[(cse_var_1 + 424)] = 0f32
                compute_4[(cse_var_1 + 425)] = 0f32
                compute_4[(cse_var_1 + 426)] = 0f32
                compute_4[(cse_var_1 + 427)] = 0f32
                compute_4[(cse_var_1 + 428)] = 0f32
                compute_4[(cse_var_1 + 429)] = 0f32
                compute_4[(cse_var_1 + 430)] = 0f32
                compute_4[(cse_var_1 + 431)] = 0f32
                compute_4[(cse_var_1 + 448)] = 0f32
                compute_4[(cse_var_1 + 449)] = 0f32
                compute_4[(cse_var_1 + 450)] = 0f32
                compute_4[(cse_var_1 + 451)] = 0f32
                compute_4[(cse_var_1 + 452)] = 0f32
                compute_4[(cse_var_1 + 453)] = 0f32
                compute_4[(cse_var_1 + 454)] = 0f32
                compute_4[(cse_var_1 + 455)] = 0f32
                compute_4[(cse_var_1 + 456)] = 0f32
                compute_4[(cse_var_1 + 457)] = 0f32
                compute_4[(cse_var_1 + 458)] = 0f32
                compute_4[(cse_var_1 + 459)] = 0f32
                compute_4[(cse_var_1 + 460)] = 0f32
                compute_4[(cse_var_1 + 461)] = 0f32
                compute_4[(cse_var_1 + 462)] = 0f32
                compute_4[(cse_var_1 + 463)] = 0f32
                compute_4[(cse_var_1 + 480)] = 0f32
                compute_4[(cse_var_1 + 481)] = 0f32
                compute_4[(cse_var_1 + 482)] = 0f32
                compute_4[(cse_var_1 + 483)] = 0f32
                compute_4[(cse_var_1 + 484)] = 0f32
                compute_4[(cse_var_1 + 485)] = 0f32
                compute_4[(cse_var_1 + 486)] = 0f32
                compute_4[(cse_var_1 + 487)] = 0f32
                compute_4[(cse_var_1 + 488)] = 0f32
                compute_4[(cse_var_1 + 489)] = 0f32
                compute_4[(cse_var_1 + 490)] = 0f32
                compute_4[(cse_var_1 + 491)] = 0f32
                compute_4[(cse_var_1 + 492)] = 0f32
                compute_4[(cse_var_1 + 493)] = 0f32
                compute_4[(cse_var_1 + 494)] = 0f32
                compute_4[(cse_var_1 + 495)] = 0f32
                for (elem_idx: int32, 0, (placeholder_3[(cse_var_2 + 1)] - placeholder_3[cse_var_2])) {
                  let cse_var_259: int32 = (cse_var_1 + 75)
                  let cse_var_258: int32 = (cse_var_1 + 5)
                  let cse_var_257: int32 = (cse_var_1 + 7)
                  let cse_var_256: int32 = (cse_var_1 + 100)
                  let cse_var_255: int32 = (cse_var_1 + 64)
                  let cse_var_254: int32 = (cse_var_1 + 8)
                  let cse_var_253: int32 = (cse_var_1 + 173)
                  let cse_var_252: int32 = (cse_var_1 + 232)
                  let cse_var_251: int32 = (cse_var_1 + 44)
                  let cse_var_250: int32 = (cse_var_1 + 68)
                  let cse_var_249: int32 = (cse_var_1 + 131)
                  let cse_var_248: int32 = (cse_var_1 + 352)
                  let cse_var_247: int32 = (cse_var_1 + 490)
                  let cse_var_246: int32 = (cse_var_1 + 69)
                  let cse_var_245: int32 = (cse_var_1 + 334)
                  let cse_var_244: int32 = (cse_var_1 + 33)
                  let cse_var_243: int32 = (cse_var_1 + 174)
                  let cse_var_242: int32 = (cse_var_1 + 391)
                  let cse_var_241: int32 = (cse_var_1 + 45)
                  let cse_var_240: int32 = (cse_var_1 + 98)
                  let cse_var_239: int32 = (cse_var_1 + 99)
                  let cse_var_238: int32 = (cse_var_1 + 256)
                  let cse_var_237: int32 = (cse_var_1 + 101)
                  let cse_var_236: int32 = (cse_var_1 + 102)
                  let cse_var_235: int32 = (cse_var_1 + 227)
                  let cse_var_234: int32 = (cse_var_1 + 105)
                  let cse_var_233: int32 = (cse_var_1 + 67)
                  let cse_var_232: int32 = (cse_var_1 + 108)
                  let cse_var_231: int32 = (cse_var_1 + 424)
                  let cse_var_230: int32 = (cse_var_1 + 161)
                  let cse_var_229: int32 = (cse_var_1 + 142)
                  let cse_var_228: int32 = (cse_var_1 + 73)
                  let cse_var_227: int32 = (cse_var_1 + 494)
                  let cse_var_226: int32 = (cse_var_1 + 359)
                  let cse_var_225: int32 = (cse_var_1 + 35)
                  let cse_var_224: int32 = (cse_var_1 + 38)
                  let cse_var_223: int32 = (cse_var_1 + 6)
                  let cse_var_222: int32 = (cse_var_1 + 201)
                  let cse_var_221: int32 = (cse_var_1 + 39)
                  let cse_var_220: int32 = (cse_var_1 + 40)
                  let cse_var_219: int32 = (cse_var_1 + 79)
                  let cse_var_218: int32 = (cse_var_1 + 36)
                  let cse_var_217: int32 = (cse_var_1 + 294)
                  let cse_var_216: int32 = (cse_var_1 + 13)
                  let cse_var_215: int32 = (cse_var_1 + 46)
                  let cse_var_214: int32 = (cse_var_1 + 3)
                  let cse_var_213: int32 = (cse_var_1 + 363)
                  let cse_var_212: int32 = (cse_var_1 + 104)
                  let cse_var_211: int32 = (cse_var_1 + 2)
                  let cse_var_210: int32 = (cse_var_1 + 238)
                  let cse_var_209: int32 = (cse_var_1 + 228)
                  let cse_var_208: int32 = (cse_var_1 + 110)
                  let cse_var_207: int32 = (cse_var_1 + 207)
                  let cse_var_206: int32 = (cse_var_1 + 72)
                  let cse_var_205: int32 = (cse_var_1 + 14)
                  let cse_var_204: int32 = (cse_var_1 + 96)
                  let cse_var_203: int32 = (cse_var_1 + 97)
                  let cse_var_202: int32 = (cse_var_1 + 10)
                  let cse_var_201: int32 = (cse_var_1 + 193)
                  let cse_var_200: int32 = (cse_var_1 + 65)
                  let cse_var_199: int32 = (cse_var_1 + 11)
                  let cse_var_198: int32 = (cse_var_1 + 76)
                  let cse_var_197: int32 = (cse_var_1 + 419)
                  let cse_var_196: int32 = (cse_var_1 + 138)
                  let cse_var_195: int32 = (cse_var_1 + 392)
                  let cse_var_194: int32 = (cse_var_1 + 393)
                  let cse_var_193: int32 = (cse_var_1 + 394)
                  let cse_var_192: int32 = (cse_var_1 + 395)
                  let cse_var_191: int32 = (cse_var_1 + 396)
                  let cse_var_190: int32 = (cse_var_1 + 398)
                  let cse_var_189: int32 = (cse_var_1 + 429)
                  let cse_var_188: int32 = (cse_var_1 + 399)
                  let cse_var_187: int32 = (cse_var_1 + 417)
                  let cse_var_186: int32 = (cse_var_1 + 418)
                  let cse_var_185: int32 = (cse_var_1 + 420)
                  let cse_var_184: int32 = (cse_var_1 + 422)
                  let cse_var_183: int32 = (cse_var_1 + 423)
                  let cse_var_182: int32 = (cse_var_1 + 425)
                  let cse_var_181: int32 = (cse_var_1 + 426)
                  let cse_var_180: int32 = (cse_var_1 + 128)
                  let cse_var_179: int32 = (cse_var_1 + 449)
                  let cse_var_178: int32 = (cse_var_1 + 451)
                  let cse_var_177: int32 = (cse_var_1 + 452)
                  let cse_var_176: int32 = (cse_var_1 + 454)
                  let cse_var_175: int32 = (cse_var_1 + 458)
                  let cse_var_174: int32 = (cse_var_1 + 460)
                  let cse_var_173: int32 = (cse_var_1 + 462)
                  let cse_var_172: int32 = (cse_var_1 + 480)
                  let cse_var_171: int32 = (cse_var_1 + 483)
                  let cse_var_170: int32 = (cse_var_1 + 485)
                  let cse_var_169: int32 = (cse_var_1 + 487)
                  let cse_var_168: int32 = (cse_var_1 + 489)
                  let cse_var_167: int32 = (cse_var_1 + 491)
                  let cse_var_166: int32 = (cse_var_1 + 492)
                  let cse_var_165: int32 = (cse_var_1 + 493)
                  let cse_var_164: int32 = (cse_var_1 + 428)
                  let cse_var_163: int32 = (cse_var_1 + 463)
                  let cse_var_162: int32 = (cse_var_1 + 129)
                  let cse_var_161: int32 = (cse_var_1 + 203)
                  let cse_var_160: int32 = (cse_var_1 + 455)
                  let cse_var_159: int32 = (cse_var_1 + 133)
                  let cse_var_158: int32 = (cse_var_1 + 135)
                  let cse_var_157: int32 = (cse_var_1 + 136)
                  let cse_var_156: int32 = (cse_var_1 + 453)
                  let cse_var_155: int32 = (cse_var_1 + 160)
                  let cse_var_154: int32 = (cse_var_1 + 325)
                  let cse_var_153: int32 = (cse_var_1 + 333)
                  let cse_var_152: int32 = (cse_var_1 + 327)
                  let cse_var_151: int32 = (cse_var_1 + 328)
                  let cse_var_150: int32 = (cse_var_1 + 329)
                  let cse_var_149: int32 = (cse_var_1 + 331)
                  let cse_var_148: int32 = (cse_var_1 + 390)
                  let cse_var_147: int32 = (cse_var_1 + 335)
                  let cse_var_146: int32 = (cse_var_1 + 353)
                  let cse_var_145: int32 = (cse_var_1 + 355)
                  let cse_var_144: int32 = (cse_var_1 + 356)
                  let cse_var_143: int32 = (cse_var_1 + 357)
                  let cse_var_142: int32 = (cse_var_1 + 358)
                  let cse_var_141: int32 = (cse_var_1 + 361)
                  let cse_var_140: int32 = (cse_var_1 + 362)
                  let cse_var_139: int32 = (cse_var_1 + 364)
                  let cse_var_138: int32 = (cse_var_1 + 365)
                  let cse_var_137: int32 = (cse_var_1 + 450)
                  let cse_var_136: int32 = (cse_var_1 + 384)
                  let cse_var_135: int32 = (cse_var_1 + 385)
                  let cse_var_134: int32 = (cse_var_1 + 387)
                  let cse_var_133: int32 = (cse_var_1 + 389)
                  let cse_var_132: int32 = (cse_var_1 + 332)
                  let cse_var_131: int32 = (cse_var_1 + 459)
                  let cse_var_130: int32 = (cse_var_1 + 236)
                  let cse_var_129: int32 = (cse_var_1 + 234)
                  let cse_var_128: int32 = (cse_var_1 + 456)
                  let cse_var_127: int32 = (cse_var_1 + 486)
                  let cse_var_126: int32 = (cse_var_1 + 233)
                  let cse_var_125: int32 = (cse_var_1 + 231)
                  let cse_var_124: int32 = (cse_var_1 + 109)
                  let cse_var_123: int32 = (cse_var_1 + 270)
                  let cse_var_122: int32 = (cse_var_1 + 360)
                  let cse_var_121: int32 = (cse_var_1 + 229)
                  let cse_var_120: int32 = (cse_var_1 + 37)
                  let cse_var_119: int32 = (cse_var_1 + 77)
                  let cse_var_118: int32 = (cse_var_1 + 226)
                  let cse_var_117: int32 = (cse_var_1 + 225)
                  let cse_var_116: int32 = (cse_var_1 + 137)
                  let cse_var_115: int32 = (cse_var_1 + 224)
                  let cse_var_114: int32 = (cse_var_1 + 258)
                  let cse_var_113: int32 = (cse_var_1 + 206)
                  let cse_var_112: int32 = (cse_var_1 + 430)
                  let cse_var_111: int32 = (cse_var_1 + 205)
                  let cse_var_110: int32 = (cse_var_1 + 427)
                  let cse_var_109: int32 = (cse_var_1 + 259)
                  let cse_var_108: int32 = (elem_idx*16)
                  let cse_var_107: int32 = (cse_var_1 + 484)
                  let cse_var_106: int32 = (cse_var_1 + 204)
                  let cse_var_105: int32 = (cse_var_1 + 9)
                  let cse_var_104: int32 = (cse_var_1 + 386)
                  let cse_var_103: int32 = (cse_var_1 + 202)
                  let cse_var_102: int32 = (cse_var_1 + 431)
                  let cse_var_101: int32 = (cse_var_1 + 200)
                  let cse_var_100: int32 = (cse_var_1 + 421)
                  let cse_var_99: int32 = (cse_var_1 + 323)
                  let cse_var_98: int32 = (cse_var_1 + 271)
                  let cse_var_97: int32 = (cse_var_1 + 488)
                  let cse_var_96: int32 = (cse_var_1 + 322)
                  let cse_var_95: int32 = (cse_var_1 + 303)
                  let cse_var_94: int32 = (cse_var_1 + 171)
                  let cse_var_93: int32 = (cse_var_1 + 301)
                  let cse_var_92: int32 = (cse_var_1 + 299)
                  let cse_var_91: int32 = (cse_var_1 + 297)
                  let cse_var_90: int32 = (cse_var_1 + 4)
                  let cse_var_89: int32 = (cse_var_1 + 295)
                  let cse_var_88: int32 = (cse_var_1 + 292)
                  let cse_var_87: int32 = (cse_var_1 + 367)
                  let cse_var_86: int32 = (cse_var_1 + 291)
                  let cse_var_85: int32 = (cse_var_1 + 326)
                  let cse_var_84: int32 = (cse_var_1 + 260)
                  let cse_var_83: int32 = (cse_var_1 + 1)
                  let cse_var_82: int32 = (cse_var_1 + 194)
                  let cse_var_81: int32 = (cse_var_1 + 288)
                  let cse_var_80: int32 = (cse_var_1 + 324)
                  let cse_var_79: int32 = (cse_var_1 + 296)
                  let cse_var_78: int32 = (cse_var_1 + 267)
                  let cse_var_77: int32 = (cse_var_1 + 103)
                  let cse_var_76: int32 = (cse_var_1 + 495)
                  let cse_var_75: int32 = (cse_var_1 + 266)
                  let cse_var_74: int32 = (cse_var_1 + 293)
                  let cse_var_73: int32 = (cse_var_1 + 265)
                  let cse_var_72: int32 = (cse_var_1 + 263)
                  let cse_var_71: int32 = (cse_var_1 + 262)
                  let cse_var_70: int32 = (cse_var_1 + 268)
                  let cse_var_69: int32 = (cse_var_1 + 261)
                  let cse_var_68: int32 = (cse_var_1 + 289)
                  let cse_var_67: int32 = (cse_var_1 + 354)
                  let cse_var_66: int32 = (cse_var_1 + 168)
                  let cse_var_65: int32 = (cse_var_1 + 66)
                  let cse_var_64: int32 = (cse_var_1 + 290)
                  let cse_var_63: int32 = (cse_var_1 + 15)
                  let cse_var_62: int32 = (cse_var_1 + 169)
                  let cse_var_61: int32 = (cse_var_1 + 106)
                  let cse_var_60: int32 = (cse_var_1 + 482)
                  let cse_var_59: int32 = (cse_var_1 + 143)
                  let cse_var_58: int32 = (cse_var_1 + 71)
                  let cse_var_57: int32 = (cse_var_1 + 134)
                  let cse_var_56: int32 = (cse_var_1 + 47)
                  let cse_var_55: int32 = (cse_var_1 + 330)
                  let cse_var_54: int32 = (cse_var_1 + 416)
                  let cse_var_53: int32 = (cse_var_1 + 172)
                  let cse_var_52: int32 = (cse_var_1 + 320)
                  let cse_var_51: int32 = (cse_var_1 + 43)
                  let cse_var_50: int32 = (cse_var_1 + 269)
                  let cse_var_49: int32 = (cse_var_1 + 78)
                  let cse_var_48: int32 = (cse_var_1 + 139)
                  let cse_var_47: int32 = (cse_var_1 + 388)
                  let cse_var_46: int32 = (cse_var_1 + 321)
                  let cse_var_45: int32 = (cse_var_1 + 300)
                  let cse_var_44: int32 = (cse_var_1 + 34)
                  let cse_var_43: int32 = (cse_var_1 + 74)
                  let cse_var_42: int32 = (cse_var_1 + 264)
                  let cse_var_41: int32 = (cse_var_1 + 302)
                  let cse_var_40: int32 = (cse_var_1 + 192)
                  let cse_var_39: int32 = (cse_var_1 + 298)
                  let cse_var_38: int32 = (cse_var_1 + 70)
                  let cse_var_37: int32 = (cse_var_1 + 42)
                  let cse_var_36: int32 = (cse_var_1 + 41)
                  let cse_var_35: int32 = (cse_var_1 + 198)
                  let cse_var_34: int32 = (cse_var_1 + 163)
                  let cse_var_33: int32 = (cse_var_1 + 457)
                  let cse_var_32: int32 = (cse_var_1 + 481)
                  let cse_var_31: int32 = (cse_var_1 + 197)
                  let cse_var_30: int32 = (cse_var_1 + 111)
                  let cse_var_29: int32 = (cse_var_1 + 196)
                  let cse_var_28: int32 = (cse_var_1 + 140)
                  let cse_var_27: int32 = (cse_var_1 + 366)
                  let cse_var_26: int32 = (cse_var_1 + 195)
                  let cse_var_25: int32 = (cse_var_1 + 397)
                  let cse_var_24: int32 = (cse_var_1 + 175)
                  let cse_var_23: int32 = (cse_var_1 + 448)
                  let cse_var_22: int32 = (cse_var_1 + 461)
                  let cse_var_21: int32 = (cse_var_1 + 170)
                  let cse_var_20: int32 = (cse_var_1 + 107)
                  let cse_var_19: int32 = (cse_var_1 + 141)
                  let cse_var_18: int32 = (cse_var_1 + 162)
                  let cse_var_17: int32 = (cse_var_1 + 130)
                  let cse_var_16: int32 = (cse_var_1 + 230)
                  let cse_var_15: int32 = (cse_var_1 + 164)
                  let cse_var_14: int32 = (cse_var_1 + 165)
                  let cse_var_13: int32 = (cse_var_1 + 257)
                  let cse_var_12: int32 = (cse_var_1 + 132)
                  let cse_var_11: int32 = (cse_var_1 + 199)
                  let cse_var_10: int32 = (cse_var_1 + 166)
                  let cse_var_9: int32 = (cse_var_1 + 32)
                  let cse_var_8: int32 = (cse_var_1 + 235)
                  let cse_var_7: int32 = (cse_var_1 + 167)
                  let cse_var_6: int32 = (cse_var_1 + 12)
                  let cse_var_5: int32 = (cse_var_1 + 239)
                  let cse_var_4: int32 = (cse_var_1 + 237)
                  let cse_var_3: int32 = ((floordiv(i0.outer.i1.outer.fused, 16)*16384) + (i.outer.inner*4096))
                   {
                    compute_4[cse_var_1] = (compute_4[cse_var_1] + (placeholder_4[((placeholder_3[cse_var_2]*16) + cse_var_108)]*max(placeholder_2[(cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)])], 0f32)))
                    compute_4[cse_var_83] = (compute_4[cse_var_83] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 1)]*max(placeholder_2[(cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)])], 0f32)))
                    compute_4[cse_var_211] = (compute_4[cse_var_211] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 2)]*max(placeholder_2[(cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)])], 0f32)))
                    compute_4[cse_var_214] = (compute_4[cse_var_214] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 3)]*max(placeholder_2[(cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)])], 0f32)))
                    compute_4[cse_var_90] = (compute_4[cse_var_90] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 4)]*max(placeholder_2[(cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)])], 0f32)))
                    compute_4[cse_var_258] = (compute_4[cse_var_258] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 5)]*max(placeholder_2[(cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)])], 0f32)))
                    compute_4[cse_var_223] = (compute_4[cse_var_223] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 6)]*max(placeholder_2[(cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)])], 0f32)))
                    compute_4[cse_var_257] = (compute_4[cse_var_257] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 7)]*max(placeholder_2[(cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)])], 0f32)))
                    compute_4[cse_var_254] = (compute_4[cse_var_254] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 8)]*max(placeholder_2[(cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)])], 0f32)))
                    compute_4[cse_var_105] = (compute_4[cse_var_105] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 9)]*max(placeholder_2[(cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)])], 0f32)))
                    compute_4[cse_var_202] = (compute_4[cse_var_202] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 10)]*max(placeholder_2[(cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)])], 0f32)))
                    compute_4[cse_var_199] = (compute_4[cse_var_199] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 11)]*max(placeholder_2[(cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)])], 0f32)))
                    compute_4[cse_var_6] = (compute_4[cse_var_6] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 12)]*max(placeholder_2[(cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)])], 0f32)))
                    compute_4[cse_var_216] = (compute_4[cse_var_216] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 13)]*max(placeholder_2[(cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)])], 0f32)))
                    compute_4[cse_var_205] = (compute_4[cse_var_205] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 14)]*max(placeholder_2[(cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)])], 0f32)))
                    compute_4[cse_var_63] = (compute_4[cse_var_63] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 15)]*max(placeholder_2[(cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)])], 0f32)))
                    compute_4[cse_var_9] = (compute_4[cse_var_9] + (placeholder_4[((placeholder_3[cse_var_2]*16) + cse_var_108)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 256)], 0f32)))
                    compute_4[cse_var_244] = (compute_4[cse_var_244] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 1)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 256)], 0f32)))
                    compute_4[cse_var_44] = (compute_4[cse_var_44] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 2)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 256)], 0f32)))
                    compute_4[cse_var_225] = (compute_4[cse_var_225] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 3)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 256)], 0f32)))
                    compute_4[cse_var_218] = (compute_4[cse_var_218] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 4)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 256)], 0f32)))
                    compute_4[cse_var_120] = (compute_4[cse_var_120] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 5)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 256)], 0f32)))
                    compute_4[cse_var_224] = (compute_4[cse_var_224] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 6)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 256)], 0f32)))
                    compute_4[cse_var_221] = (compute_4[cse_var_221] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 7)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 256)], 0f32)))
                    compute_4[cse_var_220] = (compute_4[cse_var_220] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 8)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 256)], 0f32)))
                    compute_4[cse_var_36] = (compute_4[cse_var_36] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 9)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 256)], 0f32)))
                    compute_4[cse_var_37] = (compute_4[cse_var_37] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 10)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 256)], 0f32)))
                    compute_4[cse_var_51] = (compute_4[cse_var_51] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 11)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 256)], 0f32)))
                    compute_4[cse_var_251] = (compute_4[cse_var_251] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 12)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 256)], 0f32)))
                    compute_4[cse_var_241] = (compute_4[cse_var_241] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 13)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 256)], 0f32)))
                    compute_4[cse_var_215] = (compute_4[cse_var_215] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 14)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 256)], 0f32)))
                    compute_4[cse_var_56] = (compute_4[cse_var_56] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 15)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 256)], 0f32)))
                    compute_4[cse_var_255] = (compute_4[cse_var_255] + (placeholder_4[((placeholder_3[cse_var_2]*16) + cse_var_108)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 512)], 0f32)))
                    compute_4[cse_var_200] = (compute_4[cse_var_200] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 1)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 512)], 0f32)))
                    compute_4[cse_var_65] = (compute_4[cse_var_65] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 2)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 512)], 0f32)))
                    compute_4[cse_var_233] = (compute_4[cse_var_233] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 3)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 512)], 0f32)))
                    compute_4[cse_var_250] = (compute_4[cse_var_250] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 4)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 512)], 0f32)))
                    compute_4[cse_var_246] = (compute_4[cse_var_246] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 5)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 512)], 0f32)))
                    compute_4[cse_var_38] = (compute_4[cse_var_38] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 6)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 512)], 0f32)))
                    compute_4[cse_var_58] = (compute_4[cse_var_58] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 7)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 512)], 0f32)))
                    compute_4[cse_var_206] = (compute_4[cse_var_206] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 8)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 512)], 0f32)))
                    compute_4[cse_var_228] = (compute_4[cse_var_228] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 9)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 512)], 0f32)))
                    compute_4[cse_var_43] = (compute_4[cse_var_43] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 10)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 512)], 0f32)))
                    compute_4[cse_var_259] = (compute_4[cse_var_259] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 11)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 512)], 0f32)))
                    compute_4[cse_var_198] = (compute_4[cse_var_198] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 12)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 512)], 0f32)))
                    compute_4[cse_var_119] = (compute_4[cse_var_119] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 13)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 512)], 0f32)))
                    compute_4[cse_var_49] = (compute_4[cse_var_49] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 14)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 512)], 0f32)))
                    compute_4[cse_var_219] = (compute_4[cse_var_219] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 15)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 512)], 0f32)))
                    compute_4[cse_var_204] = (compute_4[cse_var_204] + (placeholder_4[((placeholder_3[cse_var_2]*16) + cse_var_108)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 768)], 0f32)))
                    compute_4[cse_var_203] = (compute_4[cse_var_203] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 1)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 768)], 0f32)))
                    compute_4[cse_var_240] = (compute_4[cse_var_240] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 2)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 768)], 0f32)))
                    compute_4[cse_var_239] = (compute_4[cse_var_239] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 3)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 768)], 0f32)))
                    compute_4[cse_var_256] = (compute_4[cse_var_256] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 4)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 768)], 0f32)))
                    compute_4[cse_var_237] = (compute_4[cse_var_237] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 5)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 768)], 0f32)))
                    compute_4[cse_var_236] = (compute_4[cse_var_236] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 6)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 768)], 0f32)))
                    compute_4[cse_var_77] = (compute_4[cse_var_77] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 7)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 768)], 0f32)))
                    compute_4[cse_var_212] = (compute_4[cse_var_212] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 8)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 768)], 0f32)))
                    compute_4[cse_var_234] = (compute_4[cse_var_234] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 9)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 768)], 0f32)))
                    compute_4[cse_var_61] = (compute_4[cse_var_61] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 10)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 768)], 0f32)))
                    compute_4[cse_var_20] = (compute_4[cse_var_20] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 11)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 768)], 0f32)))
                    compute_4[cse_var_232] = (compute_4[cse_var_232] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 12)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 768)], 0f32)))
                    compute_4[cse_var_124] = (compute_4[cse_var_124] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 13)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 768)], 0f32)))
                    compute_4[cse_var_208] = (compute_4[cse_var_208] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 14)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 768)], 0f32)))
                    compute_4[cse_var_30] = (compute_4[cse_var_30] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 15)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 768)], 0f32)))
                    compute_4[cse_var_180] = (compute_4[cse_var_180] + (placeholder_4[((placeholder_3[cse_var_2]*16) + cse_var_108)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1024)], 0f32)))
                    compute_4[cse_var_162] = (compute_4[cse_var_162] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 1)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1024)], 0f32)))
                    compute_4[cse_var_17] = (compute_4[cse_var_17] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 2)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1024)], 0f32)))
                    compute_4[cse_var_249] = (compute_4[cse_var_249] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 3)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1024)], 0f32)))
                    compute_4[cse_var_12] = (compute_4[cse_var_12] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 4)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1024)], 0f32)))
                    compute_4[cse_var_159] = (compute_4[cse_var_159] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 5)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1024)], 0f32)))
                    compute_4[cse_var_57] = (compute_4[cse_var_57] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 6)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1024)], 0f32)))
                    compute_4[cse_var_158] = (compute_4[cse_var_158] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 7)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1024)], 0f32)))
                    compute_4[cse_var_157] = (compute_4[cse_var_157] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 8)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1024)], 0f32)))
                    compute_4[cse_var_116] = (compute_4[cse_var_116] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 9)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1024)], 0f32)))
                    compute_4[cse_var_196] = (compute_4[cse_var_196] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 10)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1024)], 0f32)))
                    compute_4[cse_var_48] = (compute_4[cse_var_48] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 11)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1024)], 0f32)))
                    compute_4[cse_var_28] = (compute_4[cse_var_28] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 12)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1024)], 0f32)))
                    compute_4[cse_var_19] = (compute_4[cse_var_19] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 13)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1024)], 0f32)))
                    compute_4[cse_var_229] = (compute_4[cse_var_229] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 14)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1024)], 0f32)))
                    compute_4[cse_var_59] = (compute_4[cse_var_59] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 15)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1024)], 0f32)))
                    compute_4[cse_var_155] = (compute_4[cse_var_155] + (placeholder_4[((placeholder_3[cse_var_2]*16) + cse_var_108)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1280)], 0f32)))
                    compute_4[cse_var_230] = (compute_4[cse_var_230] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 1)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1280)], 0f32)))
                    compute_4[cse_var_18] = (compute_4[cse_var_18] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 2)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1280)], 0f32)))
                    compute_4[cse_var_34] = (compute_4[cse_var_34] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 3)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1280)], 0f32)))
                    compute_4[cse_var_15] = (compute_4[cse_var_15] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 4)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1280)], 0f32)))
                    compute_4[cse_var_14] = (compute_4[cse_var_14] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 5)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1280)], 0f32)))
                    compute_4[cse_var_10] = (compute_4[cse_var_10] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 6)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1280)], 0f32)))
                    compute_4[cse_var_7] = (compute_4[cse_var_7] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 7)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1280)], 0f32)))
                    compute_4[cse_var_66] = (compute_4[cse_var_66] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 8)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1280)], 0f32)))
                    compute_4[cse_var_62] = (compute_4[cse_var_62] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 9)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1280)], 0f32)))
                    compute_4[cse_var_21] = (compute_4[cse_var_21] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 10)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1280)], 0f32)))
                    compute_4[cse_var_94] = (compute_4[cse_var_94] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 11)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1280)], 0f32)))
                    compute_4[cse_var_53] = (compute_4[cse_var_53] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 12)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1280)], 0f32)))
                    compute_4[cse_var_253] = (compute_4[cse_var_253] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 13)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1280)], 0f32)))
                    compute_4[cse_var_243] = (compute_4[cse_var_243] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 14)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1280)], 0f32)))
                    compute_4[cse_var_24] = (compute_4[cse_var_24] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 15)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1280)], 0f32)))
                    compute_4[cse_var_40] = (compute_4[cse_var_40] + (placeholder_4[((placeholder_3[cse_var_2]*16) + cse_var_108)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1536)], 0f32)))
                    compute_4[cse_var_201] = (compute_4[cse_var_201] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 1)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1536)], 0f32)))
                    compute_4[cse_var_82] = (compute_4[cse_var_82] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 2)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1536)], 0f32)))
                    compute_4[cse_var_26] = (compute_4[cse_var_26] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 3)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1536)], 0f32)))
                    compute_4[cse_var_29] = (compute_4[cse_var_29] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 4)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1536)], 0f32)))
                    compute_4[cse_var_31] = (compute_4[cse_var_31] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 5)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1536)], 0f32)))
                    compute_4[cse_var_35] = (compute_4[cse_var_35] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 6)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1536)], 0f32)))
                    compute_4[cse_var_11] = (compute_4[cse_var_11] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 7)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1536)], 0f32)))
                    compute_4[cse_var_101] = (compute_4[cse_var_101] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 8)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1536)], 0f32)))
                    compute_4[cse_var_222] = (compute_4[cse_var_222] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 9)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1536)], 0f32)))
                    compute_4[cse_var_103] = (compute_4[cse_var_103] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 10)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1536)], 0f32)))
                    compute_4[cse_var_161] = (compute_4[cse_var_161] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 11)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1536)], 0f32)))
                    compute_4[cse_var_106] = (compute_4[cse_var_106] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 12)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1536)], 0f32)))
                    compute_4[cse_var_111] = (compute_4[cse_var_111] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 13)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1536)], 0f32)))
                    compute_4[cse_var_113] = (compute_4[cse_var_113] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 14)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1536)], 0f32)))
                    compute_4[cse_var_207] = (compute_4[cse_var_207] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 15)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1536)], 0f32)))
                    compute_4[cse_var_115] = (compute_4[cse_var_115] + (placeholder_4[((placeholder_3[cse_var_2]*16) + cse_var_108)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1792)], 0f32)))
                    compute_4[cse_var_117] = (compute_4[cse_var_117] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 1)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1792)], 0f32)))
                    compute_4[cse_var_118] = (compute_4[cse_var_118] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 2)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1792)], 0f32)))
                    compute_4[cse_var_235] = (compute_4[cse_var_235] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 3)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1792)], 0f32)))
                    compute_4[cse_var_209] = (compute_4[cse_var_209] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 4)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1792)], 0f32)))
                    compute_4[cse_var_121] = (compute_4[cse_var_121] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 5)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1792)], 0f32)))
                    compute_4[cse_var_16] = (compute_4[cse_var_16] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 6)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1792)], 0f32)))
                    compute_4[cse_var_125] = (compute_4[cse_var_125] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 7)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1792)], 0f32)))
                    compute_4[cse_var_252] = (compute_4[cse_var_252] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 8)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1792)], 0f32)))
                    compute_4[cse_var_126] = (compute_4[cse_var_126] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 9)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1792)], 0f32)))
                    compute_4[cse_var_129] = (compute_4[cse_var_129] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 10)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1792)], 0f32)))
                    compute_4[cse_var_8] = (compute_4[cse_var_8] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 11)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1792)], 0f32)))
                    compute_4[cse_var_130] = (compute_4[cse_var_130] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 12)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1792)], 0f32)))
                    compute_4[cse_var_4] = (compute_4[cse_var_4] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 13)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1792)], 0f32)))
                    compute_4[cse_var_210] = (compute_4[cse_var_210] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 14)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1792)], 0f32)))
                    compute_4[cse_var_5] = (compute_4[cse_var_5] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 15)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 1792)], 0f32)))
                    compute_4[cse_var_238] = (compute_4[cse_var_238] + (placeholder_4[((placeholder_3[cse_var_2]*16) + cse_var_108)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2048)], 0f32)))
                    compute_4[cse_var_13] = (compute_4[cse_var_13] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 1)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2048)], 0f32)))
                    compute_4[cse_var_114] = (compute_4[cse_var_114] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 2)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2048)], 0f32)))
                    compute_4[cse_var_109] = (compute_4[cse_var_109] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 3)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2048)], 0f32)))
                    compute_4[cse_var_84] = (compute_4[cse_var_84] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 4)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2048)], 0f32)))
                    compute_4[cse_var_69] = (compute_4[cse_var_69] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 5)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2048)], 0f32)))
                    compute_4[cse_var_71] = (compute_4[cse_var_71] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 6)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2048)], 0f32)))
                    compute_4[cse_var_72] = (compute_4[cse_var_72] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 7)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2048)], 0f32)))
                    compute_4[cse_var_42] = (compute_4[cse_var_42] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 8)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2048)], 0f32)))
                    compute_4[cse_var_73] = (compute_4[cse_var_73] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 9)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2048)], 0f32)))
                    compute_4[cse_var_75] = (compute_4[cse_var_75] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 10)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2048)], 0f32)))
                    compute_4[cse_var_78] = (compute_4[cse_var_78] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 11)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2048)], 0f32)))
                    compute_4[cse_var_70] = (compute_4[cse_var_70] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 12)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2048)], 0f32)))
                    compute_4[cse_var_50] = (compute_4[cse_var_50] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 13)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2048)], 0f32)))
                    compute_4[cse_var_123] = (compute_4[cse_var_123] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 14)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2048)], 0f32)))
                    compute_4[cse_var_98] = (compute_4[cse_var_98] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 15)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2048)], 0f32)))
                    compute_4[cse_var_81] = (compute_4[cse_var_81] + (placeholder_4[((placeholder_3[cse_var_2]*16) + cse_var_108)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2304)], 0f32)))
                    compute_4[cse_var_68] = (compute_4[cse_var_68] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 1)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2304)], 0f32)))
                    compute_4[cse_var_64] = (compute_4[cse_var_64] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 2)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2304)], 0f32)))
                    compute_4[cse_var_86] = (compute_4[cse_var_86] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 3)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2304)], 0f32)))
                    compute_4[cse_var_88] = (compute_4[cse_var_88] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 4)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2304)], 0f32)))
                    compute_4[cse_var_74] = (compute_4[cse_var_74] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 5)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2304)], 0f32)))
                    compute_4[cse_var_217] = (compute_4[cse_var_217] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 6)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2304)], 0f32)))
                    compute_4[cse_var_89] = (compute_4[cse_var_89] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 7)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2304)], 0f32)))
                    compute_4[cse_var_79] = (compute_4[cse_var_79] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 8)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2304)], 0f32)))
                    compute_4[cse_var_91] = (compute_4[cse_var_91] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 9)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2304)], 0f32)))
                    compute_4[cse_var_39] = (compute_4[cse_var_39] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 10)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2304)], 0f32)))
                    compute_4[cse_var_92] = (compute_4[cse_var_92] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 11)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2304)], 0f32)))
                    compute_4[cse_var_45] = (compute_4[cse_var_45] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 12)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2304)], 0f32)))
                    compute_4[cse_var_93] = (compute_4[cse_var_93] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 13)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2304)], 0f32)))
                    compute_4[cse_var_41] = (compute_4[cse_var_41] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 14)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2304)], 0f32)))
                    compute_4[cse_var_95] = (compute_4[cse_var_95] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 15)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2304)], 0f32)))
                    compute_4[cse_var_52] = (compute_4[cse_var_52] + (placeholder_4[((placeholder_3[cse_var_2]*16) + cse_var_108)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2560)], 0f32)))
                    compute_4[cse_var_46] = (compute_4[cse_var_46] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 1)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2560)], 0f32)))
                    compute_4[cse_var_96] = (compute_4[cse_var_96] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 2)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2560)], 0f32)))
                    compute_4[cse_var_99] = (compute_4[cse_var_99] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 3)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2560)], 0f32)))
                    compute_4[cse_var_80] = (compute_4[cse_var_80] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 4)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2560)], 0f32)))
                    compute_4[cse_var_154] = (compute_4[cse_var_154] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 5)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2560)], 0f32)))
                    compute_4[cse_var_85] = (compute_4[cse_var_85] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 6)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2560)], 0f32)))
                    compute_4[cse_var_152] = (compute_4[cse_var_152] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 7)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2560)], 0f32)))
                    compute_4[cse_var_151] = (compute_4[cse_var_151] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 8)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2560)], 0f32)))
                    compute_4[cse_var_150] = (compute_4[cse_var_150] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 9)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2560)], 0f32)))
                    compute_4[cse_var_55] = (compute_4[cse_var_55] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 10)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2560)], 0f32)))
                    compute_4[cse_var_149] = (compute_4[cse_var_149] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 11)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2560)], 0f32)))
                    compute_4[cse_var_132] = (compute_4[cse_var_132] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 12)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2560)], 0f32)))
                    compute_4[cse_var_153] = (compute_4[cse_var_153] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 13)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2560)], 0f32)))
                    compute_4[cse_var_245] = (compute_4[cse_var_245] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 14)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2560)], 0f32)))
                    compute_4[cse_var_147] = (compute_4[cse_var_147] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 15)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2560)], 0f32)))
                    compute_4[cse_var_248] = (compute_4[cse_var_248] + (placeholder_4[((placeholder_3[cse_var_2]*16) + cse_var_108)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2816)], 0f32)))
                    compute_4[cse_var_146] = (compute_4[cse_var_146] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 1)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2816)], 0f32)))
                    compute_4[cse_var_67] = (compute_4[cse_var_67] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 2)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2816)], 0f32)))
                    compute_4[cse_var_145] = (compute_4[cse_var_145] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 3)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2816)], 0f32)))
                    compute_4[cse_var_144] = (compute_4[cse_var_144] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 4)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2816)], 0f32)))
                    compute_4[cse_var_143] = (compute_4[cse_var_143] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 5)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2816)], 0f32)))
                    compute_4[cse_var_142] = (compute_4[cse_var_142] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 6)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2816)], 0f32)))
                    compute_4[cse_var_226] = (compute_4[cse_var_226] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 7)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2816)], 0f32)))
                    compute_4[cse_var_122] = (compute_4[cse_var_122] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 8)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2816)], 0f32)))
                    compute_4[cse_var_141] = (compute_4[cse_var_141] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 9)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2816)], 0f32)))
                    compute_4[cse_var_140] = (compute_4[cse_var_140] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 10)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2816)], 0f32)))
                    compute_4[cse_var_213] = (compute_4[cse_var_213] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 11)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2816)], 0f32)))
                    compute_4[cse_var_139] = (compute_4[cse_var_139] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 12)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2816)], 0f32)))
                    compute_4[cse_var_138] = (compute_4[cse_var_138] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 13)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2816)], 0f32)))
                    compute_4[cse_var_27] = (compute_4[cse_var_27] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 14)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2816)], 0f32)))
                    compute_4[cse_var_87] = (compute_4[cse_var_87] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 15)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 2816)], 0f32)))
                    compute_4[cse_var_136] = (compute_4[cse_var_136] + (placeholder_4[((placeholder_3[cse_var_2]*16) + cse_var_108)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3072)], 0f32)))
                    compute_4[cse_var_135] = (compute_4[cse_var_135] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 1)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3072)], 0f32)))
                    compute_4[cse_var_104] = (compute_4[cse_var_104] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 2)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3072)], 0f32)))
                    compute_4[cse_var_134] = (compute_4[cse_var_134] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 3)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3072)], 0f32)))
                    compute_4[cse_var_47] = (compute_4[cse_var_47] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 4)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3072)], 0f32)))
                    compute_4[cse_var_133] = (compute_4[cse_var_133] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 5)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3072)], 0f32)))
                    compute_4[cse_var_148] = (compute_4[cse_var_148] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 6)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3072)], 0f32)))
                    compute_4[cse_var_242] = (compute_4[cse_var_242] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 7)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3072)], 0f32)))
                    compute_4[cse_var_195] = (compute_4[cse_var_195] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 8)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3072)], 0f32)))
                    compute_4[cse_var_194] = (compute_4[cse_var_194] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 9)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3072)], 0f32)))
                    compute_4[cse_var_193] = (compute_4[cse_var_193] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 10)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3072)], 0f32)))
                    compute_4[cse_var_192] = (compute_4[cse_var_192] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 11)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3072)], 0f32)))
                    compute_4[cse_var_191] = (compute_4[cse_var_191] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 12)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3072)], 0f32)))
                    compute_4[cse_var_25] = (compute_4[cse_var_25] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 13)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3072)], 0f32)))
                    compute_4[cse_var_190] = (compute_4[cse_var_190] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 14)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3072)], 0f32)))
                    compute_4[cse_var_188] = (compute_4[cse_var_188] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 15)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3072)], 0f32)))
                    compute_4[cse_var_54] = (compute_4[cse_var_54] + (placeholder_4[((placeholder_3[cse_var_2]*16) + cse_var_108)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3328)], 0f32)))
                    compute_4[cse_var_187] = (compute_4[cse_var_187] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 1)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3328)], 0f32)))
                    compute_4[cse_var_186] = (compute_4[cse_var_186] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 2)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3328)], 0f32)))
                    compute_4[cse_var_197] = (compute_4[cse_var_197] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 3)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3328)], 0f32)))
                    compute_4[cse_var_185] = (compute_4[cse_var_185] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 4)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3328)], 0f32)))
                    compute_4[cse_var_100] = (compute_4[cse_var_100] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 5)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3328)], 0f32)))
                    compute_4[cse_var_184] = (compute_4[cse_var_184] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 6)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3328)], 0f32)))
                    compute_4[cse_var_183] = (compute_4[cse_var_183] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 7)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3328)], 0f32)))
                    compute_4[cse_var_231] = (compute_4[cse_var_231] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 8)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3328)], 0f32)))
                    compute_4[cse_var_182] = (compute_4[cse_var_182] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 9)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3328)], 0f32)))
                    compute_4[cse_var_181] = (compute_4[cse_var_181] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 10)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3328)], 0f32)))
                    compute_4[cse_var_110] = (compute_4[cse_var_110] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 11)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3328)], 0f32)))
                    compute_4[cse_var_164] = (compute_4[cse_var_164] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 12)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3328)], 0f32)))
                    compute_4[cse_var_189] = (compute_4[cse_var_189] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 13)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3328)], 0f32)))
                    compute_4[cse_var_112] = (compute_4[cse_var_112] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 14)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3328)], 0f32)))
                    compute_4[cse_var_102] = (compute_4[cse_var_102] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 15)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3328)], 0f32)))
                    compute_4[cse_var_23] = (compute_4[cse_var_23] + (placeholder_4[((placeholder_3[cse_var_2]*16) + cse_var_108)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3584)], 0f32)))
                    compute_4[cse_var_179] = (compute_4[cse_var_179] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 1)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3584)], 0f32)))
                    compute_4[cse_var_137] = (compute_4[cse_var_137] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 2)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3584)], 0f32)))
                    compute_4[cse_var_178] = (compute_4[cse_var_178] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 3)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3584)], 0f32)))
                    compute_4[cse_var_177] = (compute_4[cse_var_177] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 4)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3584)], 0f32)))
                    compute_4[cse_var_156] = (compute_4[cse_var_156] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 5)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3584)], 0f32)))
                    compute_4[cse_var_176] = (compute_4[cse_var_176] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 6)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3584)], 0f32)))
                    compute_4[cse_var_160] = (compute_4[cse_var_160] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 7)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3584)], 0f32)))
                    compute_4[cse_var_128] = (compute_4[cse_var_128] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 8)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3584)], 0f32)))
                    compute_4[cse_var_33] = (compute_4[cse_var_33] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 9)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3584)], 0f32)))
                    compute_4[cse_var_175] = (compute_4[cse_var_175] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 10)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3584)], 0f32)))
                    compute_4[cse_var_131] = (compute_4[cse_var_131] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 11)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3584)], 0f32)))
                    compute_4[cse_var_174] = (compute_4[cse_var_174] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 12)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3584)], 0f32)))
                    compute_4[cse_var_22] = (compute_4[cse_var_22] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 13)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3584)], 0f32)))
                    compute_4[cse_var_173] = (compute_4[cse_var_173] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 14)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3584)], 0f32)))
                    compute_4[cse_var_163] = (compute_4[cse_var_163] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 15)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3584)], 0f32)))
                    compute_4[cse_var_172] = (compute_4[cse_var_172] + (placeholder_4[((placeholder_3[cse_var_2]*16) + cse_var_108)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3840)], 0f32)))
                    compute_4[cse_var_32] = (compute_4[cse_var_32] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 1)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3840)], 0f32)))
                    compute_4[cse_var_60] = (compute_4[cse_var_60] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 2)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3840)], 0f32)))
                    compute_4[cse_var_171] = (compute_4[cse_var_171] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 3)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3840)], 0f32)))
                    compute_4[cse_var_107] = (compute_4[cse_var_107] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 4)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3840)], 0f32)))
                    compute_4[cse_var_170] = (compute_4[cse_var_170] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 5)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3840)], 0f32)))
                    compute_4[cse_var_127] = (compute_4[cse_var_127] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 6)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3840)], 0f32)))
                    compute_4[cse_var_169] = (compute_4[cse_var_169] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 7)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3840)], 0f32)))
                    compute_4[cse_var_97] = (compute_4[cse_var_97] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 8)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3840)], 0f32)))
                    compute_4[cse_var_168] = (compute_4[cse_var_168] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 9)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3840)], 0f32)))
                    compute_4[cse_var_247] = (compute_4[cse_var_247] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 10)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3840)], 0f32)))
                    compute_4[cse_var_167] = (compute_4[cse_var_167] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 11)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3840)], 0f32)))
                    compute_4[cse_var_166] = (compute_4[cse_var_166] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 12)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3840)], 0f32)))
                    compute_4[cse_var_165] = (compute_4[cse_var_165] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 13)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3840)], 0f32)))
                    compute_4[cse_var_227] = (compute_4[cse_var_227] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 14)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3840)], 0f32)))
                    compute_4[cse_var_76] = (compute_4[cse_var_76] + (placeholder_4[(((placeholder_3[cse_var_2]*16) + cse_var_108) + 15)]*max(placeholder_2[((cse_var_3 + placeholder_1[(placeholder_3[cse_var_2] + elem_idx)]) + 3840)], 0f32)))
                  }
                }
              }
            }
          }
          for (i0.inner: int32, 0, 64) {
            for (i1.inner: int32, 0, 32) {
              let cse_var_260: int32 = ((((floordiv(i0.outer.i1.outer.fused, 16)*32768) + (i0.inner*512)) + (floormod(i0.outer.i1.outer.fused, 16)*32)) + i1.inner)
              compute[cse_var_260] = max((compute_4[((i0.inner*32) + i1.inner)] + placeholder[cse_var_260]), 0f32)
            }
          }
        }
      }
    }





Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.


.. code-block:: default


    func = tvm.build(sch, args, target)

    dev = tvm.cpu()

    X_tvm = tvm.nd.array(X_np, device=dev)
    W_data_tvm = tvm.nd.array(W_sp_np.data, device=dev)
    W_indices_tvm = tvm.nd.array(W_sp_np.indices, device=dev)
    W_indptr_tvm = tvm.nd.array(W_sp_np.indptr, device=dev)
    B_tvm = tvm.nd.array(B_np, device=dev)
    Y_tvm = tvm.nd.empty(Y_np.shape, device=dev)

    func(X_tvm, W_data_tvm, W_indices_tvm, W_indptr_tvm, B_tvm, Y_tvm)

    # Check results
    tvm.testing.assert_allclose(Y_np, Y_tvm.numpy(), atol=1e-4, rtol=1e-4)

    # Evaluate execution time.
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (
            np.median(evaluator(X_tvm, W_data_tvm, W_indices_tvm, W_indptr_tvm, B_tvm, Y_tvm).results)
            * 1000
        )
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Execution time of this operator: 3.451 ms



.. note:: Tuning result example

  .. code-block:: c

   ----------------------------------------------------------------------
   Lowered TIR:
   primfn(placeholder_5: handle, placeholder_6: handle, placeholder_7: handle, placeholder_8: handle, placeholder_9: handle, compute_1: handle) -> ()
     attr = {"global_symbol": "main", "tir.noalias": True}
     buffers = {placeholder_2: Buffer(placeholder_10: Pointer(float32), float32, [9831, 16, 1], []),
                placeholder_4: Buffer(placeholder_11: Pointer(int32), int32, [33], []),
                placeholder_3: Buffer(placeholder_12: Pointer(float32), float32, [512, 512], []),
                compute: Buffer(compute_2: Pointer(float32), float32, [512, 512], []),
                placeholder_1: Buffer(placeholder_13: Pointer(float32), float32, [512, 512], []),
                placeholder: Buffer(placeholder_14: Pointer(int32), int32, [9831], [])}
     buffer_map = {placeholder_7: placeholder, placeholder_9: placeholder_1, placeholder_6: placeholder_2, compute_1: compute, placeholder_5: placeholder_3, placeholder_8: placeholder_4} {
     for (i0.outer.i1.outer.fused: int32, 0, 1024) "parallel" {
       attr [compute_3: Pointer(float32)] "storage_scope" = "global";
       allocate(compute_3, float32, [256]) {
         for (nb_j.inner: int32, 0, 2) {
           for (i.inner.init: int32, 0, 8) {
             for (j.init: int32, 0, 16) {
               compute_3[(((i.inner.init*32) + (nb_j.inner*16)) + j.init)] = 0f32
             }
           }
           for (elem_idx: int32, 0, ((int32*)placeholder_11[(((floormod(i0.outer.i1.outer.fused, 16)*2) + nb_j.inner) + 1)] - (int32*)placeholder_11[((floormod(i0.outer.i1.outer.fused, 16)*2) + nb_j.inner)])) {
             for (i.inner: int32, 0, 8) {
               for (j: int32, 0, 16) {
                 compute_3[(((i.inner*32) + (nb_j.inner*16)) + j)] = ((float32*)compute_3[(((i.inner*32) + (nb_j.inner*16)) + j)] + ((float32*)placeholder_10[((((int32*)placeholder_11[((floormod(i0.outer.i1.outer.fused, 16)*2) + nb_j.inner)]*16) + (elem_idx*16)) + j)]*max((float32*)placeholder_12[(((floordiv(i0.outer.i1.outer.fused, 16)*4096) + (i.inner*512)) + (int32*)placeholder_14[((int32*)placeholder_11[((floormod(i0.outer.i1.outer.fused, 16)*2) + nb_j.inner)] + elem_idx)])], 0f32)))
               }
             }
           }
         }
         for (i0.inner: int32, 0, 8) {
           compute_2[ramp((((floordiv(i0.outer.i1.outer.fused, 16)*4096) + (i0.inner*512)) + (floormod(i0.outer.i1.outer.fused, 16)*32)), 1, 32)] = max(((float32x32*)compute_3[ramp((i0.inner*32), 1, 32)] + (float32x32*)placeholder_13[ramp((((floordiv(i0.outer.i1.outer.fused, 16)*4096) + (i0.inner*512)) + (floormod(i0.outer.i1.outer.fused, 16)*32)), 1, 32)]), broadcast(0f32, 32))
         }
       }
     }
   }


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_sparse_x86.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: tune_sparse_x86.py <tune_sparse_x86.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: tune_sparse_x86.ipynb <tune_sparse_x86.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
