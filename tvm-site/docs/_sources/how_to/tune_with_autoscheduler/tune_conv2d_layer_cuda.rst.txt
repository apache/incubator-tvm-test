.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.


.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python







Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.


.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]








Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.


.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)




Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the master process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.


.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Get devices for measurement successfully!



Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.


.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none






We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.


.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Lowered TIR:
    @main = primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [25088], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [512], []),
                 data: Buffer(data_2: Pointer(float32), float32, [25088], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [2359296], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 16;
      allocate(conv2d_nchw: Pointer(local float32), float32, [7]), storage_scope = local;
      allocate(pad_temp.shared: Pointer(shared float32), float32, [2592]), storage_scope = shared;
      allocate(kernel.shared: Pointer(shared float32), float32, [9216]), storage_scope = shared;
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224 {
        conv2d_nchw_1: Buffer(conv2d_nchw, float32, [7], [], scope="local", align=16)[0] = 0f32
        conv2d_nchw_1[1] = 0f32
        conv2d_nchw_1[2] = 0f32
        conv2d_nchw_1[3] = 0f32
        conv2d_nchw_1[4] = 0f32
        conv2d_nchw_1[5] = 0f32
        conv2d_nchw_1[6] = 0f32
        for (rc.outer.outer: int32, 0, 16) {
          let cse_var_2: int32 = (rc.outer.outer*1568)
          let cse_var_1: int32 = (rc.outer.outer*288)
           {
            attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            pad_temp.shared_1: Buffer(pad_temp.shared, float32, [2592], [], scope="shared")[threadIdx.x_1] = @tir.if_then_else(((((9 <= floormod(threadIdx.x_1, 81)) && (floormod(threadIdx.x_1, 81) < 72)) && (1 <= floormod(threadIdx.x_1, 9))) && (floormod(threadIdx.x_1, 9) < 8)), data[((((cse_var_2 + (floordiv(threadIdx.x_1, 81)*49)) + (floordiv(floormod(threadIdx.x_1, 81), 9)*7)) + floormod(threadIdx.x_1, 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            pad_temp.shared_1[(threadIdx.x_1 + 224)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 224), 81)) && (floormod((threadIdx.x_1 + 62), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 8), 9))) && (floormod((threadIdx.x_1 + 8), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 224), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 224), 81), 9)*7)) + floormod((threadIdx.x_1 + 8), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            pad_temp.shared_1[(threadIdx.x_1 + 448)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 448), 81)) && (floormod((threadIdx.x_1 + 43), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 7), 9))) && (floormod((threadIdx.x_1 + 7), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 448), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 448), 81), 9)*7)) + floormod((threadIdx.x_1 + 7), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            pad_temp.shared_1[(threadIdx.x_1 + 672)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 672), 81)) && (floormod((threadIdx.x_1 + 24), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 6), 9))) && (floormod((threadIdx.x_1 + 6), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 672), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 672), 81), 9)*7)) + floormod((threadIdx.x_1 + 6), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            pad_temp.shared_1[(threadIdx.x_1 + 896)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 896), 81)) && (floormod((threadIdx.x_1 + 5), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 5), 9))) && (floormod((threadIdx.x_1 + 5), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 896), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 896), 81), 9)*7)) + floormod((threadIdx.x_1 + 5), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            pad_temp.shared_1[(threadIdx.x_1 + 1120)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 1120), 81)) && (floormod((threadIdx.x_1 + 67), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 4), 9))) && (floormod((threadIdx.x_1 + 4), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 1120), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 1120), 81), 9)*7)) + floormod((threadIdx.x_1 + 4), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            pad_temp.shared_1[(threadIdx.x_1 + 1344)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 1344), 81)) && (floormod((threadIdx.x_1 + 48), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 3), 9))) && (floormod((threadIdx.x_1 + 3), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 1344), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 1344), 81), 9)*7)) + floormod((threadIdx.x_1 + 3), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            pad_temp.shared_1[(threadIdx.x_1 + 1568)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 1568), 81)) && (floormod((threadIdx.x_1 + 29), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 2), 9))) && (floormod((threadIdx.x_1 + 2), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 1568), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 1568), 81), 9)*7)) + floormod((threadIdx.x_1 + 2), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            pad_temp.shared_1[(threadIdx.x_1 + 1792)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 1792), 81)) && (floormod((threadIdx.x_1 + 10), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 1), 9))) && (floormod((threadIdx.x_1 + 1), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 1792), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 1792), 81), 9)*7)) + floormod((threadIdx.x_1 + 1), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            pad_temp.shared_1[(threadIdx.x_1 + 2016)] = @tir.if_then_else(((((1 <= floormod((floordiv(threadIdx.x_1, 9) + 8), 9)) && (floormod((threadIdx.x_1 + 72), 81) < 72)) && (1 <= floormod(threadIdx.x_1, 9))) && (floormod(threadIdx.x_1, 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 2016), 81)*49)) + (floormod((floordiv(threadIdx.x_1, 9) + 8), 9)*7)) + floormod(threadIdx.x_1, 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            pad_temp.shared_1[(threadIdx.x_1 + 2240)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 2240), 81)) && (floormod((threadIdx.x_1 + 53), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 8), 9))) && (floormod((threadIdx.x_1 + 8), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 2240), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 2240), 81), 9)*7)) + floormod((threadIdx.x_1 + 8), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            if @tir.likely((threadIdx.x_1 < 128), dtype=bool) {
              pad_temp.shared_1[(threadIdx.x_1 + 2464)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 2464), 81)) && (floormod((threadIdx.x_1 + 34), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 7), 9))) && (floormod((threadIdx.x_1 + 7), 9) < 8)), data[((((cse_var_2 + (floordiv((threadIdx.x_1 + 2464), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 2464), 81), 9)*7)) + floormod((threadIdx.x_1 + 7), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1: Buffer(kernel.shared, float32, [9216], [], scope="shared")[threadIdx.x_2] = kernel[(((blockIdx.x*147456) + cse_var_1) + threadIdx.x_2)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 224)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 7), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 224), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 448)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 14), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 160), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 672)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 21), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 96), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 896)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 28), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 1120)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 35), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 256), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 1344)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 42), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 192), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 1568)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 49), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 128), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 1792)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 56), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 64), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 2016)] = kernel[((((blockIdx.x*147456) + cse_var_1) + threadIdx.x_2) + 32256)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 2240)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 70), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 224), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 2464)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 77), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 160), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 2688)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 84), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 96), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 2912)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 91), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 3136)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 98), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 256), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 3360)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 105), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 192), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 3584)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 112), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 128), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 3808)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 119), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 64), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 4032)] = kernel[((((blockIdx.x*147456) + cse_var_1) + threadIdx.x_2) + 64512)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 4256)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 133), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 224), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 4480)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 140), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 160), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 4704)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 147), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 96), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 4928)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 154), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 5152)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 161), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 256), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 5376)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 168), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 192), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 5600)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 175), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 128), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 5824)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 182), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 64), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 6048)] = kernel[((((blockIdx.x*147456) + cse_var_1) + threadIdx.x_2) + 96768)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 6272)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 196), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 224), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 6496)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 203), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 160), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 6720)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 210), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 96), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 6944)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 217), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 7168)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 224), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 256), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 7392)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 231), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 192), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 7616)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 238), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 128), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 7840)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 245), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 64), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 8064)] = kernel[((((blockIdx.x*147456) + cse_var_1) + threadIdx.x_2) + 129024)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 8288)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 259), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 224), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 8512)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 266), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 160), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 8736)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 273), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 96), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            kernel.shared_1[(threadIdx.x_2 + 8960)] = kernel[((((blockIdx.x*147456) + (floordiv((floordiv(threadIdx.x_2, 32) + 280), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 288))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 224;
            if @tir.likely((threadIdx.x_2 < 32), dtype=bool) {
              kernel.shared_1[(threadIdx.x_2 + 9184)] = kernel[((((blockIdx.x*147456) + cse_var_1) + floormod((threadIdx.x_2 + 256), 288)) + 142848)]
            }
            for (ry.outer.inner: int32, 0, 3) {
              for (rx.outer.inner: int32, 0, 3) {
                for (xx.outer.inner: int32, 0, 7) {
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 81)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 9)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 162)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 18)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 243)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 27)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 324)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 36)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 405)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 45)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 486)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 54)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 567)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 63)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 648)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 72)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 729)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 81)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 810)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 90)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 891)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 99)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 972)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 108)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 1053)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 117)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 1134)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 126)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 1215)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 135)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 1296)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 144)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 1377)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 153)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 1458)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 162)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 1539)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 171)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 1620)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 180)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 1701)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 189)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 1782)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 198)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 1863)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 207)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 1944)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 216)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 2025)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 225)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 2106)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 234)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 2187)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 243)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 2268)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 252)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 2349)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 261)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 2430)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 270)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((((ry.outer.inner*9) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + rx.outer.inner) + 2511)]*kernel.shared_1[((((floordiv(threadIdx.x, 7)*288) + (ry.outer.inner*3)) + rx.outer.inner) + 279)]))
                }
              }
            }
          }
        }
        for (i3.inner: int32, 0, 7) {
          compute[(((blockIdx.x*1568) + (threadIdx.x*7)) + i3.inner)] = max((conv2d_nchw_1[i3.inner] + bias[((blockIdx.x*32) + floordiv(threadIdx.x, 7))]), 0f32)
        }
      }
    }





Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.


.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Execution time of this operator: 0.264 ms



Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.


.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=1)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=32)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=1)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=7)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=7)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=32)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=1)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=1)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=3)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=1)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=3)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=1)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=32)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=7)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=7)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=1)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=224)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=224)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 64)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(224) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[7];
      __shared__ float pad_temp_shared[2592];
      __shared__ float kernel_shared[9216];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      conv2d_nchw[4] = 0.000000e+00f;
      conv2d_nchw[5] = 0.000000e+00f;
      conv2d_nchw[6] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 16; ++rc_outer_outer) {
        __syncthreads();
        pad_temp_shared[((int)threadIdx.x)] = (((((9 <= (((int)threadIdx.x) % 81)) && ((((int)threadIdx.x) % 81) < 72)) && (1 <= (((int)threadIdx.x) % 9))) && ((((int)threadIdx.x) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 81) * 49)) + (((((int)threadIdx.x) % 81) / 9) * 7)) + (((int)threadIdx.x) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 224)] = (((((9 <= ((((int)threadIdx.x) + 62) % 81)) && (((((int)threadIdx.x) + 62) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 8) % 9))) && (((((int)threadIdx.x) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 224) / 81) * 49)) + ((((((int)threadIdx.x) + 62) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 8) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 448)] = (((((9 <= ((((int)threadIdx.x) + 43) % 81)) && (((((int)threadIdx.x) + 43) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 7) % 9))) && (((((int)threadIdx.x) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 448) / 81) * 49)) + ((((((int)threadIdx.x) + 43) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 7) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 672)] = (((((9 <= ((((int)threadIdx.x) + 24) % 81)) && (((((int)threadIdx.x) + 24) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 6) % 9))) && (((((int)threadIdx.x) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 672) / 81) * 49)) + ((((((int)threadIdx.x) + 24) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 6) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 896)] = (((((9 <= ((((int)threadIdx.x) + 5) % 81)) && (((((int)threadIdx.x) + 5) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 5) % 9))) && (((((int)threadIdx.x) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 896) / 81) * 49)) + ((((((int)threadIdx.x) + 5) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 5) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 1120)] = (((((9 <= ((((int)threadIdx.x) + 67) % 81)) && (((((int)threadIdx.x) + 67) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 4) % 9))) && (((((int)threadIdx.x) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 1120) / 81) * 49)) + ((((((int)threadIdx.x) + 67) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 1344)] = (((((9 <= ((((int)threadIdx.x) + 48) % 81)) && (((((int)threadIdx.x) + 48) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 3) % 9))) && (((((int)threadIdx.x) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 1344) / 81) * 49)) + ((((((int)threadIdx.x) + 48) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 3) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 1568)] = (((((9 <= ((((int)threadIdx.x) + 29) % 81)) && (((((int)threadIdx.x) + 29) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 2) % 9))) && (((((int)threadIdx.x) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 1568) / 81) * 49)) + ((((((int)threadIdx.x) + 29) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 2) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 1792)] = (((((9 <= ((((int)threadIdx.x) + 10) % 81)) && (((((int)threadIdx.x) + 10) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 1) % 9))) && (((((int)threadIdx.x) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 1792) / 81) * 49)) + ((((((int)threadIdx.x) + 10) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 1) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 2016)] = (((((1 <= (((((int)threadIdx.x) / 9) + 8) % 9)) && (((((int)threadIdx.x) + 72) % 81) < 72)) && (1 <= (((int)threadIdx.x) % 9))) && ((((int)threadIdx.x) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 2016) / 81) * 49)) + ((((((int)threadIdx.x) / 9) + 8) % 9) * 7)) + (((int)threadIdx.x) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 2240)] = (((((9 <= ((((int)threadIdx.x) + 53) % 81)) && (((((int)threadIdx.x) + 53) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 8) % 9))) && (((((int)threadIdx.x) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 2240) / 81) * 49)) + ((((((int)threadIdx.x) + 53) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 8) % 9)) - 8)] : 0.000000e+00f);
        if (((int)threadIdx.x) < 128) {
          pad_temp_shared[(((int)threadIdx.x) + 2464)] = (((((9 <= ((((int)threadIdx.x) + 34) % 81)) && (((((int)threadIdx.x) + 34) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 7) % 9))) && (((((int)threadIdx.x) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 2464) / 81) * 49)) + ((((((int)threadIdx.x) + 34) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 7) % 9)) - 8)] : 0.000000e+00f);
        }
        kernel_shared[((int)threadIdx.x)] = kernel[(((((int)blockIdx.x) * 147456) + (rc_outer_outer * 288)) + ((int)threadIdx.x))];
        kernel_shared[(((int)threadIdx.x) + 224)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 224) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 224) % 288))];
        kernel_shared[(((int)threadIdx.x) + 448)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 448) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 160) % 288))];
        kernel_shared[(((int)threadIdx.x) + 672)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 672) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 96) % 288))];
        kernel_shared[(((int)threadIdx.x) + 896)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 896) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 32))];
        kernel_shared[(((int)threadIdx.x) + 1120)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1120) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 256) % 288))];
        kernel_shared[(((int)threadIdx.x) + 1344)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1344) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 192) % 288))];
        kernel_shared[(((int)threadIdx.x) + 1568)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1568) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 128) % 288))];
        kernel_shared[(((int)threadIdx.x) + 1792)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1792) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 64))];
        kernel_shared[(((int)threadIdx.x) + 2016)] = kernel[((((((int)blockIdx.x) * 147456) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 32256)];
        kernel_shared[(((int)threadIdx.x) + 2240)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2240) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 224) % 288))];
        kernel_shared[(((int)threadIdx.x) + 2464)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2464) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 160) % 288))];
        kernel_shared[(((int)threadIdx.x) + 2688)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2688) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 96) % 288))];
        kernel_shared[(((int)threadIdx.x) + 2912)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2912) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 32))];
        kernel_shared[(((int)threadIdx.x) + 3136)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 3136) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 256) % 288))];
        kernel_shared[(((int)threadIdx.x) + 3360)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 3360) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 192) % 288))];
        kernel_shared[(((int)threadIdx.x) + 3584)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 3584) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 128) % 288))];
        kernel_shared[(((int)threadIdx.x) + 3808)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 3808) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 64))];
        kernel_shared[(((int)threadIdx.x) + 4032)] = kernel[((((((int)blockIdx.x) * 147456) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 64512)];
        kernel_shared[(((int)threadIdx.x) + 4256)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 4256) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 224) % 288))];
        kernel_shared[(((int)threadIdx.x) + 4480)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 4480) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 160) % 288))];
        kernel_shared[(((int)threadIdx.x) + 4704)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 4704) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 96) % 288))];
        kernel_shared[(((int)threadIdx.x) + 4928)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 4928) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 32))];
        kernel_shared[(((int)threadIdx.x) + 5152)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 5152) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 256) % 288))];
        kernel_shared[(((int)threadIdx.x) + 5376)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 5376) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 192) % 288))];
        kernel_shared[(((int)threadIdx.x) + 5600)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 5600) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 128) % 288))];
        kernel_shared[(((int)threadIdx.x) + 5824)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 5824) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 64))];
        kernel_shared[(((int)threadIdx.x) + 6048)] = kernel[((((((int)blockIdx.x) * 147456) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 96768)];
        kernel_shared[(((int)threadIdx.x) + 6272)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 6272) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 224) % 288))];
        kernel_shared[(((int)threadIdx.x) + 6496)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 6496) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 160) % 288))];
        kernel_shared[(((int)threadIdx.x) + 6720)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 6720) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 96) % 288))];
        kernel_shared[(((int)threadIdx.x) + 6944)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 6944) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 32))];
        kernel_shared[(((int)threadIdx.x) + 7168)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 7168) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 256) % 288))];
        kernel_shared[(((int)threadIdx.x) + 7392)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 7392) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 192) % 288))];
        kernel_shared[(((int)threadIdx.x) + 7616)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 7616) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 128) % 288))];
        kernel_shared[(((int)threadIdx.x) + 7840)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 7840) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 64))];
        kernel_shared[(((int)threadIdx.x) + 8064)] = kernel[((((((int)blockIdx.x) * 147456) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 129024)];
        kernel_shared[(((int)threadIdx.x) + 8288)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 8288) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 224) % 288))];
        kernel_shared[(((int)threadIdx.x) + 8512)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 8512) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 160) % 288))];
        kernel_shared[(((int)threadIdx.x) + 8736)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 8736) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) + 96) % 288))];
        kernel_shared[(((int)threadIdx.x) + 8960)] = kernel[((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 8960) / 288) * 4608)) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 32))];
        if (((int)threadIdx.x) < 32) {
          kernel_shared[(((int)threadIdx.x) + 9184)] = kernel[((((((int)blockIdx.x) * 147456) + (rc_outer_outer * 288)) + (((int)threadIdx.x) + 256)) + 142848)];
        }
        __syncthreads();
        for (int ry_outer_inner = 0; ry_outer_inner < 3; ++ry_outer_inner) {
          for (int rx_outer_inner = 0; rx_outer_inner < 3; ++rx_outer_inner) {
            for (int xx_outer_inner = 0; xx_outer_inner < 7; ++xx_outer_inner) {
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 81)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 9)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 162)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 18)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 243)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 27)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 324)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 36)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 405)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 45)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 486)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 54)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 567)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 63)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 648)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 72)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 729)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 81)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 810)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 90)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 891)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 99)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 972)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 108)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 1053)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 117)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 1134)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 126)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 1215)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 135)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 1296)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 144)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 1377)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 153)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 1458)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 162)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 1539)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 171)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 1620)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 180)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 1701)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 189)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 1782)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 198)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 1863)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 207)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 1944)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 216)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 2025)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 225)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 2106)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 234)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 2187)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 243)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 2268)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 252)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 2349)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 261)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 2430)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 270)]));
              conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((((ry_outer_inner * 9) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + rx_outer_inner) + 2511)] * kernel_shared[(((((((int)threadIdx.x) / 7) * 288) + (ry_outer_inner * 3)) + rx_outer_inner) + 279)]));
            }
          }
        }
      }
      for (int i3_inner = 0; i3_inner < 7; ++i3_inner) {
        compute[(((((int)blockIdx.x) * 1568) + (((int)threadIdx.x) * 7)) + i3_inner)] = max((conv2d_nchw[i3_inner] + bias[((((int)blockIdx.x) * 32) + (((int)threadIdx.x) / 7))]), 0.000000e+00f);
      }
    }





A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.


.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Resume search:
    /usr/local/lib/python3.6/dist-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  30.133 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
