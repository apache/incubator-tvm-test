.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.


.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python







Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.


.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]








Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.


.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)




Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the master process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.


.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Get devices for measurement successfully!



Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.


.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none






We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.


.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Lowered TIR:
    @main = primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [25088], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [512], []),
                 data: Buffer(data_2: Pointer(float32), float32, [25088], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [2359296], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 14;
      allocate(conv2d_nchw: Pointer(local float32), float32, [14]), storage_scope = local;
      allocate(pad_temp.shared: Pointer(shared float32), float32, [108]), storage_scope = shared;
      allocate(kernel.shared: Pointer(shared float32), float32, [9216]), storage_scope = shared;
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128 {
        conv2d_nchw_1: Buffer(conv2d_nchw, float32, [14], [], scope="local", align=32)[0] = 0f32
        conv2d_nchw_1[7] = 0f32
        conv2d_nchw_1[1] = 0f32
        conv2d_nchw_1[8] = 0f32
        conv2d_nchw_1[2] = 0f32
        conv2d_nchw_1[9] = 0f32
        conv2d_nchw_1[3] = 0f32
        conv2d_nchw_1[10] = 0f32
        conv2d_nchw_1[4] = 0f32
        conv2d_nchw_1[11] = 0f32
        conv2d_nchw_1[5] = 0f32
        conv2d_nchw_1[12] = 0f32
        conv2d_nchw_1[6] = 0f32
        conv2d_nchw_1[13] = 0f32
        for (rc.outer.outer: int32, 0, 128) {
          let cse_var_1: int32 = (rc.outer.outer*36)
           {
            attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            if @tir.likely((threadIdx.x_1 < 108), dtype=bool) {
              pad_temp.shared_1: Buffer(pad_temp.shared, float32, [108], [], scope="shared")[threadIdx.x_1] = @tir.if_then_else(((((3 <= floormod(threadIdx.x_1, 27)) && (floormod(threadIdx.x_1, 27) < 24)) && (1 <= (floormod(blockIdx.x, 7) + floormod(threadIdx.x_1, 3)))) && ((floormod(blockIdx.x, 7) + floormod(threadIdx.x_1, 3)) < 8)), data[((((((rc.outer.outer*196) + (floordiv(threadIdx.x_1, 27)*49)) + (floordiv(floormod(threadIdx.x_1, 27), 3)*7)) + floormod(blockIdx.x, 7)) + floormod(threadIdx.x_1, 3)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1: Buffer(kernel.shared, float32, [9216], [], scope="shared")[threadIdx.x_2] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv(threadIdx.x_2, 36)*4608)) + cse_var_1) + floormod(threadIdx.x_2, 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 128)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 32), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 20), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 256)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 64), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 4), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 384)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 96), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 512)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 128), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 640)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 160), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 28), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 768)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 192), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 12), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 896)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 224), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 1024)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 256), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 1152)] = kernel[(((((floordiv(blockIdx.x, 7)*1179648) + (floordiv(floordiv(threadIdx.x_2, 4), 9)*4608)) + cse_var_1) + floormod(threadIdx.x_2, 36)) + 147456)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 1280)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 320), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 20), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 1408)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 352), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 4), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 1536)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 384), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 1664)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 416), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 1792)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 448), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 28), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 1920)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 480), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 12), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 2048)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 512), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 2176)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 544), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 2304)] = kernel[(((((floordiv(blockIdx.x, 7)*1179648) + (floordiv(floordiv(threadIdx.x_2, 4), 9)*4608)) + cse_var_1) + floormod(threadIdx.x_2, 36)) + 294912)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 2432)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 608), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 20), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 2560)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 640), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 4), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 2688)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 672), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 2816)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 704), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 2944)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 736), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 28), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 3072)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 768), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 12), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 3200)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 800), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 3328)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 832), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 3456)] = kernel[(((((floordiv(blockIdx.x, 7)*1179648) + (floordiv(floordiv(threadIdx.x_2, 4), 9)*4608)) + cse_var_1) + floormod(threadIdx.x_2, 36)) + 442368)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 3584)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 896), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 20), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 3712)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 928), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 4), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 3840)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 960), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 3968)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 992), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 4096)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1024), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 28), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 4224)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1056), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 12), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 4352)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1088), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 4480)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1120), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 4608)] = kernel[(((((floordiv(blockIdx.x, 7)*1179648) + (floordiv(floordiv(threadIdx.x_2, 4), 9)*4608)) + cse_var_1) + floormod(threadIdx.x_2, 36)) + 589824)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 4736)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1184), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 20), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 4864)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1216), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 4), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 4992)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1248), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 5120)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1280), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 5248)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1312), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 28), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 5376)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1344), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 12), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 5504)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1376), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 5632)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1408), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 5760)] = kernel[(((((floordiv(blockIdx.x, 7)*1179648) + (floordiv(floordiv(threadIdx.x_2, 4), 9)*4608)) + cse_var_1) + floormod(threadIdx.x_2, 36)) + 737280)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 5888)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1472), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 20), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 6016)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1504), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 4), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 6144)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1536), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 6272)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1568), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 6400)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1600), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 28), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 6528)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1632), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 12), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 6656)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1664), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 6784)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1696), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 6912)] = kernel[(((((floordiv(blockIdx.x, 7)*1179648) + (floordiv(floordiv(threadIdx.x_2, 4), 9)*4608)) + cse_var_1) + floormod(threadIdx.x_2, 36)) + 884736)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 7040)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1760), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 20), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 7168)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1792), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 4), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 7296)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1824), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 7424)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1856), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 7552)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1888), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 28), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 7680)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1920), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 12), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 7808)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1952), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 7936)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 1984), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 8064)] = kernel[(((((floordiv(blockIdx.x, 7)*1179648) + (floordiv(floordiv(threadIdx.x_2, 4), 9)*4608)) + cse_var_1) + floormod(threadIdx.x_2, 36)) + 1032192)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 8192)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 2048), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 20), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 8320)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 2080), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 4), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 8448)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 2112), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 24), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 8576)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 2144), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 8), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 8704)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 2176), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 28), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 8832)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 2208), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 12), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 8960)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 2240), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 32), 36))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 128;
            kernel.shared_1[(threadIdx.x_2 + 9088)] = kernel[((((floordiv(blockIdx.x, 7)*1179648) + (floordiv((floordiv(threadIdx.x_2, 4) + 2272), 9)*4608)) + cse_var_1) + floormod((threadIdx.x_2 + 16), 36))]
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[0]*kernel.shared_1[(threadIdx.x*72)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[0]*kernel.shared_1[((threadIdx.x*72) + 36)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[1]*kernel.shared_1[((threadIdx.x*72) + 1)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[1]*kernel.shared_1[((threadIdx.x*72) + 37)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[2]*kernel.shared_1[((threadIdx.x*72) + 2)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[2]*kernel.shared_1[((threadIdx.x*72) + 38)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[3]*kernel.shared_1[((threadIdx.x*72) + 3)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[3]*kernel.shared_1[((threadIdx.x*72) + 39)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[4]*kernel.shared_1[((threadIdx.x*72) + 4)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[4]*kernel.shared_1[((threadIdx.x*72) + 40)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[5]*kernel.shared_1[((threadIdx.x*72) + 5)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[5]*kernel.shared_1[((threadIdx.x*72) + 41)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[6]*kernel.shared_1[((threadIdx.x*72) + 6)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[6]*kernel.shared_1[((threadIdx.x*72) + 42)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[7]*kernel.shared_1[((threadIdx.x*72) + 7)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[7]*kernel.shared_1[((threadIdx.x*72) + 43)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[8]*kernel.shared_1[((threadIdx.x*72) + 8)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[8]*kernel.shared_1[((threadIdx.x*72) + 44)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[3]*kernel.shared_1[(threadIdx.x*72)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[3]*kernel.shared_1[((threadIdx.x*72) + 36)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[4]*kernel.shared_1[((threadIdx.x*72) + 1)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[4]*kernel.shared_1[((threadIdx.x*72) + 37)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[5]*kernel.shared_1[((threadIdx.x*72) + 2)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[5]*kernel.shared_1[((threadIdx.x*72) + 38)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[6]*kernel.shared_1[((threadIdx.x*72) + 3)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[6]*kernel.shared_1[((threadIdx.x*72) + 39)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[7]*kernel.shared_1[((threadIdx.x*72) + 4)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[7]*kernel.shared_1[((threadIdx.x*72) + 40)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[8]*kernel.shared_1[((threadIdx.x*72) + 5)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[8]*kernel.shared_1[((threadIdx.x*72) + 41)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[9]*kernel.shared_1[((threadIdx.x*72) + 6)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[9]*kernel.shared_1[((threadIdx.x*72) + 42)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[10]*kernel.shared_1[((threadIdx.x*72) + 7)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[10]*kernel.shared_1[((threadIdx.x*72) + 43)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[11]*kernel.shared_1[((threadIdx.x*72) + 8)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[11]*kernel.shared_1[((threadIdx.x*72) + 44)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[6]*kernel.shared_1[(threadIdx.x*72)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[6]*kernel.shared_1[((threadIdx.x*72) + 36)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[7]*kernel.shared_1[((threadIdx.x*72) + 1)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[7]*kernel.shared_1[((threadIdx.x*72) + 37)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[8]*kernel.shared_1[((threadIdx.x*72) + 2)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[8]*kernel.shared_1[((threadIdx.x*72) + 38)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[9]*kernel.shared_1[((threadIdx.x*72) + 3)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[9]*kernel.shared_1[((threadIdx.x*72) + 39)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[10]*kernel.shared_1[((threadIdx.x*72) + 4)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[10]*kernel.shared_1[((threadIdx.x*72) + 40)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[11]*kernel.shared_1[((threadIdx.x*72) + 5)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[11]*kernel.shared_1[((threadIdx.x*72) + 41)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[12]*kernel.shared_1[((threadIdx.x*72) + 6)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[12]*kernel.shared_1[((threadIdx.x*72) + 42)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[13]*kernel.shared_1[((threadIdx.x*72) + 7)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[13]*kernel.shared_1[((threadIdx.x*72) + 43)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[14]*kernel.shared_1[((threadIdx.x*72) + 8)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[14]*kernel.shared_1[((threadIdx.x*72) + 44)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[9]*kernel.shared_1[(threadIdx.x*72)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[9]*kernel.shared_1[((threadIdx.x*72) + 36)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[10]*kernel.shared_1[((threadIdx.x*72) + 1)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[10]*kernel.shared_1[((threadIdx.x*72) + 37)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[11]*kernel.shared_1[((threadIdx.x*72) + 2)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[11]*kernel.shared_1[((threadIdx.x*72) + 38)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[12]*kernel.shared_1[((threadIdx.x*72) + 3)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[12]*kernel.shared_1[((threadIdx.x*72) + 39)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[13]*kernel.shared_1[((threadIdx.x*72) + 4)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[13]*kernel.shared_1[((threadIdx.x*72) + 40)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[14]*kernel.shared_1[((threadIdx.x*72) + 5)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[14]*kernel.shared_1[((threadIdx.x*72) + 41)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[15]*kernel.shared_1[((threadIdx.x*72) + 6)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[15]*kernel.shared_1[((threadIdx.x*72) + 42)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[16]*kernel.shared_1[((threadIdx.x*72) + 7)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[16]*kernel.shared_1[((threadIdx.x*72) + 43)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[17]*kernel.shared_1[((threadIdx.x*72) + 8)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[17]*kernel.shared_1[((threadIdx.x*72) + 44)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[12]*kernel.shared_1[(threadIdx.x*72)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[12]*kernel.shared_1[((threadIdx.x*72) + 36)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[13]*kernel.shared_1[((threadIdx.x*72) + 1)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[13]*kernel.shared_1[((threadIdx.x*72) + 37)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[14]*kernel.shared_1[((threadIdx.x*72) + 2)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[14]*kernel.shared_1[((threadIdx.x*72) + 38)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[15]*kernel.shared_1[((threadIdx.x*72) + 3)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[15]*kernel.shared_1[((threadIdx.x*72) + 39)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[16]*kernel.shared_1[((threadIdx.x*72) + 4)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[16]*kernel.shared_1[((threadIdx.x*72) + 40)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[17]*kernel.shared_1[((threadIdx.x*72) + 5)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[17]*kernel.shared_1[((threadIdx.x*72) + 41)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[18]*kernel.shared_1[((threadIdx.x*72) + 6)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[18]*kernel.shared_1[((threadIdx.x*72) + 42)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[19]*kernel.shared_1[((threadIdx.x*72) + 7)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[19]*kernel.shared_1[((threadIdx.x*72) + 43)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[20]*kernel.shared_1[((threadIdx.x*72) + 8)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[20]*kernel.shared_1[((threadIdx.x*72) + 44)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[15]*kernel.shared_1[(threadIdx.x*72)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[15]*kernel.shared_1[((threadIdx.x*72) + 36)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[16]*kernel.shared_1[((threadIdx.x*72) + 1)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[16]*kernel.shared_1[((threadIdx.x*72) + 37)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[17]*kernel.shared_1[((threadIdx.x*72) + 2)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[17]*kernel.shared_1[((threadIdx.x*72) + 38)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[18]*kernel.shared_1[((threadIdx.x*72) + 3)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[18]*kernel.shared_1[((threadIdx.x*72) + 39)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[19]*kernel.shared_1[((threadIdx.x*72) + 4)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[19]*kernel.shared_1[((threadIdx.x*72) + 40)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[20]*kernel.shared_1[((threadIdx.x*72) + 5)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[20]*kernel.shared_1[((threadIdx.x*72) + 41)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[21]*kernel.shared_1[((threadIdx.x*72) + 6)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[21]*kernel.shared_1[((threadIdx.x*72) + 42)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[22]*kernel.shared_1[((threadIdx.x*72) + 7)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[22]*kernel.shared_1[((threadIdx.x*72) + 43)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[23]*kernel.shared_1[((threadIdx.x*72) + 8)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[23]*kernel.shared_1[((threadIdx.x*72) + 44)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[18]*kernel.shared_1[(threadIdx.x*72)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[18]*kernel.shared_1[((threadIdx.x*72) + 36)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[19]*kernel.shared_1[((threadIdx.x*72) + 1)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[19]*kernel.shared_1[((threadIdx.x*72) + 37)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[20]*kernel.shared_1[((threadIdx.x*72) + 2)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[20]*kernel.shared_1[((threadIdx.x*72) + 38)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[21]*kernel.shared_1[((threadIdx.x*72) + 3)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[21]*kernel.shared_1[((threadIdx.x*72) + 39)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[22]*kernel.shared_1[((threadIdx.x*72) + 4)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[22]*kernel.shared_1[((threadIdx.x*72) + 40)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[23]*kernel.shared_1[((threadIdx.x*72) + 5)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[23]*kernel.shared_1[((threadIdx.x*72) + 41)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[24]*kernel.shared_1[((threadIdx.x*72) + 6)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[24]*kernel.shared_1[((threadIdx.x*72) + 42)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[25]*kernel.shared_1[((threadIdx.x*72) + 7)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[25]*kernel.shared_1[((threadIdx.x*72) + 43)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[26]*kernel.shared_1[((threadIdx.x*72) + 8)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[26]*kernel.shared_1[((threadIdx.x*72) + 44)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[27]*kernel.shared_1[((threadIdx.x*72) + 9)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[27]*kernel.shared_1[((threadIdx.x*72) + 45)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[28]*kernel.shared_1[((threadIdx.x*72) + 10)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[28]*kernel.shared_1[((threadIdx.x*72) + 46)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[29]*kernel.shared_1[((threadIdx.x*72) + 11)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[29]*kernel.shared_1[((threadIdx.x*72) + 47)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[30]*kernel.shared_1[((threadIdx.x*72) + 12)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[30]*kernel.shared_1[((threadIdx.x*72) + 48)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[31]*kernel.shared_1[((threadIdx.x*72) + 13)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[31]*kernel.shared_1[((threadIdx.x*72) + 49)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[32]*kernel.shared_1[((threadIdx.x*72) + 14)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[32]*kernel.shared_1[((threadIdx.x*72) + 50)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[33]*kernel.shared_1[((threadIdx.x*72) + 15)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[33]*kernel.shared_1[((threadIdx.x*72) + 51)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[34]*kernel.shared_1[((threadIdx.x*72) + 16)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[34]*kernel.shared_1[((threadIdx.x*72) + 52)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[35]*kernel.shared_1[((threadIdx.x*72) + 17)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[35]*kernel.shared_1[((threadIdx.x*72) + 53)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[30]*kernel.shared_1[((threadIdx.x*72) + 9)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[30]*kernel.shared_1[((threadIdx.x*72) + 45)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[31]*kernel.shared_1[((threadIdx.x*72) + 10)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[31]*kernel.shared_1[((threadIdx.x*72) + 46)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[32]*kernel.shared_1[((threadIdx.x*72) + 11)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[32]*kernel.shared_1[((threadIdx.x*72) + 47)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[33]*kernel.shared_1[((threadIdx.x*72) + 12)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[33]*kernel.shared_1[((threadIdx.x*72) + 48)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[34]*kernel.shared_1[((threadIdx.x*72) + 13)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[34]*kernel.shared_1[((threadIdx.x*72) + 49)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[35]*kernel.shared_1[((threadIdx.x*72) + 14)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[35]*kernel.shared_1[((threadIdx.x*72) + 50)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[36]*kernel.shared_1[((threadIdx.x*72) + 15)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[36]*kernel.shared_1[((threadIdx.x*72) + 51)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[37]*kernel.shared_1[((threadIdx.x*72) + 16)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[37]*kernel.shared_1[((threadIdx.x*72) + 52)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[38]*kernel.shared_1[((threadIdx.x*72) + 17)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[38]*kernel.shared_1[((threadIdx.x*72) + 53)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[33]*kernel.shared_1[((threadIdx.x*72) + 9)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[33]*kernel.shared_1[((threadIdx.x*72) + 45)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[34]*kernel.shared_1[((threadIdx.x*72) + 10)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[34]*kernel.shared_1[((threadIdx.x*72) + 46)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[35]*kernel.shared_1[((threadIdx.x*72) + 11)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[35]*kernel.shared_1[((threadIdx.x*72) + 47)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[36]*kernel.shared_1[((threadIdx.x*72) + 12)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[36]*kernel.shared_1[((threadIdx.x*72) + 48)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[37]*kernel.shared_1[((threadIdx.x*72) + 13)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[37]*kernel.shared_1[((threadIdx.x*72) + 49)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[38]*kernel.shared_1[((threadIdx.x*72) + 14)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[38]*kernel.shared_1[((threadIdx.x*72) + 50)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[39]*kernel.shared_1[((threadIdx.x*72) + 15)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[39]*kernel.shared_1[((threadIdx.x*72) + 51)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[40]*kernel.shared_1[((threadIdx.x*72) + 16)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[40]*kernel.shared_1[((threadIdx.x*72) + 52)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[41]*kernel.shared_1[((threadIdx.x*72) + 17)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[41]*kernel.shared_1[((threadIdx.x*72) + 53)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[36]*kernel.shared_1[((threadIdx.x*72) + 9)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[36]*kernel.shared_1[((threadIdx.x*72) + 45)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[37]*kernel.shared_1[((threadIdx.x*72) + 10)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[37]*kernel.shared_1[((threadIdx.x*72) + 46)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[38]*kernel.shared_1[((threadIdx.x*72) + 11)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[38]*kernel.shared_1[((threadIdx.x*72) + 47)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[39]*kernel.shared_1[((threadIdx.x*72) + 12)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[39]*kernel.shared_1[((threadIdx.x*72) + 48)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[40]*kernel.shared_1[((threadIdx.x*72) + 13)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[40]*kernel.shared_1[((threadIdx.x*72) + 49)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[41]*kernel.shared_1[((threadIdx.x*72) + 14)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[41]*kernel.shared_1[((threadIdx.x*72) + 50)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[42]*kernel.shared_1[((threadIdx.x*72) + 15)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[42]*kernel.shared_1[((threadIdx.x*72) + 51)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[43]*kernel.shared_1[((threadIdx.x*72) + 16)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[43]*kernel.shared_1[((threadIdx.x*72) + 52)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[44]*kernel.shared_1[((threadIdx.x*72) + 17)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[44]*kernel.shared_1[((threadIdx.x*72) + 53)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[39]*kernel.shared_1[((threadIdx.x*72) + 9)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[39]*kernel.shared_1[((threadIdx.x*72) + 45)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[40]*kernel.shared_1[((threadIdx.x*72) + 10)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[40]*kernel.shared_1[((threadIdx.x*72) + 46)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[41]*kernel.shared_1[((threadIdx.x*72) + 11)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[41]*kernel.shared_1[((threadIdx.x*72) + 47)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[42]*kernel.shared_1[((threadIdx.x*72) + 12)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[42]*kernel.shared_1[((threadIdx.x*72) + 48)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[43]*kernel.shared_1[((threadIdx.x*72) + 13)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[43]*kernel.shared_1[((threadIdx.x*72) + 49)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[44]*kernel.shared_1[((threadIdx.x*72) + 14)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[44]*kernel.shared_1[((threadIdx.x*72) + 50)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[45]*kernel.shared_1[((threadIdx.x*72) + 15)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[45]*kernel.shared_1[((threadIdx.x*72) + 51)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[46]*kernel.shared_1[((threadIdx.x*72) + 16)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[46]*kernel.shared_1[((threadIdx.x*72) + 52)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[47]*kernel.shared_1[((threadIdx.x*72) + 17)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[47]*kernel.shared_1[((threadIdx.x*72) + 53)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[42]*kernel.shared_1[((threadIdx.x*72) + 9)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[42]*kernel.shared_1[((threadIdx.x*72) + 45)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[43]*kernel.shared_1[((threadIdx.x*72) + 10)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[43]*kernel.shared_1[((threadIdx.x*72) + 46)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[44]*kernel.shared_1[((threadIdx.x*72) + 11)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[44]*kernel.shared_1[((threadIdx.x*72) + 47)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[45]*kernel.shared_1[((threadIdx.x*72) + 12)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[45]*kernel.shared_1[((threadIdx.x*72) + 48)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[46]*kernel.shared_1[((threadIdx.x*72) + 13)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[46]*kernel.shared_1[((threadIdx.x*72) + 49)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[47]*kernel.shared_1[((threadIdx.x*72) + 14)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[47]*kernel.shared_1[((threadIdx.x*72) + 50)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[48]*kernel.shared_1[((threadIdx.x*72) + 15)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[48]*kernel.shared_1[((threadIdx.x*72) + 51)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[49]*kernel.shared_1[((threadIdx.x*72) + 16)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[49]*kernel.shared_1[((threadIdx.x*72) + 52)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[50]*kernel.shared_1[((threadIdx.x*72) + 17)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[50]*kernel.shared_1[((threadIdx.x*72) + 53)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[45]*kernel.shared_1[((threadIdx.x*72) + 9)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[45]*kernel.shared_1[((threadIdx.x*72) + 45)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[46]*kernel.shared_1[((threadIdx.x*72) + 10)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[46]*kernel.shared_1[((threadIdx.x*72) + 46)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[47]*kernel.shared_1[((threadIdx.x*72) + 11)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[47]*kernel.shared_1[((threadIdx.x*72) + 47)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[48]*kernel.shared_1[((threadIdx.x*72) + 12)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[48]*kernel.shared_1[((threadIdx.x*72) + 48)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[49]*kernel.shared_1[((threadIdx.x*72) + 13)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[49]*kernel.shared_1[((threadIdx.x*72) + 49)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[50]*kernel.shared_1[((threadIdx.x*72) + 14)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[50]*kernel.shared_1[((threadIdx.x*72) + 50)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[51]*kernel.shared_1[((threadIdx.x*72) + 15)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[51]*kernel.shared_1[((threadIdx.x*72) + 51)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[52]*kernel.shared_1[((threadIdx.x*72) + 16)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[52]*kernel.shared_1[((threadIdx.x*72) + 52)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[53]*kernel.shared_1[((threadIdx.x*72) + 17)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[53]*kernel.shared_1[((threadIdx.x*72) + 53)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[54]*kernel.shared_1[((threadIdx.x*72) + 18)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[54]*kernel.shared_1[((threadIdx.x*72) + 54)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[55]*kernel.shared_1[((threadIdx.x*72) + 19)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[55]*kernel.shared_1[((threadIdx.x*72) + 55)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[56]*kernel.shared_1[((threadIdx.x*72) + 20)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[56]*kernel.shared_1[((threadIdx.x*72) + 56)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[57]*kernel.shared_1[((threadIdx.x*72) + 21)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[57]*kernel.shared_1[((threadIdx.x*72) + 57)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[58]*kernel.shared_1[((threadIdx.x*72) + 22)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[58]*kernel.shared_1[((threadIdx.x*72) + 58)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[59]*kernel.shared_1[((threadIdx.x*72) + 23)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[59]*kernel.shared_1[((threadIdx.x*72) + 59)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[60]*kernel.shared_1[((threadIdx.x*72) + 24)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[60]*kernel.shared_1[((threadIdx.x*72) + 60)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[61]*kernel.shared_1[((threadIdx.x*72) + 25)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[61]*kernel.shared_1[((threadIdx.x*72) + 61)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[62]*kernel.shared_1[((threadIdx.x*72) + 26)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[62]*kernel.shared_1[((threadIdx.x*72) + 62)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[57]*kernel.shared_1[((threadIdx.x*72) + 18)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[57]*kernel.shared_1[((threadIdx.x*72) + 54)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[58]*kernel.shared_1[((threadIdx.x*72) + 19)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[58]*kernel.shared_1[((threadIdx.x*72) + 55)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[59]*kernel.shared_1[((threadIdx.x*72) + 20)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[59]*kernel.shared_1[((threadIdx.x*72) + 56)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[60]*kernel.shared_1[((threadIdx.x*72) + 21)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[60]*kernel.shared_1[((threadIdx.x*72) + 57)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[61]*kernel.shared_1[((threadIdx.x*72) + 22)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[61]*kernel.shared_1[((threadIdx.x*72) + 58)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[62]*kernel.shared_1[((threadIdx.x*72) + 23)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[62]*kernel.shared_1[((threadIdx.x*72) + 59)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[63]*kernel.shared_1[((threadIdx.x*72) + 24)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[63]*kernel.shared_1[((threadIdx.x*72) + 60)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[64]*kernel.shared_1[((threadIdx.x*72) + 25)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[64]*kernel.shared_1[((threadIdx.x*72) + 61)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[65]*kernel.shared_1[((threadIdx.x*72) + 26)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[65]*kernel.shared_1[((threadIdx.x*72) + 62)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[60]*kernel.shared_1[((threadIdx.x*72) + 18)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[60]*kernel.shared_1[((threadIdx.x*72) + 54)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[61]*kernel.shared_1[((threadIdx.x*72) + 19)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[61]*kernel.shared_1[((threadIdx.x*72) + 55)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[62]*kernel.shared_1[((threadIdx.x*72) + 20)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[62]*kernel.shared_1[((threadIdx.x*72) + 56)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[63]*kernel.shared_1[((threadIdx.x*72) + 21)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[63]*kernel.shared_1[((threadIdx.x*72) + 57)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[64]*kernel.shared_1[((threadIdx.x*72) + 22)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[64]*kernel.shared_1[((threadIdx.x*72) + 58)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[65]*kernel.shared_1[((threadIdx.x*72) + 23)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[65]*kernel.shared_1[((threadIdx.x*72) + 59)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[66]*kernel.shared_1[((threadIdx.x*72) + 24)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[66]*kernel.shared_1[((threadIdx.x*72) + 60)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[67]*kernel.shared_1[((threadIdx.x*72) + 25)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[67]*kernel.shared_1[((threadIdx.x*72) + 61)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[68]*kernel.shared_1[((threadIdx.x*72) + 26)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[68]*kernel.shared_1[((threadIdx.x*72) + 62)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[63]*kernel.shared_1[((threadIdx.x*72) + 18)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[63]*kernel.shared_1[((threadIdx.x*72) + 54)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[64]*kernel.shared_1[((threadIdx.x*72) + 19)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[64]*kernel.shared_1[((threadIdx.x*72) + 55)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[65]*kernel.shared_1[((threadIdx.x*72) + 20)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[65]*kernel.shared_1[((threadIdx.x*72) + 56)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[66]*kernel.shared_1[((threadIdx.x*72) + 21)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[66]*kernel.shared_1[((threadIdx.x*72) + 57)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[67]*kernel.shared_1[((threadIdx.x*72) + 22)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[67]*kernel.shared_1[((threadIdx.x*72) + 58)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[68]*kernel.shared_1[((threadIdx.x*72) + 23)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[68]*kernel.shared_1[((threadIdx.x*72) + 59)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[69]*kernel.shared_1[((threadIdx.x*72) + 24)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[69]*kernel.shared_1[((threadIdx.x*72) + 60)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[70]*kernel.shared_1[((threadIdx.x*72) + 25)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[70]*kernel.shared_1[((threadIdx.x*72) + 61)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[71]*kernel.shared_1[((threadIdx.x*72) + 26)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[71]*kernel.shared_1[((threadIdx.x*72) + 62)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[66]*kernel.shared_1[((threadIdx.x*72) + 18)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[66]*kernel.shared_1[((threadIdx.x*72) + 54)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[67]*kernel.shared_1[((threadIdx.x*72) + 19)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[67]*kernel.shared_1[((threadIdx.x*72) + 55)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[68]*kernel.shared_1[((threadIdx.x*72) + 20)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[68]*kernel.shared_1[((threadIdx.x*72) + 56)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[69]*kernel.shared_1[((threadIdx.x*72) + 21)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[69]*kernel.shared_1[((threadIdx.x*72) + 57)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[70]*kernel.shared_1[((threadIdx.x*72) + 22)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[70]*kernel.shared_1[((threadIdx.x*72) + 58)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[71]*kernel.shared_1[((threadIdx.x*72) + 23)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[71]*kernel.shared_1[((threadIdx.x*72) + 59)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[72]*kernel.shared_1[((threadIdx.x*72) + 24)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[72]*kernel.shared_1[((threadIdx.x*72) + 60)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[73]*kernel.shared_1[((threadIdx.x*72) + 25)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[73]*kernel.shared_1[((threadIdx.x*72) + 61)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[74]*kernel.shared_1[((threadIdx.x*72) + 26)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[74]*kernel.shared_1[((threadIdx.x*72) + 62)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[69]*kernel.shared_1[((threadIdx.x*72) + 18)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[69]*kernel.shared_1[((threadIdx.x*72) + 54)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[70]*kernel.shared_1[((threadIdx.x*72) + 19)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[70]*kernel.shared_1[((threadIdx.x*72) + 55)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[71]*kernel.shared_1[((threadIdx.x*72) + 20)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[71]*kernel.shared_1[((threadIdx.x*72) + 56)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[72]*kernel.shared_1[((threadIdx.x*72) + 21)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[72]*kernel.shared_1[((threadIdx.x*72) + 57)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[73]*kernel.shared_1[((threadIdx.x*72) + 22)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[73]*kernel.shared_1[((threadIdx.x*72) + 58)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[74]*kernel.shared_1[((threadIdx.x*72) + 23)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[74]*kernel.shared_1[((threadIdx.x*72) + 59)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[75]*kernel.shared_1[((threadIdx.x*72) + 24)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[75]*kernel.shared_1[((threadIdx.x*72) + 60)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[76]*kernel.shared_1[((threadIdx.x*72) + 25)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[76]*kernel.shared_1[((threadIdx.x*72) + 61)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[77]*kernel.shared_1[((threadIdx.x*72) + 26)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[77]*kernel.shared_1[((threadIdx.x*72) + 62)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[72]*kernel.shared_1[((threadIdx.x*72) + 18)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[72]*kernel.shared_1[((threadIdx.x*72) + 54)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[73]*kernel.shared_1[((threadIdx.x*72) + 19)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[73]*kernel.shared_1[((threadIdx.x*72) + 55)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[74]*kernel.shared_1[((threadIdx.x*72) + 20)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[74]*kernel.shared_1[((threadIdx.x*72) + 56)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[75]*kernel.shared_1[((threadIdx.x*72) + 21)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[75]*kernel.shared_1[((threadIdx.x*72) + 57)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[76]*kernel.shared_1[((threadIdx.x*72) + 22)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[76]*kernel.shared_1[((threadIdx.x*72) + 58)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[77]*kernel.shared_1[((threadIdx.x*72) + 23)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[77]*kernel.shared_1[((threadIdx.x*72) + 59)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[78]*kernel.shared_1[((threadIdx.x*72) + 24)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[78]*kernel.shared_1[((threadIdx.x*72) + 60)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[79]*kernel.shared_1[((threadIdx.x*72) + 25)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[79]*kernel.shared_1[((threadIdx.x*72) + 61)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[80]*kernel.shared_1[((threadIdx.x*72) + 26)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[80]*kernel.shared_1[((threadIdx.x*72) + 62)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[81]*kernel.shared_1[((threadIdx.x*72) + 27)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[81]*kernel.shared_1[((threadIdx.x*72) + 63)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[82]*kernel.shared_1[((threadIdx.x*72) + 28)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[82]*kernel.shared_1[((threadIdx.x*72) + 64)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[83]*kernel.shared_1[((threadIdx.x*72) + 29)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[83]*kernel.shared_1[((threadIdx.x*72) + 65)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[84]*kernel.shared_1[((threadIdx.x*72) + 30)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[84]*kernel.shared_1[((threadIdx.x*72) + 66)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[85]*kernel.shared_1[((threadIdx.x*72) + 31)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[85]*kernel.shared_1[((threadIdx.x*72) + 67)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[86]*kernel.shared_1[((threadIdx.x*72) + 32)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[86]*kernel.shared_1[((threadIdx.x*72) + 68)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[87]*kernel.shared_1[((threadIdx.x*72) + 33)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[87]*kernel.shared_1[((threadIdx.x*72) + 69)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[88]*kernel.shared_1[((threadIdx.x*72) + 34)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[88]*kernel.shared_1[((threadIdx.x*72) + 70)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[89]*kernel.shared_1[((threadIdx.x*72) + 35)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[89]*kernel.shared_1[((threadIdx.x*72) + 71)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[84]*kernel.shared_1[((threadIdx.x*72) + 27)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[84]*kernel.shared_1[((threadIdx.x*72) + 63)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[85]*kernel.shared_1[((threadIdx.x*72) + 28)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[85]*kernel.shared_1[((threadIdx.x*72) + 64)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[86]*kernel.shared_1[((threadIdx.x*72) + 29)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[86]*kernel.shared_1[((threadIdx.x*72) + 65)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[87]*kernel.shared_1[((threadIdx.x*72) + 30)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[87]*kernel.shared_1[((threadIdx.x*72) + 66)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[88]*kernel.shared_1[((threadIdx.x*72) + 31)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[88]*kernel.shared_1[((threadIdx.x*72) + 67)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[89]*kernel.shared_1[((threadIdx.x*72) + 32)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[89]*kernel.shared_1[((threadIdx.x*72) + 68)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[90]*kernel.shared_1[((threadIdx.x*72) + 33)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[90]*kernel.shared_1[((threadIdx.x*72) + 69)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[91]*kernel.shared_1[((threadIdx.x*72) + 34)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[91]*kernel.shared_1[((threadIdx.x*72) + 70)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[92]*kernel.shared_1[((threadIdx.x*72) + 35)]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[92]*kernel.shared_1[((threadIdx.x*72) + 71)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[87]*kernel.shared_1[((threadIdx.x*72) + 27)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[87]*kernel.shared_1[((threadIdx.x*72) + 63)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[88]*kernel.shared_1[((threadIdx.x*72) + 28)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[88]*kernel.shared_1[((threadIdx.x*72) + 64)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[89]*kernel.shared_1[((threadIdx.x*72) + 29)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[89]*kernel.shared_1[((threadIdx.x*72) + 65)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[90]*kernel.shared_1[((threadIdx.x*72) + 30)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[90]*kernel.shared_1[((threadIdx.x*72) + 66)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[91]*kernel.shared_1[((threadIdx.x*72) + 31)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[91]*kernel.shared_1[((threadIdx.x*72) + 67)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[92]*kernel.shared_1[((threadIdx.x*72) + 32)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[92]*kernel.shared_1[((threadIdx.x*72) + 68)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[93]*kernel.shared_1[((threadIdx.x*72) + 33)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[93]*kernel.shared_1[((threadIdx.x*72) + 69)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[94]*kernel.shared_1[((threadIdx.x*72) + 34)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[94]*kernel.shared_1[((threadIdx.x*72) + 70)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[95]*kernel.shared_1[((threadIdx.x*72) + 35)]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[95]*kernel.shared_1[((threadIdx.x*72) + 71)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[90]*kernel.shared_1[((threadIdx.x*72) + 27)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[90]*kernel.shared_1[((threadIdx.x*72) + 63)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[91]*kernel.shared_1[((threadIdx.x*72) + 28)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[91]*kernel.shared_1[((threadIdx.x*72) + 64)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[92]*kernel.shared_1[((threadIdx.x*72) + 29)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[92]*kernel.shared_1[((threadIdx.x*72) + 65)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[93]*kernel.shared_1[((threadIdx.x*72) + 30)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[93]*kernel.shared_1[((threadIdx.x*72) + 66)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[94]*kernel.shared_1[((threadIdx.x*72) + 31)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[94]*kernel.shared_1[((threadIdx.x*72) + 67)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[95]*kernel.shared_1[((threadIdx.x*72) + 32)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[95]*kernel.shared_1[((threadIdx.x*72) + 68)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[96]*kernel.shared_1[((threadIdx.x*72) + 33)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[96]*kernel.shared_1[((threadIdx.x*72) + 69)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[97]*kernel.shared_1[((threadIdx.x*72) + 34)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[97]*kernel.shared_1[((threadIdx.x*72) + 70)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[98]*kernel.shared_1[((threadIdx.x*72) + 35)]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[98]*kernel.shared_1[((threadIdx.x*72) + 71)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[93]*kernel.shared_1[((threadIdx.x*72) + 27)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[93]*kernel.shared_1[((threadIdx.x*72) + 63)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[94]*kernel.shared_1[((threadIdx.x*72) + 28)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[94]*kernel.shared_1[((threadIdx.x*72) + 64)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[95]*kernel.shared_1[((threadIdx.x*72) + 29)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[95]*kernel.shared_1[((threadIdx.x*72) + 65)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[96]*kernel.shared_1[((threadIdx.x*72) + 30)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[96]*kernel.shared_1[((threadIdx.x*72) + 66)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[97]*kernel.shared_1[((threadIdx.x*72) + 31)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[97]*kernel.shared_1[((threadIdx.x*72) + 67)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[98]*kernel.shared_1[((threadIdx.x*72) + 32)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[98]*kernel.shared_1[((threadIdx.x*72) + 68)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[99]*kernel.shared_1[((threadIdx.x*72) + 33)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[99]*kernel.shared_1[((threadIdx.x*72) + 69)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[100]*kernel.shared_1[((threadIdx.x*72) + 34)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[100]*kernel.shared_1[((threadIdx.x*72) + 70)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[101]*kernel.shared_1[((threadIdx.x*72) + 35)]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[101]*kernel.shared_1[((threadIdx.x*72) + 71)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[96]*kernel.shared_1[((threadIdx.x*72) + 27)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[96]*kernel.shared_1[((threadIdx.x*72) + 63)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[97]*kernel.shared_1[((threadIdx.x*72) + 28)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[97]*kernel.shared_1[((threadIdx.x*72) + 64)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[98]*kernel.shared_1[((threadIdx.x*72) + 29)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[98]*kernel.shared_1[((threadIdx.x*72) + 65)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[99]*kernel.shared_1[((threadIdx.x*72) + 30)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[99]*kernel.shared_1[((threadIdx.x*72) + 66)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[100]*kernel.shared_1[((threadIdx.x*72) + 31)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[100]*kernel.shared_1[((threadIdx.x*72) + 67)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[101]*kernel.shared_1[((threadIdx.x*72) + 32)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[101]*kernel.shared_1[((threadIdx.x*72) + 68)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[102]*kernel.shared_1[((threadIdx.x*72) + 33)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[102]*kernel.shared_1[((threadIdx.x*72) + 69)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[103]*kernel.shared_1[((threadIdx.x*72) + 34)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[103]*kernel.shared_1[((threadIdx.x*72) + 70)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[104]*kernel.shared_1[((threadIdx.x*72) + 35)]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[104]*kernel.shared_1[((threadIdx.x*72) + 71)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[99]*kernel.shared_1[((threadIdx.x*72) + 27)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[99]*kernel.shared_1[((threadIdx.x*72) + 63)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[100]*kernel.shared_1[((threadIdx.x*72) + 28)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[100]*kernel.shared_1[((threadIdx.x*72) + 64)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[101]*kernel.shared_1[((threadIdx.x*72) + 29)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[101]*kernel.shared_1[((threadIdx.x*72) + 65)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[102]*kernel.shared_1[((threadIdx.x*72) + 30)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[102]*kernel.shared_1[((threadIdx.x*72) + 66)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[103]*kernel.shared_1[((threadIdx.x*72) + 31)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[103]*kernel.shared_1[((threadIdx.x*72) + 67)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[104]*kernel.shared_1[((threadIdx.x*72) + 32)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[104]*kernel.shared_1[((threadIdx.x*72) + 68)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[105]*kernel.shared_1[((threadIdx.x*72) + 33)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[105]*kernel.shared_1[((threadIdx.x*72) + 69)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[106]*kernel.shared_1[((threadIdx.x*72) + 34)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[106]*kernel.shared_1[((threadIdx.x*72) + 70)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[107]*kernel.shared_1[((threadIdx.x*72) + 35)]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[107]*kernel.shared_1[((threadIdx.x*72) + 71)]))
          }
        }
        for (i1.inner: int32, 0, 2) {
          for (i2.inner: int32, 0, 7) {
            compute[(((((floordiv(blockIdx.x, 7)*12544) + (threadIdx.x*98)) + (i1.inner*49)) + (i2.inner*7)) + floormod(blockIdx.x, 7))] = max((conv2d_nchw_1[((i1.inner*7) + i2.inner)] + bias[(((floordiv(blockIdx.x, 7)*256) + (threadIdx.x*2)) + i1.inner)]), 0f32)
          }
        }
      }
    }





Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.


.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Execution time of this operator: 0.388 ms



Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.


.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=2)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=128)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=1)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=7)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=1)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=4)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=3)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=1)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=3)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=1)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=2)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=128)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=7)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=1)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=1)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=128)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=128)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 512)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(128) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[14];
      __shared__ float pad_temp_shared[108];
      __shared__ float kernel_shared[9216];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[7] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[8] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[9] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      conv2d_nchw[10] = 0.000000e+00f;
      conv2d_nchw[4] = 0.000000e+00f;
      conv2d_nchw[11] = 0.000000e+00f;
      conv2d_nchw[5] = 0.000000e+00f;
      conv2d_nchw[12] = 0.000000e+00f;
      conv2d_nchw[6] = 0.000000e+00f;
      conv2d_nchw[13] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 128; ++rc_outer_outer) {
        __syncthreads();
        if (((int)threadIdx.x) < 108) {
          pad_temp_shared[((int)threadIdx.x)] = (((((3 <= (((int)threadIdx.x) % 27)) && ((((int)threadIdx.x) % 27) < 24)) && (1 <= ((((int)blockIdx.x) % 7) + (((int)threadIdx.x) % 3)))) && (((((int)blockIdx.x) % 7) + (((int)threadIdx.x) % 3)) < 8)) ? data[((((((rc_outer_outer * 196) + ((((int)threadIdx.x) / 27) * 49)) + (((((int)threadIdx.x) % 27) / 3) * 7)) + (((int)blockIdx.x) % 7)) + (((int)threadIdx.x) % 3)) - 8)] : 0.000000e+00f);
        }
        kernel_shared[((int)threadIdx.x)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + ((((int)threadIdx.x) / 36) * 4608)) + (rc_outer_outer * 36)) + (((int)threadIdx.x) % 36))];
        kernel_shared[(((int)threadIdx.x) + 128)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 128) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 20) % 36))];
        kernel_shared[(((int)threadIdx.x) + 256)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 256) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 4) % 36))];
        kernel_shared[(((int)threadIdx.x) + 384)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 384) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 24) % 36))];
        kernel_shared[(((int)threadIdx.x) + 512)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 512) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 8) % 36))];
        kernel_shared[(((int)threadIdx.x) + 640)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 640) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 28) % 36))];
        kernel_shared[(((int)threadIdx.x) + 768)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 768) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 12) % 36))];
        kernel_shared[(((int)threadIdx.x) + 896)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 896) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 32) % 36))];
        kernel_shared[(((int)threadIdx.x) + 1024)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 1024) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 16) % 36))];
        kernel_shared[(((int)threadIdx.x) + 1152)] = kernel[((((((((int)blockIdx.x) / 7) * 1179648) + ((((int)threadIdx.x) / 36) * 4608)) + (rc_outer_outer * 36)) + (((int)threadIdx.x) % 36)) + 147456)];
        kernel_shared[(((int)threadIdx.x) + 1280)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 1280) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 20) % 36))];
        kernel_shared[(((int)threadIdx.x) + 1408)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 1408) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 4) % 36))];
        kernel_shared[(((int)threadIdx.x) + 1536)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 1536) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 24) % 36))];
        kernel_shared[(((int)threadIdx.x) + 1664)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 1664) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 8) % 36))];
        kernel_shared[(((int)threadIdx.x) + 1792)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 1792) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 28) % 36))];
        kernel_shared[(((int)threadIdx.x) + 1920)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 1920) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 12) % 36))];
        kernel_shared[(((int)threadIdx.x) + 2048)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 2048) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 32) % 36))];
        kernel_shared[(((int)threadIdx.x) + 2176)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 2176) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 16) % 36))];
        kernel_shared[(((int)threadIdx.x) + 2304)] = kernel[((((((((int)blockIdx.x) / 7) * 1179648) + ((((int)threadIdx.x) / 36) * 4608)) + (rc_outer_outer * 36)) + (((int)threadIdx.x) % 36)) + 294912)];
        kernel_shared[(((int)threadIdx.x) + 2432)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 2432) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 20) % 36))];
        kernel_shared[(((int)threadIdx.x) + 2560)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 2560) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 4) % 36))];
        kernel_shared[(((int)threadIdx.x) + 2688)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 2688) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 24) % 36))];
        kernel_shared[(((int)threadIdx.x) + 2816)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 2816) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 8) % 36))];
        kernel_shared[(((int)threadIdx.x) + 2944)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 2944) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 28) % 36))];
        kernel_shared[(((int)threadIdx.x) + 3072)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 3072) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 12) % 36))];
        kernel_shared[(((int)threadIdx.x) + 3200)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 3200) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 32) % 36))];
        kernel_shared[(((int)threadIdx.x) + 3328)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 3328) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 16) % 36))];
        kernel_shared[(((int)threadIdx.x) + 3456)] = kernel[((((((((int)blockIdx.x) / 7) * 1179648) + ((((int)threadIdx.x) / 36) * 4608)) + (rc_outer_outer * 36)) + (((int)threadIdx.x) % 36)) + 442368)];
        kernel_shared[(((int)threadIdx.x) + 3584)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 3584) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 20) % 36))];
        kernel_shared[(((int)threadIdx.x) + 3712)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 3712) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 4) % 36))];
        kernel_shared[(((int)threadIdx.x) + 3840)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 3840) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 24) % 36))];
        kernel_shared[(((int)threadIdx.x) + 3968)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 3968) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 8) % 36))];
        kernel_shared[(((int)threadIdx.x) + 4096)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 4096) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 28) % 36))];
        kernel_shared[(((int)threadIdx.x) + 4224)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 4224) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 12) % 36))];
        kernel_shared[(((int)threadIdx.x) + 4352)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 4352) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 32) % 36))];
        kernel_shared[(((int)threadIdx.x) + 4480)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 4480) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 16) % 36))];
        kernel_shared[(((int)threadIdx.x) + 4608)] = kernel[((((((((int)blockIdx.x) / 7) * 1179648) + ((((int)threadIdx.x) / 36) * 4608)) + (rc_outer_outer * 36)) + (((int)threadIdx.x) % 36)) + 589824)];
        kernel_shared[(((int)threadIdx.x) + 4736)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 4736) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 20) % 36))];
        kernel_shared[(((int)threadIdx.x) + 4864)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 4864) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 4) % 36))];
        kernel_shared[(((int)threadIdx.x) + 4992)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 4992) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 24) % 36))];
        kernel_shared[(((int)threadIdx.x) + 5120)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 5120) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 8) % 36))];
        kernel_shared[(((int)threadIdx.x) + 5248)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 5248) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 28) % 36))];
        kernel_shared[(((int)threadIdx.x) + 5376)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 5376) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 12) % 36))];
        kernel_shared[(((int)threadIdx.x) + 5504)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 5504) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 32) % 36))];
        kernel_shared[(((int)threadIdx.x) + 5632)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 5632) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 16) % 36))];
        kernel_shared[(((int)threadIdx.x) + 5760)] = kernel[((((((((int)blockIdx.x) / 7) * 1179648) + ((((int)threadIdx.x) / 36) * 4608)) + (rc_outer_outer * 36)) + (((int)threadIdx.x) % 36)) + 737280)];
        kernel_shared[(((int)threadIdx.x) + 5888)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 5888) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 20) % 36))];
        kernel_shared[(((int)threadIdx.x) + 6016)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 6016) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 4) % 36))];
        kernel_shared[(((int)threadIdx.x) + 6144)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 6144) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 24) % 36))];
        kernel_shared[(((int)threadIdx.x) + 6272)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 6272) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 8) % 36))];
        kernel_shared[(((int)threadIdx.x) + 6400)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 6400) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 28) % 36))];
        kernel_shared[(((int)threadIdx.x) + 6528)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 6528) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 12) % 36))];
        kernel_shared[(((int)threadIdx.x) + 6656)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 6656) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 32) % 36))];
        kernel_shared[(((int)threadIdx.x) + 6784)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 6784) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 16) % 36))];
        kernel_shared[(((int)threadIdx.x) + 6912)] = kernel[((((((((int)blockIdx.x) / 7) * 1179648) + ((((int)threadIdx.x) / 36) * 4608)) + (rc_outer_outer * 36)) + (((int)threadIdx.x) % 36)) + 884736)];
        kernel_shared[(((int)threadIdx.x) + 7040)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 7040) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 20) % 36))];
        kernel_shared[(((int)threadIdx.x) + 7168)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 7168) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 4) % 36))];
        kernel_shared[(((int)threadIdx.x) + 7296)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 7296) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 24) % 36))];
        kernel_shared[(((int)threadIdx.x) + 7424)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 7424) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 8) % 36))];
        kernel_shared[(((int)threadIdx.x) + 7552)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 7552) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 28) % 36))];
        kernel_shared[(((int)threadIdx.x) + 7680)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 7680) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 12) % 36))];
        kernel_shared[(((int)threadIdx.x) + 7808)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 7808) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 32) % 36))];
        kernel_shared[(((int)threadIdx.x) + 7936)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 7936) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 16) % 36))];
        kernel_shared[(((int)threadIdx.x) + 8064)] = kernel[((((((((int)blockIdx.x) / 7) * 1179648) + ((((int)threadIdx.x) / 36) * 4608)) + (rc_outer_outer * 36)) + (((int)threadIdx.x) % 36)) + 1032192)];
        kernel_shared[(((int)threadIdx.x) + 8192)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 8192) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 20) % 36))];
        kernel_shared[(((int)threadIdx.x) + 8320)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 8320) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 4) % 36))];
        kernel_shared[(((int)threadIdx.x) + 8448)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 8448) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 24) % 36))];
        kernel_shared[(((int)threadIdx.x) + 8576)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 8576) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 8) % 36))];
        kernel_shared[(((int)threadIdx.x) + 8704)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 8704) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 28) % 36))];
        kernel_shared[(((int)threadIdx.x) + 8832)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 8832) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 12) % 36))];
        kernel_shared[(((int)threadIdx.x) + 8960)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 8960) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 32) % 36))];
        kernel_shared[(((int)threadIdx.x) + 9088)] = kernel[(((((((int)blockIdx.x) / 7) * 1179648) + (((((int)threadIdx.x) + 9088) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 16) % 36))];
        __syncthreads();
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[0] * kernel_shared[(((int)threadIdx.x) * 72)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[0] * kernel_shared[((((int)threadIdx.x) * 72) + 36)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[1] * kernel_shared[((((int)threadIdx.x) * 72) + 1)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[1] * kernel_shared[((((int)threadIdx.x) * 72) + 37)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[2] * kernel_shared[((((int)threadIdx.x) * 72) + 2)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[2] * kernel_shared[((((int)threadIdx.x) * 72) + 38)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[3] * kernel_shared[((((int)threadIdx.x) * 72) + 3)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[3] * kernel_shared[((((int)threadIdx.x) * 72) + 39)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[4] * kernel_shared[((((int)threadIdx.x) * 72) + 4)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[4] * kernel_shared[((((int)threadIdx.x) * 72) + 40)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[5] * kernel_shared[((((int)threadIdx.x) * 72) + 5)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[5] * kernel_shared[((((int)threadIdx.x) * 72) + 41)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[6] * kernel_shared[((((int)threadIdx.x) * 72) + 6)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[6] * kernel_shared[((((int)threadIdx.x) * 72) + 42)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[7] * kernel_shared[((((int)threadIdx.x) * 72) + 7)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[7] * kernel_shared[((((int)threadIdx.x) * 72) + 43)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[8] * kernel_shared[((((int)threadIdx.x) * 72) + 8)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[8] * kernel_shared[((((int)threadIdx.x) * 72) + 44)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[3] * kernel_shared[(((int)threadIdx.x) * 72)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[3] * kernel_shared[((((int)threadIdx.x) * 72) + 36)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[4] * kernel_shared[((((int)threadIdx.x) * 72) + 1)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[4] * kernel_shared[((((int)threadIdx.x) * 72) + 37)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[5] * kernel_shared[((((int)threadIdx.x) * 72) + 2)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[5] * kernel_shared[((((int)threadIdx.x) * 72) + 38)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[6] * kernel_shared[((((int)threadIdx.x) * 72) + 3)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[6] * kernel_shared[((((int)threadIdx.x) * 72) + 39)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[7] * kernel_shared[((((int)threadIdx.x) * 72) + 4)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[7] * kernel_shared[((((int)threadIdx.x) * 72) + 40)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[8] * kernel_shared[((((int)threadIdx.x) * 72) + 5)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[8] * kernel_shared[((((int)threadIdx.x) * 72) + 41)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[9] * kernel_shared[((((int)threadIdx.x) * 72) + 6)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[9] * kernel_shared[((((int)threadIdx.x) * 72) + 42)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[10] * kernel_shared[((((int)threadIdx.x) * 72) + 7)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[10] * kernel_shared[((((int)threadIdx.x) * 72) + 43)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[11] * kernel_shared[((((int)threadIdx.x) * 72) + 8)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[11] * kernel_shared[((((int)threadIdx.x) * 72) + 44)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[6] * kernel_shared[(((int)threadIdx.x) * 72)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[6] * kernel_shared[((((int)threadIdx.x) * 72) + 36)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[7] * kernel_shared[((((int)threadIdx.x) * 72) + 1)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[7] * kernel_shared[((((int)threadIdx.x) * 72) + 37)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[8] * kernel_shared[((((int)threadIdx.x) * 72) + 2)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[8] * kernel_shared[((((int)threadIdx.x) * 72) + 38)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[9] * kernel_shared[((((int)threadIdx.x) * 72) + 3)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[9] * kernel_shared[((((int)threadIdx.x) * 72) + 39)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[10] * kernel_shared[((((int)threadIdx.x) * 72) + 4)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[10] * kernel_shared[((((int)threadIdx.x) * 72) + 40)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[11] * kernel_shared[((((int)threadIdx.x) * 72) + 5)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[11] * kernel_shared[((((int)threadIdx.x) * 72) + 41)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[12] * kernel_shared[((((int)threadIdx.x) * 72) + 6)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[12] * kernel_shared[((((int)threadIdx.x) * 72) + 42)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[13] * kernel_shared[((((int)threadIdx.x) * 72) + 7)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[13] * kernel_shared[((((int)threadIdx.x) * 72) + 43)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[14] * kernel_shared[((((int)threadIdx.x) * 72) + 8)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[14] * kernel_shared[((((int)threadIdx.x) * 72) + 44)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[9] * kernel_shared[(((int)threadIdx.x) * 72)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[9] * kernel_shared[((((int)threadIdx.x) * 72) + 36)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[10] * kernel_shared[((((int)threadIdx.x) * 72) + 1)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[10] * kernel_shared[((((int)threadIdx.x) * 72) + 37)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[11] * kernel_shared[((((int)threadIdx.x) * 72) + 2)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[11] * kernel_shared[((((int)threadIdx.x) * 72) + 38)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[12] * kernel_shared[((((int)threadIdx.x) * 72) + 3)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[12] * kernel_shared[((((int)threadIdx.x) * 72) + 39)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[13] * kernel_shared[((((int)threadIdx.x) * 72) + 4)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[13] * kernel_shared[((((int)threadIdx.x) * 72) + 40)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[14] * kernel_shared[((((int)threadIdx.x) * 72) + 5)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[14] * kernel_shared[((((int)threadIdx.x) * 72) + 41)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[15] * kernel_shared[((((int)threadIdx.x) * 72) + 6)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[15] * kernel_shared[((((int)threadIdx.x) * 72) + 42)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[16] * kernel_shared[((((int)threadIdx.x) * 72) + 7)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[16] * kernel_shared[((((int)threadIdx.x) * 72) + 43)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[17] * kernel_shared[((((int)threadIdx.x) * 72) + 8)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[17] * kernel_shared[((((int)threadIdx.x) * 72) + 44)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[12] * kernel_shared[(((int)threadIdx.x) * 72)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[12] * kernel_shared[((((int)threadIdx.x) * 72) + 36)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[13] * kernel_shared[((((int)threadIdx.x) * 72) + 1)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[13] * kernel_shared[((((int)threadIdx.x) * 72) + 37)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[14] * kernel_shared[((((int)threadIdx.x) * 72) + 2)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[14] * kernel_shared[((((int)threadIdx.x) * 72) + 38)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[15] * kernel_shared[((((int)threadIdx.x) * 72) + 3)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[15] * kernel_shared[((((int)threadIdx.x) * 72) + 39)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[16] * kernel_shared[((((int)threadIdx.x) * 72) + 4)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[16] * kernel_shared[((((int)threadIdx.x) * 72) + 40)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[17] * kernel_shared[((((int)threadIdx.x) * 72) + 5)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[17] * kernel_shared[((((int)threadIdx.x) * 72) + 41)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[18] * kernel_shared[((((int)threadIdx.x) * 72) + 6)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[18] * kernel_shared[((((int)threadIdx.x) * 72) + 42)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[19] * kernel_shared[((((int)threadIdx.x) * 72) + 7)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[19] * kernel_shared[((((int)threadIdx.x) * 72) + 43)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[20] * kernel_shared[((((int)threadIdx.x) * 72) + 8)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[20] * kernel_shared[((((int)threadIdx.x) * 72) + 44)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[15] * kernel_shared[(((int)threadIdx.x) * 72)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[15] * kernel_shared[((((int)threadIdx.x) * 72) + 36)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[16] * kernel_shared[((((int)threadIdx.x) * 72) + 1)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[16] * kernel_shared[((((int)threadIdx.x) * 72) + 37)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[17] * kernel_shared[((((int)threadIdx.x) * 72) + 2)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[17] * kernel_shared[((((int)threadIdx.x) * 72) + 38)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[18] * kernel_shared[((((int)threadIdx.x) * 72) + 3)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[18] * kernel_shared[((((int)threadIdx.x) * 72) + 39)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[19] * kernel_shared[((((int)threadIdx.x) * 72) + 4)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[19] * kernel_shared[((((int)threadIdx.x) * 72) + 40)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[20] * kernel_shared[((((int)threadIdx.x) * 72) + 5)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[20] * kernel_shared[((((int)threadIdx.x) * 72) + 41)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[21] * kernel_shared[((((int)threadIdx.x) * 72) + 6)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[21] * kernel_shared[((((int)threadIdx.x) * 72) + 42)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[22] * kernel_shared[((((int)threadIdx.x) * 72) + 7)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[22] * kernel_shared[((((int)threadIdx.x) * 72) + 43)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[23] * kernel_shared[((((int)threadIdx.x) * 72) + 8)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[23] * kernel_shared[((((int)threadIdx.x) * 72) + 44)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[18] * kernel_shared[(((int)threadIdx.x) * 72)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[18] * kernel_shared[((((int)threadIdx.x) * 72) + 36)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[19] * kernel_shared[((((int)threadIdx.x) * 72) + 1)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[19] * kernel_shared[((((int)threadIdx.x) * 72) + 37)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[20] * kernel_shared[((((int)threadIdx.x) * 72) + 2)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[20] * kernel_shared[((((int)threadIdx.x) * 72) + 38)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[21] * kernel_shared[((((int)threadIdx.x) * 72) + 3)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[21] * kernel_shared[((((int)threadIdx.x) * 72) + 39)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[22] * kernel_shared[((((int)threadIdx.x) * 72) + 4)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[22] * kernel_shared[((((int)threadIdx.x) * 72) + 40)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[23] * kernel_shared[((((int)threadIdx.x) * 72) + 5)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[23] * kernel_shared[((((int)threadIdx.x) * 72) + 41)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[24] * kernel_shared[((((int)threadIdx.x) * 72) + 6)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[24] * kernel_shared[((((int)threadIdx.x) * 72) + 42)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[25] * kernel_shared[((((int)threadIdx.x) * 72) + 7)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[25] * kernel_shared[((((int)threadIdx.x) * 72) + 43)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[26] * kernel_shared[((((int)threadIdx.x) * 72) + 8)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[26] * kernel_shared[((((int)threadIdx.x) * 72) + 44)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[27] * kernel_shared[((((int)threadIdx.x) * 72) + 9)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[27] * kernel_shared[((((int)threadIdx.x) * 72) + 45)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[28] * kernel_shared[((((int)threadIdx.x) * 72) + 10)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[28] * kernel_shared[((((int)threadIdx.x) * 72) + 46)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[29] * kernel_shared[((((int)threadIdx.x) * 72) + 11)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[29] * kernel_shared[((((int)threadIdx.x) * 72) + 47)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[30] * kernel_shared[((((int)threadIdx.x) * 72) + 12)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[30] * kernel_shared[((((int)threadIdx.x) * 72) + 48)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[31] * kernel_shared[((((int)threadIdx.x) * 72) + 13)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[31] * kernel_shared[((((int)threadIdx.x) * 72) + 49)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[32] * kernel_shared[((((int)threadIdx.x) * 72) + 14)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[32] * kernel_shared[((((int)threadIdx.x) * 72) + 50)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[33] * kernel_shared[((((int)threadIdx.x) * 72) + 15)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[33] * kernel_shared[((((int)threadIdx.x) * 72) + 51)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[34] * kernel_shared[((((int)threadIdx.x) * 72) + 16)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[34] * kernel_shared[((((int)threadIdx.x) * 72) + 52)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[35] * kernel_shared[((((int)threadIdx.x) * 72) + 17)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[35] * kernel_shared[((((int)threadIdx.x) * 72) + 53)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[30] * kernel_shared[((((int)threadIdx.x) * 72) + 9)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[30] * kernel_shared[((((int)threadIdx.x) * 72) + 45)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[31] * kernel_shared[((((int)threadIdx.x) * 72) + 10)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[31] * kernel_shared[((((int)threadIdx.x) * 72) + 46)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[32] * kernel_shared[((((int)threadIdx.x) * 72) + 11)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[32] * kernel_shared[((((int)threadIdx.x) * 72) + 47)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[33] * kernel_shared[((((int)threadIdx.x) * 72) + 12)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[33] * kernel_shared[((((int)threadIdx.x) * 72) + 48)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[34] * kernel_shared[((((int)threadIdx.x) * 72) + 13)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[34] * kernel_shared[((((int)threadIdx.x) * 72) + 49)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[35] * kernel_shared[((((int)threadIdx.x) * 72) + 14)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[35] * kernel_shared[((((int)threadIdx.x) * 72) + 50)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[36] * kernel_shared[((((int)threadIdx.x) * 72) + 15)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[36] * kernel_shared[((((int)threadIdx.x) * 72) + 51)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[37] * kernel_shared[((((int)threadIdx.x) * 72) + 16)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[37] * kernel_shared[((((int)threadIdx.x) * 72) + 52)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[38] * kernel_shared[((((int)threadIdx.x) * 72) + 17)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[38] * kernel_shared[((((int)threadIdx.x) * 72) + 53)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[33] * kernel_shared[((((int)threadIdx.x) * 72) + 9)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[33] * kernel_shared[((((int)threadIdx.x) * 72) + 45)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[34] * kernel_shared[((((int)threadIdx.x) * 72) + 10)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[34] * kernel_shared[((((int)threadIdx.x) * 72) + 46)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[35] * kernel_shared[((((int)threadIdx.x) * 72) + 11)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[35] * kernel_shared[((((int)threadIdx.x) * 72) + 47)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[36] * kernel_shared[((((int)threadIdx.x) * 72) + 12)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[36] * kernel_shared[((((int)threadIdx.x) * 72) + 48)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[37] * kernel_shared[((((int)threadIdx.x) * 72) + 13)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[37] * kernel_shared[((((int)threadIdx.x) * 72) + 49)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[38] * kernel_shared[((((int)threadIdx.x) * 72) + 14)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[38] * kernel_shared[((((int)threadIdx.x) * 72) + 50)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[39] * kernel_shared[((((int)threadIdx.x) * 72) + 15)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[39] * kernel_shared[((((int)threadIdx.x) * 72) + 51)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[40] * kernel_shared[((((int)threadIdx.x) * 72) + 16)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[40] * kernel_shared[((((int)threadIdx.x) * 72) + 52)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[41] * kernel_shared[((((int)threadIdx.x) * 72) + 17)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[41] * kernel_shared[((((int)threadIdx.x) * 72) + 53)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[36] * kernel_shared[((((int)threadIdx.x) * 72) + 9)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[36] * kernel_shared[((((int)threadIdx.x) * 72) + 45)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[37] * kernel_shared[((((int)threadIdx.x) * 72) + 10)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[37] * kernel_shared[((((int)threadIdx.x) * 72) + 46)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[38] * kernel_shared[((((int)threadIdx.x) * 72) + 11)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[38] * kernel_shared[((((int)threadIdx.x) * 72) + 47)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[39] * kernel_shared[((((int)threadIdx.x) * 72) + 12)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[39] * kernel_shared[((((int)threadIdx.x) * 72) + 48)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[40] * kernel_shared[((((int)threadIdx.x) * 72) + 13)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[40] * kernel_shared[((((int)threadIdx.x) * 72) + 49)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[41] * kernel_shared[((((int)threadIdx.x) * 72) + 14)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[41] * kernel_shared[((((int)threadIdx.x) * 72) + 50)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[42] * kernel_shared[((((int)threadIdx.x) * 72) + 15)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[42] * kernel_shared[((((int)threadIdx.x) * 72) + 51)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[43] * kernel_shared[((((int)threadIdx.x) * 72) + 16)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[43] * kernel_shared[((((int)threadIdx.x) * 72) + 52)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[44] * kernel_shared[((((int)threadIdx.x) * 72) + 17)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[44] * kernel_shared[((((int)threadIdx.x) * 72) + 53)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[39] * kernel_shared[((((int)threadIdx.x) * 72) + 9)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[39] * kernel_shared[((((int)threadIdx.x) * 72) + 45)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[40] * kernel_shared[((((int)threadIdx.x) * 72) + 10)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[40] * kernel_shared[((((int)threadIdx.x) * 72) + 46)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[41] * kernel_shared[((((int)threadIdx.x) * 72) + 11)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[41] * kernel_shared[((((int)threadIdx.x) * 72) + 47)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[42] * kernel_shared[((((int)threadIdx.x) * 72) + 12)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[42] * kernel_shared[((((int)threadIdx.x) * 72) + 48)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[43] * kernel_shared[((((int)threadIdx.x) * 72) + 13)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[43] * kernel_shared[((((int)threadIdx.x) * 72) + 49)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[44] * kernel_shared[((((int)threadIdx.x) * 72) + 14)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[44] * kernel_shared[((((int)threadIdx.x) * 72) + 50)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[45] * kernel_shared[((((int)threadIdx.x) * 72) + 15)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[45] * kernel_shared[((((int)threadIdx.x) * 72) + 51)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[46] * kernel_shared[((((int)threadIdx.x) * 72) + 16)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[46] * kernel_shared[((((int)threadIdx.x) * 72) + 52)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[47] * kernel_shared[((((int)threadIdx.x) * 72) + 17)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[47] * kernel_shared[((((int)threadIdx.x) * 72) + 53)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[42] * kernel_shared[((((int)threadIdx.x) * 72) + 9)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[42] * kernel_shared[((((int)threadIdx.x) * 72) + 45)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[43] * kernel_shared[((((int)threadIdx.x) * 72) + 10)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[43] * kernel_shared[((((int)threadIdx.x) * 72) + 46)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[44] * kernel_shared[((((int)threadIdx.x) * 72) + 11)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[44] * kernel_shared[((((int)threadIdx.x) * 72) + 47)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[45] * kernel_shared[((((int)threadIdx.x) * 72) + 12)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[45] * kernel_shared[((((int)threadIdx.x) * 72) + 48)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[46] * kernel_shared[((((int)threadIdx.x) * 72) + 13)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[46] * kernel_shared[((((int)threadIdx.x) * 72) + 49)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[47] * kernel_shared[((((int)threadIdx.x) * 72) + 14)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[47] * kernel_shared[((((int)threadIdx.x) * 72) + 50)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[48] * kernel_shared[((((int)threadIdx.x) * 72) + 15)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[48] * kernel_shared[((((int)threadIdx.x) * 72) + 51)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[49] * kernel_shared[((((int)threadIdx.x) * 72) + 16)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[49] * kernel_shared[((((int)threadIdx.x) * 72) + 52)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[50] * kernel_shared[((((int)threadIdx.x) * 72) + 17)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[50] * kernel_shared[((((int)threadIdx.x) * 72) + 53)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[45] * kernel_shared[((((int)threadIdx.x) * 72) + 9)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[45] * kernel_shared[((((int)threadIdx.x) * 72) + 45)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[46] * kernel_shared[((((int)threadIdx.x) * 72) + 10)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[46] * kernel_shared[((((int)threadIdx.x) * 72) + 46)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[47] * kernel_shared[((((int)threadIdx.x) * 72) + 11)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[47] * kernel_shared[((((int)threadIdx.x) * 72) + 47)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[48] * kernel_shared[((((int)threadIdx.x) * 72) + 12)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[48] * kernel_shared[((((int)threadIdx.x) * 72) + 48)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[49] * kernel_shared[((((int)threadIdx.x) * 72) + 13)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[49] * kernel_shared[((((int)threadIdx.x) * 72) + 49)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[50] * kernel_shared[((((int)threadIdx.x) * 72) + 14)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[50] * kernel_shared[((((int)threadIdx.x) * 72) + 50)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[51] * kernel_shared[((((int)threadIdx.x) * 72) + 15)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[51] * kernel_shared[((((int)threadIdx.x) * 72) + 51)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[52] * kernel_shared[((((int)threadIdx.x) * 72) + 16)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[52] * kernel_shared[((((int)threadIdx.x) * 72) + 52)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[53] * kernel_shared[((((int)threadIdx.x) * 72) + 17)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[53] * kernel_shared[((((int)threadIdx.x) * 72) + 53)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[54] * kernel_shared[((((int)threadIdx.x) * 72) + 18)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[54] * kernel_shared[((((int)threadIdx.x) * 72) + 54)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[55] * kernel_shared[((((int)threadIdx.x) * 72) + 19)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[55] * kernel_shared[((((int)threadIdx.x) * 72) + 55)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[56] * kernel_shared[((((int)threadIdx.x) * 72) + 20)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[56] * kernel_shared[((((int)threadIdx.x) * 72) + 56)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[57] * kernel_shared[((((int)threadIdx.x) * 72) + 21)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[57] * kernel_shared[((((int)threadIdx.x) * 72) + 57)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[58] * kernel_shared[((((int)threadIdx.x) * 72) + 22)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[58] * kernel_shared[((((int)threadIdx.x) * 72) + 58)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[59] * kernel_shared[((((int)threadIdx.x) * 72) + 23)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[59] * kernel_shared[((((int)threadIdx.x) * 72) + 59)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[60] * kernel_shared[((((int)threadIdx.x) * 72) + 24)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[60] * kernel_shared[((((int)threadIdx.x) * 72) + 60)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[61] * kernel_shared[((((int)threadIdx.x) * 72) + 25)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[61] * kernel_shared[((((int)threadIdx.x) * 72) + 61)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[62] * kernel_shared[((((int)threadIdx.x) * 72) + 26)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[62] * kernel_shared[((((int)threadIdx.x) * 72) + 62)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[57] * kernel_shared[((((int)threadIdx.x) * 72) + 18)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[57] * kernel_shared[((((int)threadIdx.x) * 72) + 54)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[58] * kernel_shared[((((int)threadIdx.x) * 72) + 19)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[58] * kernel_shared[((((int)threadIdx.x) * 72) + 55)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[59] * kernel_shared[((((int)threadIdx.x) * 72) + 20)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[59] * kernel_shared[((((int)threadIdx.x) * 72) + 56)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[60] * kernel_shared[((((int)threadIdx.x) * 72) + 21)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[60] * kernel_shared[((((int)threadIdx.x) * 72) + 57)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[61] * kernel_shared[((((int)threadIdx.x) * 72) + 22)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[61] * kernel_shared[((((int)threadIdx.x) * 72) + 58)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[62] * kernel_shared[((((int)threadIdx.x) * 72) + 23)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[62] * kernel_shared[((((int)threadIdx.x) * 72) + 59)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[63] * kernel_shared[((((int)threadIdx.x) * 72) + 24)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[63] * kernel_shared[((((int)threadIdx.x) * 72) + 60)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[64] * kernel_shared[((((int)threadIdx.x) * 72) + 25)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[64] * kernel_shared[((((int)threadIdx.x) * 72) + 61)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[65] * kernel_shared[((((int)threadIdx.x) * 72) + 26)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[65] * kernel_shared[((((int)threadIdx.x) * 72) + 62)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[60] * kernel_shared[((((int)threadIdx.x) * 72) + 18)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[60] * kernel_shared[((((int)threadIdx.x) * 72) + 54)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[61] * kernel_shared[((((int)threadIdx.x) * 72) + 19)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[61] * kernel_shared[((((int)threadIdx.x) * 72) + 55)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[62] * kernel_shared[((((int)threadIdx.x) * 72) + 20)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[62] * kernel_shared[((((int)threadIdx.x) * 72) + 56)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[63] * kernel_shared[((((int)threadIdx.x) * 72) + 21)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[63] * kernel_shared[((((int)threadIdx.x) * 72) + 57)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[64] * kernel_shared[((((int)threadIdx.x) * 72) + 22)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[64] * kernel_shared[((((int)threadIdx.x) * 72) + 58)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[65] * kernel_shared[((((int)threadIdx.x) * 72) + 23)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[65] * kernel_shared[((((int)threadIdx.x) * 72) + 59)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[66] * kernel_shared[((((int)threadIdx.x) * 72) + 24)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[66] * kernel_shared[((((int)threadIdx.x) * 72) + 60)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[67] * kernel_shared[((((int)threadIdx.x) * 72) + 25)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[67] * kernel_shared[((((int)threadIdx.x) * 72) + 61)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[68] * kernel_shared[((((int)threadIdx.x) * 72) + 26)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[68] * kernel_shared[((((int)threadIdx.x) * 72) + 62)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[63] * kernel_shared[((((int)threadIdx.x) * 72) + 18)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[63] * kernel_shared[((((int)threadIdx.x) * 72) + 54)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[64] * kernel_shared[((((int)threadIdx.x) * 72) + 19)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[64] * kernel_shared[((((int)threadIdx.x) * 72) + 55)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[65] * kernel_shared[((((int)threadIdx.x) * 72) + 20)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[65] * kernel_shared[((((int)threadIdx.x) * 72) + 56)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[66] * kernel_shared[((((int)threadIdx.x) * 72) + 21)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[66] * kernel_shared[((((int)threadIdx.x) * 72) + 57)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[67] * kernel_shared[((((int)threadIdx.x) * 72) + 22)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[67] * kernel_shared[((((int)threadIdx.x) * 72) + 58)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[68] * kernel_shared[((((int)threadIdx.x) * 72) + 23)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[68] * kernel_shared[((((int)threadIdx.x) * 72) + 59)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[69] * kernel_shared[((((int)threadIdx.x) * 72) + 24)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[69] * kernel_shared[((((int)threadIdx.x) * 72) + 60)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[70] * kernel_shared[((((int)threadIdx.x) * 72) + 25)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[70] * kernel_shared[((((int)threadIdx.x) * 72) + 61)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[71] * kernel_shared[((((int)threadIdx.x) * 72) + 26)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[71] * kernel_shared[((((int)threadIdx.x) * 72) + 62)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[66] * kernel_shared[((((int)threadIdx.x) * 72) + 18)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[66] * kernel_shared[((((int)threadIdx.x) * 72) + 54)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[67] * kernel_shared[((((int)threadIdx.x) * 72) + 19)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[67] * kernel_shared[((((int)threadIdx.x) * 72) + 55)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[68] * kernel_shared[((((int)threadIdx.x) * 72) + 20)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[68] * kernel_shared[((((int)threadIdx.x) * 72) + 56)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[69] * kernel_shared[((((int)threadIdx.x) * 72) + 21)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[69] * kernel_shared[((((int)threadIdx.x) * 72) + 57)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[70] * kernel_shared[((((int)threadIdx.x) * 72) + 22)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[70] * kernel_shared[((((int)threadIdx.x) * 72) + 58)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[71] * kernel_shared[((((int)threadIdx.x) * 72) + 23)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[71] * kernel_shared[((((int)threadIdx.x) * 72) + 59)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[72] * kernel_shared[((((int)threadIdx.x) * 72) + 24)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[72] * kernel_shared[((((int)threadIdx.x) * 72) + 60)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[73] * kernel_shared[((((int)threadIdx.x) * 72) + 25)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[73] * kernel_shared[((((int)threadIdx.x) * 72) + 61)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[74] * kernel_shared[((((int)threadIdx.x) * 72) + 26)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[74] * kernel_shared[((((int)threadIdx.x) * 72) + 62)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[69] * kernel_shared[((((int)threadIdx.x) * 72) + 18)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[69] * kernel_shared[((((int)threadIdx.x) * 72) + 54)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[70] * kernel_shared[((((int)threadIdx.x) * 72) + 19)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[70] * kernel_shared[((((int)threadIdx.x) * 72) + 55)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[71] * kernel_shared[((((int)threadIdx.x) * 72) + 20)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[71] * kernel_shared[((((int)threadIdx.x) * 72) + 56)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[72] * kernel_shared[((((int)threadIdx.x) * 72) + 21)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[72] * kernel_shared[((((int)threadIdx.x) * 72) + 57)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[73] * kernel_shared[((((int)threadIdx.x) * 72) + 22)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[73] * kernel_shared[((((int)threadIdx.x) * 72) + 58)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[74] * kernel_shared[((((int)threadIdx.x) * 72) + 23)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[74] * kernel_shared[((((int)threadIdx.x) * 72) + 59)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[75] * kernel_shared[((((int)threadIdx.x) * 72) + 24)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[75] * kernel_shared[((((int)threadIdx.x) * 72) + 60)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[76] * kernel_shared[((((int)threadIdx.x) * 72) + 25)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[76] * kernel_shared[((((int)threadIdx.x) * 72) + 61)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[77] * kernel_shared[((((int)threadIdx.x) * 72) + 26)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[77] * kernel_shared[((((int)threadIdx.x) * 72) + 62)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[72] * kernel_shared[((((int)threadIdx.x) * 72) + 18)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[72] * kernel_shared[((((int)threadIdx.x) * 72) + 54)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[73] * kernel_shared[((((int)threadIdx.x) * 72) + 19)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[73] * kernel_shared[((((int)threadIdx.x) * 72) + 55)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[74] * kernel_shared[((((int)threadIdx.x) * 72) + 20)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[74] * kernel_shared[((((int)threadIdx.x) * 72) + 56)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[75] * kernel_shared[((((int)threadIdx.x) * 72) + 21)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[75] * kernel_shared[((((int)threadIdx.x) * 72) + 57)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[76] * kernel_shared[((((int)threadIdx.x) * 72) + 22)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[76] * kernel_shared[((((int)threadIdx.x) * 72) + 58)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[77] * kernel_shared[((((int)threadIdx.x) * 72) + 23)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[77] * kernel_shared[((((int)threadIdx.x) * 72) + 59)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[78] * kernel_shared[((((int)threadIdx.x) * 72) + 24)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[78] * kernel_shared[((((int)threadIdx.x) * 72) + 60)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[79] * kernel_shared[((((int)threadIdx.x) * 72) + 25)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[79] * kernel_shared[((((int)threadIdx.x) * 72) + 61)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[80] * kernel_shared[((((int)threadIdx.x) * 72) + 26)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[80] * kernel_shared[((((int)threadIdx.x) * 72) + 62)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[81] * kernel_shared[((((int)threadIdx.x) * 72) + 27)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[81] * kernel_shared[((((int)threadIdx.x) * 72) + 63)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[82] * kernel_shared[((((int)threadIdx.x) * 72) + 28)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[82] * kernel_shared[((((int)threadIdx.x) * 72) + 64)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[83] * kernel_shared[((((int)threadIdx.x) * 72) + 29)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[83] * kernel_shared[((((int)threadIdx.x) * 72) + 65)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[84] * kernel_shared[((((int)threadIdx.x) * 72) + 30)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[84] * kernel_shared[((((int)threadIdx.x) * 72) + 66)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[85] * kernel_shared[((((int)threadIdx.x) * 72) + 31)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[85] * kernel_shared[((((int)threadIdx.x) * 72) + 67)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[86] * kernel_shared[((((int)threadIdx.x) * 72) + 32)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[86] * kernel_shared[((((int)threadIdx.x) * 72) + 68)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[87] * kernel_shared[((((int)threadIdx.x) * 72) + 33)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[87] * kernel_shared[((((int)threadIdx.x) * 72) + 69)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[88] * kernel_shared[((((int)threadIdx.x) * 72) + 34)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[88] * kernel_shared[((((int)threadIdx.x) * 72) + 70)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[89] * kernel_shared[((((int)threadIdx.x) * 72) + 35)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[89] * kernel_shared[((((int)threadIdx.x) * 72) + 71)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[84] * kernel_shared[((((int)threadIdx.x) * 72) + 27)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[84] * kernel_shared[((((int)threadIdx.x) * 72) + 63)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[85] * kernel_shared[((((int)threadIdx.x) * 72) + 28)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[85] * kernel_shared[((((int)threadIdx.x) * 72) + 64)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[86] * kernel_shared[((((int)threadIdx.x) * 72) + 29)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[86] * kernel_shared[((((int)threadIdx.x) * 72) + 65)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[87] * kernel_shared[((((int)threadIdx.x) * 72) + 30)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[87] * kernel_shared[((((int)threadIdx.x) * 72) + 66)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[88] * kernel_shared[((((int)threadIdx.x) * 72) + 31)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[88] * kernel_shared[((((int)threadIdx.x) * 72) + 67)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[89] * kernel_shared[((((int)threadIdx.x) * 72) + 32)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[89] * kernel_shared[((((int)threadIdx.x) * 72) + 68)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[90] * kernel_shared[((((int)threadIdx.x) * 72) + 33)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[90] * kernel_shared[((((int)threadIdx.x) * 72) + 69)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[91] * kernel_shared[((((int)threadIdx.x) * 72) + 34)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[91] * kernel_shared[((((int)threadIdx.x) * 72) + 70)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[92] * kernel_shared[((((int)threadIdx.x) * 72) + 35)]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[92] * kernel_shared[((((int)threadIdx.x) * 72) + 71)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[87] * kernel_shared[((((int)threadIdx.x) * 72) + 27)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[87] * kernel_shared[((((int)threadIdx.x) * 72) + 63)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[88] * kernel_shared[((((int)threadIdx.x) * 72) + 28)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[88] * kernel_shared[((((int)threadIdx.x) * 72) + 64)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[89] * kernel_shared[((((int)threadIdx.x) * 72) + 29)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[89] * kernel_shared[((((int)threadIdx.x) * 72) + 65)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[90] * kernel_shared[((((int)threadIdx.x) * 72) + 30)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[90] * kernel_shared[((((int)threadIdx.x) * 72) + 66)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[91] * kernel_shared[((((int)threadIdx.x) * 72) + 31)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[91] * kernel_shared[((((int)threadIdx.x) * 72) + 67)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[92] * kernel_shared[((((int)threadIdx.x) * 72) + 32)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[92] * kernel_shared[((((int)threadIdx.x) * 72) + 68)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[93] * kernel_shared[((((int)threadIdx.x) * 72) + 33)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[93] * kernel_shared[((((int)threadIdx.x) * 72) + 69)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[94] * kernel_shared[((((int)threadIdx.x) * 72) + 34)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[94] * kernel_shared[((((int)threadIdx.x) * 72) + 70)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[95] * kernel_shared[((((int)threadIdx.x) * 72) + 35)]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[95] * kernel_shared[((((int)threadIdx.x) * 72) + 71)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[90] * kernel_shared[((((int)threadIdx.x) * 72) + 27)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[90] * kernel_shared[((((int)threadIdx.x) * 72) + 63)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[91] * kernel_shared[((((int)threadIdx.x) * 72) + 28)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[91] * kernel_shared[((((int)threadIdx.x) * 72) + 64)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[92] * kernel_shared[((((int)threadIdx.x) * 72) + 29)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[92] * kernel_shared[((((int)threadIdx.x) * 72) + 65)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[93] * kernel_shared[((((int)threadIdx.x) * 72) + 30)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[93] * kernel_shared[((((int)threadIdx.x) * 72) + 66)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[94] * kernel_shared[((((int)threadIdx.x) * 72) + 31)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[94] * kernel_shared[((((int)threadIdx.x) * 72) + 67)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[95] * kernel_shared[((((int)threadIdx.x) * 72) + 32)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[95] * kernel_shared[((((int)threadIdx.x) * 72) + 68)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[96] * kernel_shared[((((int)threadIdx.x) * 72) + 33)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[96] * kernel_shared[((((int)threadIdx.x) * 72) + 69)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[97] * kernel_shared[((((int)threadIdx.x) * 72) + 34)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[97] * kernel_shared[((((int)threadIdx.x) * 72) + 70)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[98] * kernel_shared[((((int)threadIdx.x) * 72) + 35)]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[98] * kernel_shared[((((int)threadIdx.x) * 72) + 71)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[93] * kernel_shared[((((int)threadIdx.x) * 72) + 27)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[93] * kernel_shared[((((int)threadIdx.x) * 72) + 63)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[94] * kernel_shared[((((int)threadIdx.x) * 72) + 28)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[94] * kernel_shared[((((int)threadIdx.x) * 72) + 64)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[95] * kernel_shared[((((int)threadIdx.x) * 72) + 29)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[95] * kernel_shared[((((int)threadIdx.x) * 72) + 65)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[96] * kernel_shared[((((int)threadIdx.x) * 72) + 30)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[96] * kernel_shared[((((int)threadIdx.x) * 72) + 66)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[97] * kernel_shared[((((int)threadIdx.x) * 72) + 31)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[97] * kernel_shared[((((int)threadIdx.x) * 72) + 67)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[98] * kernel_shared[((((int)threadIdx.x) * 72) + 32)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[98] * kernel_shared[((((int)threadIdx.x) * 72) + 68)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[99] * kernel_shared[((((int)threadIdx.x) * 72) + 33)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[99] * kernel_shared[((((int)threadIdx.x) * 72) + 69)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[100] * kernel_shared[((((int)threadIdx.x) * 72) + 34)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[100] * kernel_shared[((((int)threadIdx.x) * 72) + 70)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[101] * kernel_shared[((((int)threadIdx.x) * 72) + 35)]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[101] * kernel_shared[((((int)threadIdx.x) * 72) + 71)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[96] * kernel_shared[((((int)threadIdx.x) * 72) + 27)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[96] * kernel_shared[((((int)threadIdx.x) * 72) + 63)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[97] * kernel_shared[((((int)threadIdx.x) * 72) + 28)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[97] * kernel_shared[((((int)threadIdx.x) * 72) + 64)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[98] * kernel_shared[((((int)threadIdx.x) * 72) + 29)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[98] * kernel_shared[((((int)threadIdx.x) * 72) + 65)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[99] * kernel_shared[((((int)threadIdx.x) * 72) + 30)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[99] * kernel_shared[((((int)threadIdx.x) * 72) + 66)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[100] * kernel_shared[((((int)threadIdx.x) * 72) + 31)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[100] * kernel_shared[((((int)threadIdx.x) * 72) + 67)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[101] * kernel_shared[((((int)threadIdx.x) * 72) + 32)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[101] * kernel_shared[((((int)threadIdx.x) * 72) + 68)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[102] * kernel_shared[((((int)threadIdx.x) * 72) + 33)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[102] * kernel_shared[((((int)threadIdx.x) * 72) + 69)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[103] * kernel_shared[((((int)threadIdx.x) * 72) + 34)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[103] * kernel_shared[((((int)threadIdx.x) * 72) + 70)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[104] * kernel_shared[((((int)threadIdx.x) * 72) + 35)]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[104] * kernel_shared[((((int)threadIdx.x) * 72) + 71)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[99] * kernel_shared[((((int)threadIdx.x) * 72) + 27)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[99] * kernel_shared[((((int)threadIdx.x) * 72) + 63)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[100] * kernel_shared[((((int)threadIdx.x) * 72) + 28)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[100] * kernel_shared[((((int)threadIdx.x) * 72) + 64)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[101] * kernel_shared[((((int)threadIdx.x) * 72) + 29)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[101] * kernel_shared[((((int)threadIdx.x) * 72) + 65)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[102] * kernel_shared[((((int)threadIdx.x) * 72) + 30)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[102] * kernel_shared[((((int)threadIdx.x) * 72) + 66)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[103] * kernel_shared[((((int)threadIdx.x) * 72) + 31)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[103] * kernel_shared[((((int)threadIdx.x) * 72) + 67)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[104] * kernel_shared[((((int)threadIdx.x) * 72) + 32)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[104] * kernel_shared[((((int)threadIdx.x) * 72) + 68)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[105] * kernel_shared[((((int)threadIdx.x) * 72) + 33)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[105] * kernel_shared[((((int)threadIdx.x) * 72) + 69)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[106] * kernel_shared[((((int)threadIdx.x) * 72) + 34)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[106] * kernel_shared[((((int)threadIdx.x) * 72) + 70)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[107] * kernel_shared[((((int)threadIdx.x) * 72) + 35)]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[107] * kernel_shared[((((int)threadIdx.x) * 72) + 71)]));
      }
      for (int i1_inner = 0; i1_inner < 2; ++i1_inner) {
        for (int i2_inner = 0; i2_inner < 7; ++i2_inner) {
          compute[((((((((int)blockIdx.x) / 7) * 12544) + (((int)threadIdx.x) * 98)) + (i1_inner * 49)) + (i2_inner * 7)) + (((int)blockIdx.x) % 7))] = max((conv2d_nchw[((i1_inner * 7) + i2_inner)] + bias[((((((int)blockIdx.x) / 7) * 256) + (((int)threadIdx.x) * 2)) + i1_inner)]), 0.000000e+00f);
        }
      }
    }





A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.


.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Resume search:
    /usr/local/lib/python3.6/dist-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  21.728 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
