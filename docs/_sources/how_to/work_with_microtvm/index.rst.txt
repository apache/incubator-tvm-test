:orphan:

.. _tutorial-micro:

Work With microTVM
------------------
microTVM enables inference on bare-metal platforms, for example, those without
a traditional Operating System such as Linux, OS X, or Windows. These how-tos
demonstrate how to tune and deploy models with microTVM.



.. raw:: html

    <div class="sphx-glr-thumbnails">

.. thumbnail-parent-div-open

.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="This tutorial explains how to compile a tiny model for a micro device, build a program on Zephyr platform to execute this model, flash the program and run the model all using tvmc micro command. You need to install python and Zephyr dependencies before processing with this tutorial.">

.. only:: html

  .. image:: /how_to/work_with_microtvm/images/thumb/sphx_glr_micro_tvmc_thumb.png
    :alt:

  :ref:`sphx_glr_how_to_work_with_microtvm_micro_tvmc.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">1. microTVM CLI Tool</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="This tutorial is an introduction to working with microTVM and a TFLite model with Relay.">

.. only:: html

  .. image:: /how_to/work_with_microtvm/images/thumb/sphx_glr_micro_tflite_thumb.png
    :alt:

  :ref:`sphx_glr_how_to_work_with_microtvm_micro_tflite.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">2. microTVM TFLite Tutorial</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="This tutorial is showcasing microTVM host-driven AoT compilation with a TFLite model. AoTExecutor reduces the overhead of parsing graph at runtime compared to GraphExecutor. Also, we can have better memory management using ahead of time compilation. This tutorial can be executed on a x86 CPU using C runtime (CRT) or on Zephyr platform on a microcontroller/board supported by Zephyr.">

.. only:: html

  .. image:: /how_to/work_with_microtvm/images/thumb/sphx_glr_micro_aot_thumb.png
    :alt:

  :ref:`sphx_glr_how_to_work_with_microtvm_micro_aot.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">3. microTVM Ahead-of-Time (AOT) Compilation</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="This tutorial is showcasing microTVM host-driven AoT compilation with a PyTorch model. This tutorial can be executed on a x86 CPU using C runtime (CRT).">

.. only:: html

  .. image:: /how_to/work_with_microtvm/images/thumb/sphx_glr_micro_pytorch_thumb.png
    :alt:

  :ref:`sphx_glr_how_to_work_with_microtvm_micro_pytorch.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">4. microTVM PyTorch Tutorial</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="This tutorial shows how MobileNetV1 models can be trained to fit on embedded devices, and how those models can be deployed to Arduino using TVM.">

.. only:: html

  .. image:: /how_to/work_with_microtvm/images/thumb/sphx_glr_micro_train_thumb.png
    :alt:

  :ref:`sphx_glr_how_to_work_with_microtvm_micro_train.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">5. Training Vision Models for microTVM on Arduino</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="This tutorial explains how to autotune a model using the C runtime.">

.. only:: html

  .. image:: /how_to/work_with_microtvm/images/thumb/sphx_glr_micro_autotune_thumb.png
    :alt:

  :ref:`sphx_glr_how_to_work_with_microtvm_micro_autotune.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">6. Model Tuning with microTVM</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="This section contains an example of how to use TVM to run a model on an Arm(R) Cortex(R)-M55 CPU and Ethos(TM)-U55 NPU with CMSIS-NN, using bare metal. The Cortex(R)-M55 is a small, low-power CPU designed for use in embedded devices. CMSIS-NN is a collection of kernels optimized for Arm(R) Cortex(R)-M CPUs. The Ethos(TM)-U55 is a microNPU, specifically designed to accelerate ML inference in resource-constrained embedded devices.">

.. only:: html

  .. image:: /how_to/work_with_microtvm/images/thumb/sphx_glr_micro_ethosu_thumb.png
    :alt:

  :ref:`sphx_glr_how_to_work_with_microtvm_micro_ethosu.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">7. Running TVM on bare metal Arm(R) Cortex(R)-M55 CPU and Ethos(TM)-U55 NPU with CMSIS-NN</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="This tutorial is showcasing building an MLPerfTiny submission using microTVM. This tutorial shows the steps to import a TFLite model from MLPerfTiny benchmark models, compile it with TVM and generate a Zephyr project which can be flashed to a Zephyr supported board to benchmark the model using EEMBC runner.">

.. only:: html

  .. image:: /how_to/work_with_microtvm/images/thumb/sphx_glr_micro_mlperftiny_thumb.png
    :alt:

  :ref:`sphx_glr_how_to_work_with_microtvm_micro_mlperftiny.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">8. Creating Your MLPerfTiny Submission with microTVM</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="This tutorial describes the steps required to integrate a model compiled with microTVM into a custom development environment. We use STM32CubeIDE, as the target IDE in this tutorial, but we do not rely on any specific feature of this IDE and integrating microTVM in other IDEs would be similar. We also use the Visual Wake Word (VWW) model from MLPerf Tiny and the nucleo_l4r5zi board here, but the same steps can be used for any other model or target MCU. If you want to use another target MCU with the vww model, we recommend a cortex-M4 or cortex-M7 device with ~512 KB and ~256 KB of Flash and RAM respectively.">

.. only:: html

  .. image:: /how_to/work_with_microtvm/images/thumb/sphx_glr_micro_custom_ide_thumb.png
    :alt:

  :ref:`sphx_glr_how_to_work_with_microtvm_micro_custom_ide.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">9. Bring microTVM to your own development environment</div>
    </div>


.. thumbnail-parent-div-close

.. raw:: html

    </div>


.. toctree::
   :hidden:

   /how_to/work_with_microtvm/micro_tvmc
   /how_to/work_with_microtvm/micro_tflite
   /how_to/work_with_microtvm/micro_aot
   /how_to/work_with_microtvm/micro_pytorch
   /how_to/work_with_microtvm/micro_train
   /how_to/work_with_microtvm/micro_autotune
   /how_to/work_with_microtvm/micro_ethosu
   /how_to/work_with_microtvm/micro_mlperftiny
   /how_to/work_with_microtvm/micro_custom_ide



.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
