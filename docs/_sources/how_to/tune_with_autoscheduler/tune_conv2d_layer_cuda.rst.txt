
.. DO NOT EDIT. THIS FILE WAS AUTOMATICALLY GENERATED BY
.. TVM'S MONKEY-PATCHED VERSION OF SPHINX-GALLERY. TO MAKE
.. CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.py"

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        This tutorial can be used interactively with Google Colab! You can also click
        :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>` to run the Jupyter notebook locally.

        .. image:: https://raw.githubusercontent.com/tlc-pack/web-data/main/images/utilities/colab_button.svg
            :align: center
            :target: https://colab.research.google.com/github/apache/tvm-site/blob/asf-site/docs/_downloads/5f1f7bd7d90710fd404f7bcdc4965622/tune_conv2d_layer_cuda.ipynb
            :width: 300px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.

.. GENERATED FROM PYTHON SOURCE LINES 39-47

.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python








.. GENERATED FROM PYTHON SOURCE LINES 51-56

Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.

.. GENERATED FROM PYTHON SOURCE LINES 56-68

.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]









.. GENERATED FROM PYTHON SOURCE LINES 69-72

Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.

.. GENERATED FROM PYTHON SOURCE LINES 72-85

.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)





.. GENERATED FROM PYTHON SOURCE LINES 86-103

Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the main process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.

.. GENERATED FROM PYTHON SOURCE LINES 103-113

.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Get devices for measurement successfully!




.. GENERATED FROM PYTHON SOURCE LINES 114-120

Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.

.. GENERATED FROM PYTHON SOURCE LINES 120-129

.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx








.. GENERATED FROM PYTHON SOURCE LINES 130-133

We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.

.. GENERATED FROM PYTHON SOURCE LINES 133-137

.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Lowered TIR:
    # from tvm.script import ir as I
    # from tvm.script import tir as T

    @I.ir_module
    class Module:
        @T.prim_func
        def main(data: T.Buffer((1, 512, 7, 7), "float32"), kernel: T.Buffer((512, 512, 3, 3), "float32"), bias: T.Buffer((1, 512, 1, 1), "float32"), compute: T.Buffer((1, 512, 7, 7), "float32")):
            T.func_attr({"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True})
            blockIdx_x = T.env_thread("blockIdx.x")
            T.launch_thread(blockIdx_x, 224)
            conv2d_nchw = T.allocate([2], "float32", "local")
            pad_temp_shared = T.allocate([432], "float32", "shared")
            kernel_shared = T.allocate([2304], "float32", "shared")
            threadIdx_x = T.env_thread("threadIdx.x")
            T.launch_thread(threadIdx_x, 56)
            conv2d_nchw_1 = T.Buffer((1,), data=conv2d_nchw, scope="local", align=4)
            conv2d_nchw_1[0] = T.float32(0)
            conv2d_nchw_1[1] = T.float32(0)
            for rc_outer_outer in range(32):
                cse_var_2: T.int32 = rc_outer_outer * 784
                cse_var_1: T.int32 = rc_outer_outer * 144
                threadIdx_x_1 = T.env_thread("threadIdx.x")
                pad_temp_shared_1 = T.Buffer((432,), data=pad_temp_shared, scope="shared")
                data_1 = T.Buffer((25088,), data=data.data)
                with T.launch_thread(threadIdx_x_1, 56):
                    pad_temp_shared_1[threadIdx_x_1] = T.if_then_else(3 <= threadIdx_x_1 % 27 and threadIdx_x_1 % 27 < 24 and 1 <= blockIdx_x % 7 + threadIdx_x_1 % 3 and blockIdx_x % 7 + threadIdx_x_1 % 3 < 8, data_1[cse_var_2 + threadIdx_x_1 // 27 * 49 + threadIdx_x_1 % 27 // 3 * 7 + blockIdx_x % 7 + threadIdx_x_1 % 3 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 56):
                    pad_temp_shared_1[threadIdx_x_1 + 56] = T.if_then_else(3 <= (threadIdx_x_1 + 2) % 27 and (threadIdx_x_1 + 2) % 27 < 24 and 1 <= blockIdx_x % 7 + (threadIdx_x_1 + 2) % 3 and blockIdx_x % 7 + (threadIdx_x_1 + 2) % 3 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 56) // 27 * 49 + (threadIdx_x_1 + 2) % 27 // 3 * 7 + blockIdx_x % 7 + (threadIdx_x_1 + 2) % 3 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 56):
                    pad_temp_shared_1[threadIdx_x_1 + 112] = T.if_then_else(3 <= (threadIdx_x_1 + 4) % 27 and (threadIdx_x_1 + 4) % 27 < 24 and 1 <= blockIdx_x % 7 + (threadIdx_x_1 + 1) % 3 and blockIdx_x % 7 + (threadIdx_x_1 + 1) % 3 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 112) // 27 * 49 + (threadIdx_x_1 + 4) % 27 // 3 * 7 + blockIdx_x % 7 + (threadIdx_x_1 + 1) % 3 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 56):
                    pad_temp_shared_1[threadIdx_x_1 + 168] = T.if_then_else(1 <= (threadIdx_x_1 // 3 + 2) % 9 and (threadIdx_x_1 + 6) % 27 < 24 and 1 <= blockIdx_x % 7 + threadIdx_x_1 % 3 and blockIdx_x % 7 + threadIdx_x_1 % 3 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 168) // 27 * 49 + (threadIdx_x_1 // 3 + 2) % 9 * 7 + blockIdx_x % 7 + threadIdx_x_1 % 3 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 56):
                    pad_temp_shared_1[threadIdx_x_1 + 224] = T.if_then_else(3 <= (threadIdx_x_1 + 8) % 27 and (threadIdx_x_1 + 8) % 27 < 24 and 1 <= blockIdx_x % 7 + (threadIdx_x_1 + 2) % 3 and blockIdx_x % 7 + (threadIdx_x_1 + 2) % 3 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 224) // 27 * 49 + (threadIdx_x_1 + 8) % 27 // 3 * 7 + blockIdx_x % 7 + (threadIdx_x_1 + 2) % 3 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 56):
                    pad_temp_shared_1[threadIdx_x_1 + 280] = T.if_then_else(3 <= (threadIdx_x_1 + 10) % 27 and (threadIdx_x_1 + 10) % 27 < 24 and 1 <= blockIdx_x % 7 + (threadIdx_x_1 + 1) % 3 and blockIdx_x % 7 + (threadIdx_x_1 + 1) % 3 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 280) // 27 * 49 + (threadIdx_x_1 + 10) % 27 // 3 * 7 + blockIdx_x % 7 + (threadIdx_x_1 + 1) % 3 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 56):
                    pad_temp_shared_1[threadIdx_x_1 + 336] = T.if_then_else(1 <= (threadIdx_x_1 // 3 + 4) % 9 and (threadIdx_x_1 + 12) % 27 < 24 and 1 <= blockIdx_x % 7 + threadIdx_x_1 % 3 and blockIdx_x % 7 + threadIdx_x_1 % 3 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 336) // 27 * 49 + (threadIdx_x_1 // 3 + 4) % 9 * 7 + blockIdx_x % 7 + threadIdx_x_1 % 3 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 56):
                    if T.likely(threadIdx_x_1 < 40):
                        pad_temp_shared_1[threadIdx_x_1 + 392] = T.if_then_else(3 <= (threadIdx_x_1 + 14) % 27 and (threadIdx_x_1 + 14) % 27 < 24 and 1 <= blockIdx_x % 7 + (threadIdx_x_1 + 2) % 3 and blockIdx_x % 7 + (threadIdx_x_1 + 2) % 3 < 8, data_1[cse_var_2 + (threadIdx_x_1 + 392) // 27 * 49 + (threadIdx_x_1 + 14) % 27 // 3 * 7 + blockIdx_x % 7 + (threadIdx_x_1 + 2) % 3 - 8], T.float32(0))
                threadIdx_x_2 = T.env_thread("threadIdx.x")
                kernel_shared_1 = T.Buffer((2304,), data=kernel_shared, scope="shared")
                kernel_1 = T.Buffer((2359296,), data=kernel.data)
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2] = kernel_1[blockIdx_x // 7 * 73728 + cse_var_1 + threadIdx_x_2]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 56] = kernel_1[blockIdx_x // 7 * 73728 + cse_var_1 + threadIdx_x_2 + 56]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 112] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 112) // 144 * 4608 + cse_var_1 + (threadIdx_x_2 + 112) % 144]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 168] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 168) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 24]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 224] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 224) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 80]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 280] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 280) // 144 * 4608 + cse_var_1 + (threadIdx_x_2 + 136) % 144]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 336] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 336) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 48]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 392] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 392) // 144 * 4608 + cse_var_1 + (threadIdx_x_2 + 104) % 144]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 448] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 448) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 16]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 504] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 504) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 72]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 560] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 560) // 144 * 4608 + cse_var_1 + (threadIdx_x_2 + 128) % 144]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 616] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 616) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 40]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 672] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 672) // 144 * 4608 + cse_var_1 + (threadIdx_x_2 + 96) % 144]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 728] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 728) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 8]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 784] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 784) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 64]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 840] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 840) // 144 * 4608 + cse_var_1 + (threadIdx_x_2 + 120) % 144]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 896] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 896) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 32]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 952] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 952) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 88]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1008] = kernel_1[blockIdx_x // 7 * 73728 + cse_var_1 + threadIdx_x_2 + 32256]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1064] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 1064) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 56]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1120] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 1120) // 144 * 4608 + cse_var_1 + (threadIdx_x_2 + 112) % 144]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1176] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 1176) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 24]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1232] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 1232) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 80]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1288] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 1288) // 144 * 4608 + cse_var_1 + (threadIdx_x_2 + 136) % 144]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1344] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 1344) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 48]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1400] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 1400) // 144 * 4608 + cse_var_1 + (threadIdx_x_2 + 104) % 144]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1456] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 1456) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 16]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1512] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 1512) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 72]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1568] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 1568) // 144 * 4608 + cse_var_1 + (threadIdx_x_2 + 128) % 144]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1624] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 1624) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 40]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1680] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 1680) // 144 * 4608 + cse_var_1 + (threadIdx_x_2 + 96) % 144]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1736] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 1736) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 8]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1792] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 1792) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 64]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1848] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 1848) // 144 * 4608 + cse_var_1 + (threadIdx_x_2 + 120) % 144]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1904] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 1904) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 32]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1960] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 1960) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 88]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 2016] = kernel_1[blockIdx_x // 7 * 73728 + cse_var_1 + threadIdx_x_2 + 64512]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 2072] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 2072) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 56]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 2128] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 2128) // 144 * 4608 + cse_var_1 + (threadIdx_x_2 + 112) % 144]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 2184] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 2184) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 24]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 2240] = kernel_1[blockIdx_x // 7 * 73728 + (threadIdx_x_2 + 2240) // 144 * 4608 + cse_var_1 + threadIdx_x_2 + 80]
                with T.launch_thread(threadIdx_x_2, 56):
                    if T.likely(threadIdx_x_2 < 8):
                        kernel_shared_1[threadIdx_x_2 + 2296] = kernel_1[blockIdx_x // 7 * 73728 + cse_var_1 + threadIdx_x_2 + 69256]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3] * kernel_shared_1[threadIdx_x // 7 * 144]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3] * kernel_shared_1[threadIdx_x // 7 * 144 + 1152]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 1] * kernel_shared_1[threadIdx_x // 7 * 144 + 1]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 1] * kernel_shared_1[threadIdx_x // 7 * 144 + 1153]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 2] * kernel_shared_1[threadIdx_x // 7 * 144 + 2]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 2] * kernel_shared_1[threadIdx_x // 7 * 144 + 1154]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 27] * kernel_shared_1[threadIdx_x // 7 * 144 + 9]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 27] * kernel_shared_1[threadIdx_x // 7 * 144 + 1161]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 28] * kernel_shared_1[threadIdx_x // 7 * 144 + 10]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 28] * kernel_shared_1[threadIdx_x // 7 * 144 + 1162]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 29] * kernel_shared_1[threadIdx_x // 7 * 144 + 11]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 29] * kernel_shared_1[threadIdx_x // 7 * 144 + 1163]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 54] * kernel_shared_1[threadIdx_x // 7 * 144 + 18]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 54] * kernel_shared_1[threadIdx_x // 7 * 144 + 1170]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 55] * kernel_shared_1[threadIdx_x // 7 * 144 + 19]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 55] * kernel_shared_1[threadIdx_x // 7 * 144 + 1171]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 56] * kernel_shared_1[threadIdx_x // 7 * 144 + 20]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 56] * kernel_shared_1[threadIdx_x // 7 * 144 + 1172]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 81] * kernel_shared_1[threadIdx_x // 7 * 144 + 27]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 81] * kernel_shared_1[threadIdx_x // 7 * 144 + 1179]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 82] * kernel_shared_1[threadIdx_x // 7 * 144 + 28]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 82] * kernel_shared_1[threadIdx_x // 7 * 144 + 1180]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 83] * kernel_shared_1[threadIdx_x // 7 * 144 + 29]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 83] * kernel_shared_1[threadIdx_x // 7 * 144 + 1181]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 108] * kernel_shared_1[threadIdx_x // 7 * 144 + 36]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 108] * kernel_shared_1[threadIdx_x // 7 * 144 + 1188]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 109] * kernel_shared_1[threadIdx_x // 7 * 144 + 37]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 109] * kernel_shared_1[threadIdx_x // 7 * 144 + 1189]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 110] * kernel_shared_1[threadIdx_x // 7 * 144 + 38]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 110] * kernel_shared_1[threadIdx_x // 7 * 144 + 1190]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 135] * kernel_shared_1[threadIdx_x // 7 * 144 + 45]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 135] * kernel_shared_1[threadIdx_x // 7 * 144 + 1197]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 136] * kernel_shared_1[threadIdx_x // 7 * 144 + 46]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 136] * kernel_shared_1[threadIdx_x // 7 * 144 + 1198]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 137] * kernel_shared_1[threadIdx_x // 7 * 144 + 47]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 137] * kernel_shared_1[threadIdx_x // 7 * 144 + 1199]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 162] * kernel_shared_1[threadIdx_x // 7 * 144 + 54]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 162] * kernel_shared_1[threadIdx_x // 7 * 144 + 1206]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 163] * kernel_shared_1[threadIdx_x // 7 * 144 + 55]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 163] * kernel_shared_1[threadIdx_x // 7 * 144 + 1207]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 164] * kernel_shared_1[threadIdx_x // 7 * 144 + 56]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 164] * kernel_shared_1[threadIdx_x // 7 * 144 + 1208]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 189] * kernel_shared_1[threadIdx_x // 7 * 144 + 63]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 189] * kernel_shared_1[threadIdx_x // 7 * 144 + 1215]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 190] * kernel_shared_1[threadIdx_x // 7 * 144 + 64]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 190] * kernel_shared_1[threadIdx_x // 7 * 144 + 1216]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 191] * kernel_shared_1[threadIdx_x // 7 * 144 + 65]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 191] * kernel_shared_1[threadIdx_x // 7 * 144 + 1217]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 3] * kernel_shared_1[threadIdx_x // 7 * 144 + 3]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 3] * kernel_shared_1[threadIdx_x // 7 * 144 + 1155]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 4] * kernel_shared_1[threadIdx_x // 7 * 144 + 4]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 4] * kernel_shared_1[threadIdx_x // 7 * 144 + 1156]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 5] * kernel_shared_1[threadIdx_x // 7 * 144 + 5]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 5] * kernel_shared_1[threadIdx_x // 7 * 144 + 1157]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 30] * kernel_shared_1[threadIdx_x // 7 * 144 + 12]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 30] * kernel_shared_1[threadIdx_x // 7 * 144 + 1164]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 31] * kernel_shared_1[threadIdx_x // 7 * 144 + 13]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 31] * kernel_shared_1[threadIdx_x // 7 * 144 + 1165]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 32] * kernel_shared_1[threadIdx_x // 7 * 144 + 14]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 32] * kernel_shared_1[threadIdx_x // 7 * 144 + 1166]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 57] * kernel_shared_1[threadIdx_x // 7 * 144 + 21]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 57] * kernel_shared_1[threadIdx_x // 7 * 144 + 1173]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 58] * kernel_shared_1[threadIdx_x // 7 * 144 + 22]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 58] * kernel_shared_1[threadIdx_x // 7 * 144 + 1174]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 59] * kernel_shared_1[threadIdx_x // 7 * 144 + 23]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 59] * kernel_shared_1[threadIdx_x // 7 * 144 + 1175]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 84] * kernel_shared_1[threadIdx_x // 7 * 144 + 30]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 84] * kernel_shared_1[threadIdx_x // 7 * 144 + 1182]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 85] * kernel_shared_1[threadIdx_x // 7 * 144 + 31]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 85] * kernel_shared_1[threadIdx_x // 7 * 144 + 1183]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 86] * kernel_shared_1[threadIdx_x // 7 * 144 + 32]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 86] * kernel_shared_1[threadIdx_x // 7 * 144 + 1184]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 111] * kernel_shared_1[threadIdx_x // 7 * 144 + 39]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 111] * kernel_shared_1[threadIdx_x // 7 * 144 + 1191]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 112] * kernel_shared_1[threadIdx_x // 7 * 144 + 40]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 112] * kernel_shared_1[threadIdx_x // 7 * 144 + 1192]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 113] * kernel_shared_1[threadIdx_x // 7 * 144 + 41]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 113] * kernel_shared_1[threadIdx_x // 7 * 144 + 1193]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 138] * kernel_shared_1[threadIdx_x // 7 * 144 + 48]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 138] * kernel_shared_1[threadIdx_x // 7 * 144 + 1200]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 139] * kernel_shared_1[threadIdx_x // 7 * 144 + 49]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 139] * kernel_shared_1[threadIdx_x // 7 * 144 + 1201]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 140] * kernel_shared_1[threadIdx_x // 7 * 144 + 50]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 140] * kernel_shared_1[threadIdx_x // 7 * 144 + 1202]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 165] * kernel_shared_1[threadIdx_x // 7 * 144 + 57]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 165] * kernel_shared_1[threadIdx_x // 7 * 144 + 1209]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 166] * kernel_shared_1[threadIdx_x // 7 * 144 + 58]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 166] * kernel_shared_1[threadIdx_x // 7 * 144 + 1210]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 167] * kernel_shared_1[threadIdx_x // 7 * 144 + 59]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 167] * kernel_shared_1[threadIdx_x // 7 * 144 + 1211]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 192] * kernel_shared_1[threadIdx_x // 7 * 144 + 66]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 192] * kernel_shared_1[threadIdx_x // 7 * 144 + 1218]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 193] * kernel_shared_1[threadIdx_x // 7 * 144 + 67]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 193] * kernel_shared_1[threadIdx_x // 7 * 144 + 1219]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 194] * kernel_shared_1[threadIdx_x // 7 * 144 + 68]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 194] * kernel_shared_1[threadIdx_x // 7 * 144 + 1220]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 6] * kernel_shared_1[threadIdx_x // 7 * 144 + 6]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 6] * kernel_shared_1[threadIdx_x // 7 * 144 + 1158]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 7] * kernel_shared_1[threadIdx_x // 7 * 144 + 7]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 7] * kernel_shared_1[threadIdx_x // 7 * 144 + 1159]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 8] * kernel_shared_1[threadIdx_x // 7 * 144 + 8]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 8] * kernel_shared_1[threadIdx_x // 7 * 144 + 1160]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 33] * kernel_shared_1[threadIdx_x // 7 * 144 + 15]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 33] * kernel_shared_1[threadIdx_x // 7 * 144 + 1167]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 34] * kernel_shared_1[threadIdx_x // 7 * 144 + 16]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 34] * kernel_shared_1[threadIdx_x // 7 * 144 + 1168]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 35] * kernel_shared_1[threadIdx_x // 7 * 144 + 17]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 35] * kernel_shared_1[threadIdx_x // 7 * 144 + 1169]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 60] * kernel_shared_1[threadIdx_x // 7 * 144 + 24]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 60] * kernel_shared_1[threadIdx_x // 7 * 144 + 1176]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 61] * kernel_shared_1[threadIdx_x // 7 * 144 + 25]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 61] * kernel_shared_1[threadIdx_x // 7 * 144 + 1177]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 62] * kernel_shared_1[threadIdx_x // 7 * 144 + 26]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 62] * kernel_shared_1[threadIdx_x // 7 * 144 + 1178]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 87] * kernel_shared_1[threadIdx_x // 7 * 144 + 33]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 87] * kernel_shared_1[threadIdx_x // 7 * 144 + 1185]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 88] * kernel_shared_1[threadIdx_x // 7 * 144 + 34]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 88] * kernel_shared_1[threadIdx_x // 7 * 144 + 1186]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 89] * kernel_shared_1[threadIdx_x // 7 * 144 + 35]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 89] * kernel_shared_1[threadIdx_x // 7 * 144 + 1187]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 114] * kernel_shared_1[threadIdx_x // 7 * 144 + 42]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 114] * kernel_shared_1[threadIdx_x // 7 * 144 + 1194]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 115] * kernel_shared_1[threadIdx_x // 7 * 144 + 43]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 115] * kernel_shared_1[threadIdx_x // 7 * 144 + 1195]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 116] * kernel_shared_1[threadIdx_x // 7 * 144 + 44]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 116] * kernel_shared_1[threadIdx_x // 7 * 144 + 1196]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 141] * kernel_shared_1[threadIdx_x // 7 * 144 + 51]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 141] * kernel_shared_1[threadIdx_x // 7 * 144 + 1203]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 142] * kernel_shared_1[threadIdx_x // 7 * 144 + 52]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 142] * kernel_shared_1[threadIdx_x // 7 * 144 + 1204]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 143] * kernel_shared_1[threadIdx_x // 7 * 144 + 53]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 143] * kernel_shared_1[threadIdx_x // 7 * 144 + 1205]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 168] * kernel_shared_1[threadIdx_x // 7 * 144 + 60]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 168] * kernel_shared_1[threadIdx_x // 7 * 144 + 1212]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 169] * kernel_shared_1[threadIdx_x // 7 * 144 + 61]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 169] * kernel_shared_1[threadIdx_x // 7 * 144 + 1213]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 170] * kernel_shared_1[threadIdx_x // 7 * 144 + 62]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 170] * kernel_shared_1[threadIdx_x // 7 * 144 + 1214]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 195] * kernel_shared_1[threadIdx_x // 7 * 144 + 69]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 195] * kernel_shared_1[threadIdx_x // 7 * 144 + 1221]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 196] * kernel_shared_1[threadIdx_x // 7 * 144 + 70]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 196] * kernel_shared_1[threadIdx_x // 7 * 144 + 1222]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 197] * kernel_shared_1[threadIdx_x // 7 * 144 + 71]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 197] * kernel_shared_1[threadIdx_x // 7 * 144 + 1223]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 216] * kernel_shared_1[threadIdx_x // 7 * 144 + 72]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 216] * kernel_shared_1[threadIdx_x // 7 * 144 + 1224]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 217] * kernel_shared_1[threadIdx_x // 7 * 144 + 73]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 217] * kernel_shared_1[threadIdx_x // 7 * 144 + 1225]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 218] * kernel_shared_1[threadIdx_x // 7 * 144 + 74]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 218] * kernel_shared_1[threadIdx_x // 7 * 144 + 1226]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 243] * kernel_shared_1[threadIdx_x // 7 * 144 + 81]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 243] * kernel_shared_1[threadIdx_x // 7 * 144 + 1233]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 244] * kernel_shared_1[threadIdx_x // 7 * 144 + 82]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 244] * kernel_shared_1[threadIdx_x // 7 * 144 + 1234]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 245] * kernel_shared_1[threadIdx_x // 7 * 144 + 83]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 245] * kernel_shared_1[threadIdx_x // 7 * 144 + 1235]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 270] * kernel_shared_1[threadIdx_x // 7 * 144 + 90]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 270] * kernel_shared_1[threadIdx_x // 7 * 144 + 1242]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 271] * kernel_shared_1[threadIdx_x // 7 * 144 + 91]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 271] * kernel_shared_1[threadIdx_x // 7 * 144 + 1243]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 272] * kernel_shared_1[threadIdx_x // 7 * 144 + 92]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 272] * kernel_shared_1[threadIdx_x // 7 * 144 + 1244]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 297] * kernel_shared_1[threadIdx_x // 7 * 144 + 99]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 297] * kernel_shared_1[threadIdx_x // 7 * 144 + 1251]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 298] * kernel_shared_1[threadIdx_x // 7 * 144 + 100]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 298] * kernel_shared_1[threadIdx_x // 7 * 144 + 1252]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 299] * kernel_shared_1[threadIdx_x // 7 * 144 + 101]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 299] * kernel_shared_1[threadIdx_x // 7 * 144 + 1253]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 324] * kernel_shared_1[threadIdx_x // 7 * 144 + 108]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 324] * kernel_shared_1[threadIdx_x // 7 * 144 + 1260]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 325] * kernel_shared_1[threadIdx_x // 7 * 144 + 109]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 325] * kernel_shared_1[threadIdx_x // 7 * 144 + 1261]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 326] * kernel_shared_1[threadIdx_x // 7 * 144 + 110]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 326] * kernel_shared_1[threadIdx_x // 7 * 144 + 1262]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 351] * kernel_shared_1[threadIdx_x // 7 * 144 + 117]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 351] * kernel_shared_1[threadIdx_x // 7 * 144 + 1269]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 352] * kernel_shared_1[threadIdx_x // 7 * 144 + 118]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 352] * kernel_shared_1[threadIdx_x // 7 * 144 + 1270]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 353] * kernel_shared_1[threadIdx_x // 7 * 144 + 119]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 353] * kernel_shared_1[threadIdx_x // 7 * 144 + 1271]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 378] * kernel_shared_1[threadIdx_x // 7 * 144 + 126]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 378] * kernel_shared_1[threadIdx_x // 7 * 144 + 1278]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 379] * kernel_shared_1[threadIdx_x // 7 * 144 + 127]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 379] * kernel_shared_1[threadIdx_x // 7 * 144 + 1279]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 380] * kernel_shared_1[threadIdx_x // 7 * 144 + 128]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 380] * kernel_shared_1[threadIdx_x // 7 * 144 + 1280]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 405] * kernel_shared_1[threadIdx_x // 7 * 144 + 135]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 405] * kernel_shared_1[threadIdx_x // 7 * 144 + 1287]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 406] * kernel_shared_1[threadIdx_x // 7 * 144 + 136]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 406] * kernel_shared_1[threadIdx_x // 7 * 144 + 1288]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 407] * kernel_shared_1[threadIdx_x // 7 * 144 + 137]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 407] * kernel_shared_1[threadIdx_x // 7 * 144 + 1289]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 219] * kernel_shared_1[threadIdx_x // 7 * 144 + 75]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 219] * kernel_shared_1[threadIdx_x // 7 * 144 + 1227]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 220] * kernel_shared_1[threadIdx_x // 7 * 144 + 76]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 220] * kernel_shared_1[threadIdx_x // 7 * 144 + 1228]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 221] * kernel_shared_1[threadIdx_x // 7 * 144 + 77]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 221] * kernel_shared_1[threadIdx_x // 7 * 144 + 1229]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 246] * kernel_shared_1[threadIdx_x // 7 * 144 + 84]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 246] * kernel_shared_1[threadIdx_x // 7 * 144 + 1236]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 247] * kernel_shared_1[threadIdx_x // 7 * 144 + 85]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 247] * kernel_shared_1[threadIdx_x // 7 * 144 + 1237]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 248] * kernel_shared_1[threadIdx_x // 7 * 144 + 86]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 248] * kernel_shared_1[threadIdx_x // 7 * 144 + 1238]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 273] * kernel_shared_1[threadIdx_x // 7 * 144 + 93]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 273] * kernel_shared_1[threadIdx_x // 7 * 144 + 1245]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 274] * kernel_shared_1[threadIdx_x // 7 * 144 + 94]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 274] * kernel_shared_1[threadIdx_x // 7 * 144 + 1246]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 275] * kernel_shared_1[threadIdx_x // 7 * 144 + 95]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 275] * kernel_shared_1[threadIdx_x // 7 * 144 + 1247]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 300] * kernel_shared_1[threadIdx_x // 7 * 144 + 102]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 300] * kernel_shared_1[threadIdx_x // 7 * 144 + 1254]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 301] * kernel_shared_1[threadIdx_x // 7 * 144 + 103]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 301] * kernel_shared_1[threadIdx_x // 7 * 144 + 1255]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 302] * kernel_shared_1[threadIdx_x // 7 * 144 + 104]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 302] * kernel_shared_1[threadIdx_x // 7 * 144 + 1256]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 327] * kernel_shared_1[threadIdx_x // 7 * 144 + 111]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 327] * kernel_shared_1[threadIdx_x // 7 * 144 + 1263]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 328] * kernel_shared_1[threadIdx_x // 7 * 144 + 112]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 328] * kernel_shared_1[threadIdx_x // 7 * 144 + 1264]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 329] * kernel_shared_1[threadIdx_x // 7 * 144 + 113]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 329] * kernel_shared_1[threadIdx_x // 7 * 144 + 1265]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 354] * kernel_shared_1[threadIdx_x // 7 * 144 + 120]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 354] * kernel_shared_1[threadIdx_x // 7 * 144 + 1272]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 355] * kernel_shared_1[threadIdx_x // 7 * 144 + 121]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 355] * kernel_shared_1[threadIdx_x // 7 * 144 + 1273]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 356] * kernel_shared_1[threadIdx_x // 7 * 144 + 122]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 356] * kernel_shared_1[threadIdx_x // 7 * 144 + 1274]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 381] * kernel_shared_1[threadIdx_x // 7 * 144 + 129]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 381] * kernel_shared_1[threadIdx_x // 7 * 144 + 1281]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 382] * kernel_shared_1[threadIdx_x // 7 * 144 + 130]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 382] * kernel_shared_1[threadIdx_x // 7 * 144 + 1282]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 383] * kernel_shared_1[threadIdx_x // 7 * 144 + 131]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 383] * kernel_shared_1[threadIdx_x // 7 * 144 + 1283]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 408] * kernel_shared_1[threadIdx_x // 7 * 144 + 138]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 408] * kernel_shared_1[threadIdx_x // 7 * 144 + 1290]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 409] * kernel_shared_1[threadIdx_x // 7 * 144 + 139]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 409] * kernel_shared_1[threadIdx_x // 7 * 144 + 1291]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 410] * kernel_shared_1[threadIdx_x // 7 * 144 + 140]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 410] * kernel_shared_1[threadIdx_x // 7 * 144 + 1292]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 222] * kernel_shared_1[threadIdx_x // 7 * 144 + 78]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 222] * kernel_shared_1[threadIdx_x // 7 * 144 + 1230]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 223] * kernel_shared_1[threadIdx_x // 7 * 144 + 79]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 223] * kernel_shared_1[threadIdx_x // 7 * 144 + 1231]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 224] * kernel_shared_1[threadIdx_x // 7 * 144 + 80]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 224] * kernel_shared_1[threadIdx_x // 7 * 144 + 1232]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 249] * kernel_shared_1[threadIdx_x // 7 * 144 + 87]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 249] * kernel_shared_1[threadIdx_x // 7 * 144 + 1239]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 250] * kernel_shared_1[threadIdx_x // 7 * 144 + 88]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 250] * kernel_shared_1[threadIdx_x // 7 * 144 + 1240]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 251] * kernel_shared_1[threadIdx_x // 7 * 144 + 89]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 251] * kernel_shared_1[threadIdx_x // 7 * 144 + 1241]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 276] * kernel_shared_1[threadIdx_x // 7 * 144 + 96]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 276] * kernel_shared_1[threadIdx_x // 7 * 144 + 1248]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 277] * kernel_shared_1[threadIdx_x // 7 * 144 + 97]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 277] * kernel_shared_1[threadIdx_x // 7 * 144 + 1249]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 278] * kernel_shared_1[threadIdx_x // 7 * 144 + 98]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 278] * kernel_shared_1[threadIdx_x // 7 * 144 + 1250]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 303] * kernel_shared_1[threadIdx_x // 7 * 144 + 105]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 303] * kernel_shared_1[threadIdx_x // 7 * 144 + 1257]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 304] * kernel_shared_1[threadIdx_x // 7 * 144 + 106]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 304] * kernel_shared_1[threadIdx_x // 7 * 144 + 1258]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 305] * kernel_shared_1[threadIdx_x // 7 * 144 + 107]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 305] * kernel_shared_1[threadIdx_x // 7 * 144 + 1259]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 330] * kernel_shared_1[threadIdx_x // 7 * 144 + 114]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 330] * kernel_shared_1[threadIdx_x // 7 * 144 + 1266]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 331] * kernel_shared_1[threadIdx_x // 7 * 144 + 115]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 331] * kernel_shared_1[threadIdx_x // 7 * 144 + 1267]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 332] * kernel_shared_1[threadIdx_x // 7 * 144 + 116]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 332] * kernel_shared_1[threadIdx_x // 7 * 144 + 1268]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 357] * kernel_shared_1[threadIdx_x // 7 * 144 + 123]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 357] * kernel_shared_1[threadIdx_x // 7 * 144 + 1275]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 358] * kernel_shared_1[threadIdx_x // 7 * 144 + 124]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 358] * kernel_shared_1[threadIdx_x // 7 * 144 + 1276]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 359] * kernel_shared_1[threadIdx_x // 7 * 144 + 125]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 359] * kernel_shared_1[threadIdx_x // 7 * 144 + 1277]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 384] * kernel_shared_1[threadIdx_x // 7 * 144 + 132]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 384] * kernel_shared_1[threadIdx_x // 7 * 144 + 1284]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 385] * kernel_shared_1[threadIdx_x // 7 * 144 + 133]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 385] * kernel_shared_1[threadIdx_x // 7 * 144 + 1285]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 386] * kernel_shared_1[threadIdx_x // 7 * 144 + 134]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 386] * kernel_shared_1[threadIdx_x // 7 * 144 + 1286]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 411] * kernel_shared_1[threadIdx_x // 7 * 144 + 141]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 411] * kernel_shared_1[threadIdx_x // 7 * 144 + 1293]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 412] * kernel_shared_1[threadIdx_x // 7 * 144 + 142]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 412] * kernel_shared_1[threadIdx_x // 7 * 144 + 1294]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 413] * kernel_shared_1[threadIdx_x // 7 * 144 + 143]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[threadIdx_x % 7 * 3 + 413] * kernel_shared_1[threadIdx_x // 7 * 144 + 1295]
            compute_1 = T.Buffer((25088,), data=compute.data)
            bias_1 = T.Buffer((512,), data=bias.data)
            compute_1[blockIdx_x // 7 * 784 + threadIdx_x * 7 + blockIdx_x % 7] = T.max(conv2d_nchw_1[0] + bias_1[blockIdx_x // 7 * 16 + threadIdx_x // 7], T.float32(0))
            compute_1[blockIdx_x // 7 * 784 + threadIdx_x * 7 + blockIdx_x % 7 + 392] = T.max(conv2d_nchw_1[1] + bias_1[blockIdx_x // 7 * 16 + threadIdx_x // 7 + 8], T.float32(0))




.. GENERATED FROM PYTHON SOURCE LINES 138-141

Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.

.. GENERATED FROM PYTHON SOURCE LINES 141-168

.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Execution time of this operator: 0.345 ms




.. GENERATED FROM PYTHON SOURCE LINES 169-174

Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

.. GENERATED FROM PYTHON SOURCE LINES 176-179

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.

.. GENERATED FROM PYTHON SOURCE LINES 179-186

.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=1)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=8)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=2)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=7)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=8)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=2)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=1)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=3)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=3)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=1)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=1)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=8)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=2)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=7)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=1)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=56)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=56)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 512)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(56) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[2];
      __shared__ float pad_temp_shared[432];
      __shared__ float kernel_shared[2304];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 32; ++rc_outer_outer) {
        __syncthreads();
        pad_temp_shared[((int)threadIdx.x)] = (((((3 <= (((int)threadIdx.x) % 27)) && ((((int)threadIdx.x) % 27) < 24)) && (1 <= ((((int)blockIdx.x) % 7) + (((int)threadIdx.x) % 3)))) && (((((int)blockIdx.x) % 7) + (((int)threadIdx.x) % 3)) < 8)) ? data[((((((rc_outer_outer * 784) + ((((int)threadIdx.x) / 27) * 49)) + (((((int)threadIdx.x) % 27) / 3) * 7)) + (((int)blockIdx.x) % 7)) + (((int)threadIdx.x) % 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 56)] = (((((3 <= ((((int)threadIdx.x) + 2) % 27)) && (((((int)threadIdx.x) + 2) % 27) < 24)) && (1 <= ((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 2) % 3)))) && (((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 2) % 3)) < 8)) ? data[((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 56) / 27) * 49)) + ((((((int)threadIdx.x) + 2) % 27) / 3) * 7)) + (((int)blockIdx.x) % 7)) + ((((int)threadIdx.x) + 2) % 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 112)] = (((((3 <= ((((int)threadIdx.x) + 4) % 27)) && (((((int)threadIdx.x) + 4) % 27) < 24)) && (1 <= ((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 1) % 3)))) && (((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 1) % 3)) < 8)) ? data[((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 112) / 27) * 49)) + ((((((int)threadIdx.x) + 4) % 27) / 3) * 7)) + (((int)blockIdx.x) % 7)) + ((((int)threadIdx.x) + 1) % 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 168)] = (((((1 <= (((((int)threadIdx.x) / 3) + 2) % 9)) && (((((int)threadIdx.x) + 6) % 27) < 24)) && (1 <= ((((int)blockIdx.x) % 7) + (((int)threadIdx.x) % 3)))) && (((((int)blockIdx.x) % 7) + (((int)threadIdx.x) % 3)) < 8)) ? data[((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 168) / 27) * 49)) + ((((((int)threadIdx.x) / 3) + 2) % 9) * 7)) + (((int)blockIdx.x) % 7)) + (((int)threadIdx.x) % 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 224)] = (((((3 <= ((((int)threadIdx.x) + 8) % 27)) && (((((int)threadIdx.x) + 8) % 27) < 24)) && (1 <= ((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 2) % 3)))) && (((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 2) % 3)) < 8)) ? data[((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 224) / 27) * 49)) + ((((((int)threadIdx.x) + 8) % 27) / 3) * 7)) + (((int)blockIdx.x) % 7)) + ((((int)threadIdx.x) + 2) % 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 280)] = (((((3 <= ((((int)threadIdx.x) + 10) % 27)) && (((((int)threadIdx.x) + 10) % 27) < 24)) && (1 <= ((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 1) % 3)))) && (((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 1) % 3)) < 8)) ? data[((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 280) / 27) * 49)) + ((((((int)threadIdx.x) + 10) % 27) / 3) * 7)) + (((int)blockIdx.x) % 7)) + ((((int)threadIdx.x) + 1) % 3)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 336)] = (((((1 <= (((((int)threadIdx.x) / 3) + 4) % 9)) && (((((int)threadIdx.x) + 12) % 27) < 24)) && (1 <= ((((int)blockIdx.x) % 7) + (((int)threadIdx.x) % 3)))) && (((((int)blockIdx.x) % 7) + (((int)threadIdx.x) % 3)) < 8)) ? data[((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 336) / 27) * 49)) + ((((((int)threadIdx.x) / 3) + 4) % 9) * 7)) + (((int)blockIdx.x) % 7)) + (((int)threadIdx.x) % 3)) - 8)] : 0.000000e+00f);
        if (((int)threadIdx.x) < 40) {
          pad_temp_shared[(((int)threadIdx.x) + 392)] = (((((3 <= ((((int)threadIdx.x) + 14) % 27)) && (((((int)threadIdx.x) + 14) % 27) < 24)) && (1 <= ((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 2) % 3)))) && (((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 2) % 3)) < 8)) ? data[((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 392) / 27) * 49)) + ((((((int)threadIdx.x) + 14) % 27) / 3) * 7)) + (((int)blockIdx.x) % 7)) + ((((int)threadIdx.x) + 2) % 3)) - 8)] : 0.000000e+00f);
        }
        kernel_shared[((int)threadIdx.x)] = kernel[((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + ((int)threadIdx.x))];
        kernel_shared[(((int)threadIdx.x) + 56)] = kernel[(((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 56)];
        kernel_shared[(((int)threadIdx.x) + 112)] = kernel[(((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 112) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) + 112) % 144))];
        kernel_shared[(((int)threadIdx.x) + 168)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 168) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 24)];
        kernel_shared[(((int)threadIdx.x) + 224)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 224) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 80)];
        kernel_shared[(((int)threadIdx.x) + 280)] = kernel[(((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 280) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) + 136) % 144))];
        kernel_shared[(((int)threadIdx.x) + 336)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 336) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 48)];
        kernel_shared[(((int)threadIdx.x) + 392)] = kernel[(((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 392) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) + 104) % 144))];
        kernel_shared[(((int)threadIdx.x) + 448)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 448) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 16)];
        kernel_shared[(((int)threadIdx.x) + 504)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 504) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 72)];
        kernel_shared[(((int)threadIdx.x) + 560)] = kernel[(((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 560) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) + 128) % 144))];
        kernel_shared[(((int)threadIdx.x) + 616)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 616) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 40)];
        kernel_shared[(((int)threadIdx.x) + 672)] = kernel[(((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 672) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) + 96) % 144))];
        kernel_shared[(((int)threadIdx.x) + 728)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 728) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 8)];
        kernel_shared[(((int)threadIdx.x) + 784)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 784) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 64)];
        kernel_shared[(((int)threadIdx.x) + 840)] = kernel[(((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 840) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) + 120) % 144))];
        kernel_shared[(((int)threadIdx.x) + 896)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 896) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 32)];
        kernel_shared[(((int)threadIdx.x) + 952)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 952) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 88)];
        kernel_shared[(((int)threadIdx.x) + 1008)] = kernel[(((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 32256)];
        kernel_shared[(((int)threadIdx.x) + 1064)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 1064) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 56)];
        kernel_shared[(((int)threadIdx.x) + 1120)] = kernel[(((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 1120) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) + 112) % 144))];
        kernel_shared[(((int)threadIdx.x) + 1176)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 1176) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 24)];
        kernel_shared[(((int)threadIdx.x) + 1232)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 1232) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 80)];
        kernel_shared[(((int)threadIdx.x) + 1288)] = kernel[(((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 1288) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) + 136) % 144))];
        kernel_shared[(((int)threadIdx.x) + 1344)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 1344) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 48)];
        kernel_shared[(((int)threadIdx.x) + 1400)] = kernel[(((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 1400) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) + 104) % 144))];
        kernel_shared[(((int)threadIdx.x) + 1456)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 1456) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 16)];
        kernel_shared[(((int)threadIdx.x) + 1512)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 1512) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 72)];
        kernel_shared[(((int)threadIdx.x) + 1568)] = kernel[(((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 1568) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) + 128) % 144))];
        kernel_shared[(((int)threadIdx.x) + 1624)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 1624) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 40)];
        kernel_shared[(((int)threadIdx.x) + 1680)] = kernel[(((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 1680) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) + 96) % 144))];
        kernel_shared[(((int)threadIdx.x) + 1736)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 1736) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 8)];
        kernel_shared[(((int)threadIdx.x) + 1792)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 1792) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 64)];
        kernel_shared[(((int)threadIdx.x) + 1848)] = kernel[(((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 1848) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) + 120) % 144))];
        kernel_shared[(((int)threadIdx.x) + 1904)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 1904) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 32)];
        kernel_shared[(((int)threadIdx.x) + 1960)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 1960) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 88)];
        kernel_shared[(((int)threadIdx.x) + 2016)] = kernel[(((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 64512)];
        kernel_shared[(((int)threadIdx.x) + 2072)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 2072) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 56)];
        kernel_shared[(((int)threadIdx.x) + 2128)] = kernel[(((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 2128) / 144) * 4608)) + (rc_outer_outer * 144)) + ((((int)threadIdx.x) + 112) % 144))];
        kernel_shared[(((int)threadIdx.x) + 2184)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 2184) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 24)];
        kernel_shared[(((int)threadIdx.x) + 2240)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (((((int)threadIdx.x) + 2240) / 144) * 4608)) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 80)];
        if (((int)threadIdx.x) < 8) {
          kernel_shared[(((int)threadIdx.x) + 2296)] = kernel[(((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + ((int)threadIdx.x)) + 69256)];
        }
        __syncthreads();
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) * 3)] * kernel_shared[((((int)threadIdx.x) / 7) * 144)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) * 3)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1152)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 1)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 1)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1153)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 2)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 2)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 2)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1154)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 27)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 9)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 27)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1161)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 10)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1162)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 29)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 11)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 29)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1163)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 54)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 18)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 54)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1170)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 55)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 19)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 55)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1171)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 20)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1172)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 81)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 27)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 81)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1179)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 82)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 28)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 82)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1180)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 83)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 29)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 83)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1181)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 108)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 36)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 108)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1188)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 109)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 37)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 109)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1189)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 110)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 38)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 110)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1190)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 135)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 45)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 135)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1197)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 136)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 46)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 136)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1198)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 137)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 47)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 137)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1199)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 162)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 54)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 162)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1206)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 163)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 55)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 163)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1207)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 164)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 56)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 164)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1208)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 189)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 63)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 189)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1215)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 190)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 64)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 190)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1216)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 191)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 65)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 191)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1217)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 3)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 3)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 3)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1155)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 4)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 4)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 4)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1156)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 5)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 5)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 5)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1157)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 30)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 12)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 30)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1164)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 31)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 13)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 31)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1165)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 32)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 14)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 32)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1166)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 57)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 21)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 57)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1173)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 58)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 22)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 58)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1174)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 59)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 23)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 59)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1175)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 30)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1182)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 85)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 31)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 85)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1183)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 86)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 32)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 86)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1184)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 111)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 39)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 111)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1191)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 40)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1192)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 113)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 41)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 113)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1193)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 138)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 48)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 138)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1200)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 139)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 49)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 139)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1201)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 50)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1202)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 165)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 57)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 165)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1209)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 166)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 58)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 166)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1210)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 167)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 59)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 167)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1211)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 192)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 66)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 192)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1218)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 193)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 67)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 193)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1219)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 194)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 68)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 194)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1220)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 6)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 6)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 6)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1158)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 7)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1159)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 8)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 8)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 8)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1160)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 33)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 15)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 33)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1167)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 34)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 16)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 34)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1168)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 17)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1169)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 60)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 24)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 60)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1176)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 61)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 25)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 61)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1177)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 62)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 26)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 62)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1178)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 87)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 33)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 87)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1185)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 88)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 34)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 88)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1186)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 89)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 35)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 89)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1187)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 114)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 42)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 114)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1194)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 115)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 43)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 115)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1195)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 116)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 44)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 116)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1196)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 141)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 51)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 141)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1203)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 142)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 52)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 142)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1204)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 143)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 53)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 143)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1205)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 168)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 60)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 168)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1212)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 169)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 61)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 169)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1213)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 170)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 62)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 170)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1214)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 195)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 69)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 195)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1221)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 196)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 70)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 196)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1222)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 197)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 71)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 197)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1223)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 216)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 72)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 216)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1224)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 217)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 73)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 217)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1225)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 218)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 74)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 218)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1226)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 243)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 81)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 243)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1233)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 244)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 82)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 244)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1234)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 245)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 83)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 245)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1235)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 270)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 90)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 270)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1242)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 271)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 91)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 271)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1243)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 272)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 92)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 272)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1244)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 297)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 99)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 297)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1251)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 298)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 100)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 298)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1252)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 299)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 101)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 299)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1253)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 324)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 108)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 324)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1260)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 325)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 109)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 325)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1261)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 326)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 110)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 326)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1262)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 351)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 117)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 351)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1269)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 352)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 118)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 352)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1270)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 353)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 119)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 353)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1271)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 378)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 126)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 378)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1278)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 379)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 127)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 379)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1279)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 380)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 128)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 380)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1280)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 405)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 135)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 405)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1287)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 406)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 136)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 406)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1288)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 407)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 137)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 407)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1289)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 219)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 75)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 219)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1227)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 220)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 76)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 220)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1228)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 221)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 77)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 221)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1229)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 246)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 84)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 246)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1236)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 247)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 85)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 247)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1237)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 248)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 86)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 248)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1238)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 273)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 93)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 273)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1245)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 274)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 94)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 274)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1246)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 275)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 95)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 275)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1247)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 300)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 102)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 300)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1254)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 301)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 103)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 301)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1255)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 302)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 104)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 302)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1256)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 327)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 111)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 327)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1263)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 328)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 112)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 328)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1264)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 329)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 113)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 329)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1265)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 354)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 120)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 354)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1272)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 355)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 121)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 355)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1273)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 356)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 122)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 356)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1274)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 381)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 129)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 381)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1281)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 382)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 130)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 382)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1282)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 383)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 131)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 383)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1283)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 408)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 138)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 408)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1290)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 409)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 139)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 409)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1291)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 410)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 140)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 410)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1292)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 222)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 78)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 222)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1230)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 223)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 79)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 223)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1231)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 224)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 80)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 224)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1232)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 249)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 87)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 249)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1239)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 250)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 88)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 250)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1240)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 251)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 89)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 251)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1241)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 276)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 96)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 276)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1248)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 277)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 97)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 277)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1249)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 278)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 98)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 278)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1250)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 303)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 105)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 303)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1257)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 304)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 106)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 304)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1258)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 305)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 107)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 305)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1259)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 330)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 114)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 330)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1266)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 331)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 115)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 331)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1267)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 332)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 116)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 332)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1268)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 357)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 123)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 357)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1275)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 358)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 124)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 358)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1276)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 359)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 125)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 359)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1277)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 384)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 132)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 384)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1284)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 385)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 133)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 385)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1285)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 386)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 134)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 386)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1286)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 411)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 141)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 411)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1293)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 412)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 142)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 412)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1294)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 413)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 143)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3) + 413)] * kernel_shared[(((((int)threadIdx.x) / 7) * 144) + 1295)]));
      }
      compute[((((((int)blockIdx.x) / 7) * 784) + (((int)threadIdx.x) * 7)) + (((int)blockIdx.x) % 7))] = max((conv2d_nchw[0] + bias[(((((int)blockIdx.x) / 7) * 16) + (((int)threadIdx.x) / 7))]), 0.000000e+00f);
      compute[(((((((int)blockIdx.x) / 7) * 784) + (((int)threadIdx.x) * 7)) + (((int)blockIdx.x) % 7)) + 392)] = max((conv2d_nchw[1] + bias[((((((int)blockIdx.x) / 7) * 16) + (((int)threadIdx.x) / 7)) + 8)]), 0.000000e+00f);
    }






.. GENERATED FROM PYTHON SOURCE LINES 187-191

A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.

.. GENERATED FROM PYTHON SOURCE LINES 191-213

.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resume search:
    /venv/apache-tvm-py3.7/lib/python3.7/site-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  7.032 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
