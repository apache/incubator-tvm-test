
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.

.. GENERATED FROM PYTHON SOURCE LINES 39-48

.. code-block:: default



    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python








.. GENERATED FROM PYTHON SOURCE LINES 54-59

Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.

.. GENERATED FROM PYTHON SOURCE LINES 59-71

.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]









.. GENERATED FROM PYTHON SOURCE LINES 72-75

Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.

.. GENERATED FROM PYTHON SOURCE LINES 75-88

.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)





.. GENERATED FROM PYTHON SOURCE LINES 89-106

Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the main process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.

.. GENERATED FROM PYTHON SOURCE LINES 106-116

.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Get devices for measurement successfully!




.. GENERATED FROM PYTHON SOURCE LINES 117-123

Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.

.. GENERATED FROM PYTHON SOURCE LINES 123-132

.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    .T





.. GENERATED FROM PYTHON SOURCE LINES 133-136

We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.

.. GENERATED FROM PYTHON SOURCE LINES 136-140

.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Lowered TIR:
    @main = primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {data: Buffer(data_2: Pointer(float32), float32, [1, 512, 7, 7], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [512, 512, 3, 3], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [1, 512, 1, 1], []),
                 compute: Buffer(compute_2: Pointer(float32), float32, [1, 512, 7, 7], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 56;
      allocate(conv2d_nchw: Pointer(local float32), float32, [8]), storage_scope = local;
      allocate(pad_temp.shared: Pointer(shared float32), float32, [168]), storage_scope = shared;
      allocate(kernel.shared: Pointer(shared float32), float32, [1536]), storage_scope = shared;
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
        conv2d_nchw_1: Buffer(conv2d_nchw, float32, [16], [], scope="local", align=16)[0] = 0f32
        conv2d_nchw_1[4] = 0f32
        conv2d_nchw_1[1] = 0f32
        conv2d_nchw_1[5] = 0f32
        conv2d_nchw_1[2] = 0f32
        conv2d_nchw_1[6] = 0f32
        conv2d_nchw_1[3] = 0f32
        conv2d_nchw_1[7] = 0f32
        for (rc.outer.outer: int32, 0, 64) {
          let cse_var_2: int32 = (rc.outer.outer*392)
          let cse_var_1: int32 = (rc.outer.outer*72)
           {
            attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
            pad_temp.shared_1: Buffer(pad_temp.shared, float32, [168], [], scope="shared")[threadIdx.x_1] = @tir.if_then_else((((1 <= (floordiv(floormod(threadIdx.x_1, 21), 7) + floormod(blockIdx.x, 7))) && ((floordiv(floormod(threadIdx.x_1, 21), 7) + floormod(blockIdx.x, 7)) < 8)) && (1 <= floormod(threadIdx.x_1, 7))), data_3: Buffer(data_2, float32, [25088], [])[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(blockIdx.x, 7)*7)) + floormod(threadIdx.x_1, 21)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
            pad_temp.shared_1[(threadIdx.x_1 + 56)] = @tir.if_then_else((((1 <= (floormod(blockIdx.x, 7) + floormod((floordiv(threadIdx.x_1, 7) + 2), 3))) && ((floormod(blockIdx.x, 7) + floormod((floordiv(threadIdx.x_1, 7) + 2), 3)) < 8)) && (1 <= floormod(threadIdx.x_1, 7))), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 56), 21)*49)) + (floormod(blockIdx.x, 7)*7)) + (floormod((floordiv(threadIdx.x_1, 7) + 2), 3)*7)) + floormod(threadIdx.x_1, 7)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
            pad_temp.shared_1[(threadIdx.x_1 + 112)] = @tir.if_then_else((((1 <= (floormod(blockIdx.x, 7) + floormod((floordiv(threadIdx.x_1, 7) + 1), 3))) && ((floormod(blockIdx.x, 7) + floormod((floordiv(threadIdx.x_1, 7) + 1), 3)) < 8)) && (1 <= floormod(threadIdx.x_1, 7))), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 112), 21)*49)) + (floormod(blockIdx.x, 7)*7)) + (floormod((floordiv(threadIdx.x_1, 7) + 1), 3)*7)) + floormod(threadIdx.x_1, 7)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1: Buffer(kernel.shared, float32, [1536], [], scope="shared")[(threadIdx.x_2*2)] = kernel_3: Buffer(kernel_2, float32, [2359296], [])[((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6))]
              kernel.shared_1[((threadIdx.x_2*2) + 1)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 3)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 112)] = kernel_3[((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 56), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 16), 24)*3))]
              kernel.shared_1[((threadIdx.x_2*2) + 113)] = kernel_3[((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 56), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 17), 24)*3))]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 224)] = kernel_3[((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 112), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 8), 24)*3))]
              kernel.shared_1[((threadIdx.x_2*2) + 225)] = kernel_3[((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 112), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 9), 24)*3))]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 336)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 64512)]
              kernel.shared_1[((threadIdx.x_2*2) + 337)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 64515)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 448)] = kernel_3[((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 224), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 16), 24)*3))]
              kernel.shared_1[((threadIdx.x_2*2) + 449)] = kernel_3[((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 224), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 17), 24)*3))]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 560)] = kernel_3[((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 280), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 8), 24)*3))]
              kernel.shared_1[((threadIdx.x_2*2) + 561)] = kernel_3[((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 280), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 9), 24)*3))]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 672)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 129024)]
              kernel.shared_1[((threadIdx.x_2*2) + 673)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 129027)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 784)] = kernel_3[((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 392), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 16), 24)*3))]
              kernel.shared_1[((threadIdx.x_2*2) + 785)] = kernel_3[((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 392), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 17), 24)*3))]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 896)] = kernel_3[((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 448), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 8), 24)*3))]
              kernel.shared_1[((threadIdx.x_2*2) + 897)] = kernel_3[((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 448), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 9), 24)*3))]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 1008)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 193536)]
              kernel.shared_1[((threadIdx.x_2*2) + 1009)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 193539)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 1120)] = kernel_3[((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 560), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 16), 24)*3))]
              kernel.shared_1[((threadIdx.x_2*2) + 1121)] = kernel_3[((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 560), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 17), 24)*3))]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 1232)] = kernel_3[((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 616), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 8), 24)*3))]
              kernel.shared_1[((threadIdx.x_2*2) + 1233)] = kernel_3[((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 616), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 9), 24)*3))]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 1344)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 258048)]
              kernel.shared_1[((threadIdx.x_2*2) + 1345)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 258051)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              if @tir.likely((threadIdx.x_2 < 40), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*2) + 1456)] = kernel_3[((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 728), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 16), 24)*3))]
              }
              if @tir.likely((threadIdx.x_2 < 40), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*2) + 1457)] = kernel_3[((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 728), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 17), 24)*3))]
              }
            }
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[(floordiv(threadIdx.x, 7)*96)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 768)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 24)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 792)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 48)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 816)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 72)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 840)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 3)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 771)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 27)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 795)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 51)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 819)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 75)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 843)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 1)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 769)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 25)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 793)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 49)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 817)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 73)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 841)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 4)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 772)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 28)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 796)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 52)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 820)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 76)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 844)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 2)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 770)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 26)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 794)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 50)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 818)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 74)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 842)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 5)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 773)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 29)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 797)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 53)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 821)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 77)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 845)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 6)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 774)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 30)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 798)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 54)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 822)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 78)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 846)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 9)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 777)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 33)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 801)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 57)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 825)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 81)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 849)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 7)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 775)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 31)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 799)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 55)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 823)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 79)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 847)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 10)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 778)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 34)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 802)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 58)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 826)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 82)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 850)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 8)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 776)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 32)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 800)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 56)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 824)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 80)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 848)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 11)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 779)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 35)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 803)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 59)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 827)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 83)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 851)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 12)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 780)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 36)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 804)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 60)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 828)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 84)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 852)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 15)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 783)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 39)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 807)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 63)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 831)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 87)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 855)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 13)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 781)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 37)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 805)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 61)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 829)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 85)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 853)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 16)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 784)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 40)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 808)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 64)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 832)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 88)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 856)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 14)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 782)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 38)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 806)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 62)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 830)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 86)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 854)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 17)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 785)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 41)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 809)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 65)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 833)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 89)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 857)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 18)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 786)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 42)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 810)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 66)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 834)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 90)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 858)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 21)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 789)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 45)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 813)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 69)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 837)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 93)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 861)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 19)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 787)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 43)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 811)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 67)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 835)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 91)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 859)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 22)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 790)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 46)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 814)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 70)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 838)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 94)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 862)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 20)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 788)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 44)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 812)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 68)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 836)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 92)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 860)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 23)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 791)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 47)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 815)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 71)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 839)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 95)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 863)]))
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
            pad_temp.shared_1[threadIdx.x_1] = @tir.if_then_else(((1 <= (floordiv(floormod(threadIdx.x_1, 21), 7) + floormod(blockIdx.x, 7))) && ((floordiv(floormod(threadIdx.x_1, 21), 7) + floormod(blockIdx.x, 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(blockIdx.x, 7)*7)) + floormod(threadIdx.x_1, 21)) - 7)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
            pad_temp.shared_1[(threadIdx.x_1 + 56)] = @tir.if_then_else(((1 <= (floormod(blockIdx.x, 7) + floormod((floordiv(threadIdx.x_1, 7) + 2), 3))) && ((floormod(blockIdx.x, 7) + floormod((floordiv(threadIdx.x_1, 7) + 2), 3)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 56), 21)*49)) + (floormod(blockIdx.x, 7)*7)) + (floormod((floordiv(threadIdx.x_1, 7) + 2), 3)*7)) + floormod(threadIdx.x_1, 7)) - 7)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
            pad_temp.shared_1[(threadIdx.x_1 + 112)] = @tir.if_then_else(((1 <= (floormod(blockIdx.x, 7) + floormod((floordiv(threadIdx.x_1, 7) + 1), 3))) && ((floormod(blockIdx.x, 7) + floormod((floordiv(threadIdx.x_1, 7) + 1), 3)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 112), 21)*49)) + (floormod(blockIdx.x, 7)*7)) + (floormod((floordiv(threadIdx.x_1, 7) + 1), 3)*7)) + floormod(threadIdx.x_1, 7)) - 7)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[(threadIdx.x_2*2)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 1)]
              kernel.shared_1[((threadIdx.x_2*2) + 1)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 4)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 112)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 56), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 16), 24)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*2) + 113)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 56), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 17), 24)*3)) + 1)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 224)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 112), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 8), 24)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*2) + 225)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 112), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 9), 24)*3)) + 1)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 336)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 64513)]
              kernel.shared_1[((threadIdx.x_2*2) + 337)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 64516)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 448)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 224), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 16), 24)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*2) + 449)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 224), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 17), 24)*3)) + 1)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 560)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 280), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 8), 24)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*2) + 561)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 280), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 9), 24)*3)) + 1)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 672)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 129025)]
              kernel.shared_1[((threadIdx.x_2*2) + 673)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 129028)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 784)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 392), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 16), 24)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*2) + 785)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 392), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 17), 24)*3)) + 1)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 896)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 448), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 8), 24)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*2) + 897)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 448), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 9), 24)*3)) + 1)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 1008)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 193537)]
              kernel.shared_1[((threadIdx.x_2*2) + 1009)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 193540)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 1120)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 560), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 16), 24)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*2) + 1121)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 560), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 17), 24)*3)) + 1)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 1232)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 616), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 8), 24)*3)) + 1)]
              kernel.shared_1[((threadIdx.x_2*2) + 1233)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 616), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 9), 24)*3)) + 1)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 1344)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 258049)]
              kernel.shared_1[((threadIdx.x_2*2) + 1345)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 258052)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              if @tir.likely((threadIdx.x_2 < 40), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*2) + 1456)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 728), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 16), 24)*3)) + 1)]
              }
              if @tir.likely((threadIdx.x_2 < 40), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*2) + 1457)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 728), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 17), 24)*3)) + 1)]
              }
            }
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[(floordiv(threadIdx.x, 7)*96)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 768)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 24)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 792)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 48)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 816)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 72)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 840)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 3)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 771)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 27)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 795)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 51)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 819)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 75)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 843)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 1)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 769)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 25)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 793)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 49)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 817)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 73)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 841)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 4)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 772)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 28)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 796)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 52)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 820)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 76)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 844)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 2)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 770)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 26)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 794)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 50)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 818)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 74)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 842)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 5)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 773)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 29)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 797)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 53)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 821)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 77)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 845)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 6)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 774)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 30)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 798)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 54)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 822)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 78)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 846)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 9)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 777)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 33)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 801)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 57)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 825)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 81)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 849)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 7)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 775)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 31)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 799)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 55)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 823)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 79)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 847)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 10)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 778)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 34)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 802)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 58)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 826)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 82)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 850)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 8)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 776)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 32)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 800)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 56)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 824)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 80)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 848)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 11)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 779)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 35)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 803)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 59)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 827)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 83)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 851)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 12)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 780)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 36)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 804)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 60)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 828)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 84)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 852)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 15)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 783)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 39)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 807)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 63)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 831)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 87)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 855)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 13)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 781)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 37)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 805)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 61)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 829)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 85)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 853)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 16)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 784)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 40)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 808)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 64)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 832)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 88)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 856)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 14)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 782)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 38)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 806)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 62)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 830)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 86)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 854)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 17)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 785)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 41)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 809)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 65)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 833)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 89)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 857)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 18)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 786)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 42)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 810)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 66)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 834)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 90)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 858)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 21)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 789)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 45)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 813)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 69)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 837)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 93)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 861)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 19)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 787)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 43)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 811)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 67)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 835)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 91)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 859)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 22)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 790)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 46)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 814)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 70)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 838)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 94)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 862)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 20)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 788)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 44)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 812)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 68)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 836)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 92)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 860)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 23)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 791)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 47)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 815)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 71)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 839)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 95)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 863)]))
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
            pad_temp.shared_1[threadIdx.x_1] = @tir.if_then_else((((1 <= (floordiv(floormod(threadIdx.x_1, 21), 7) + floormod(blockIdx.x, 7))) && ((floordiv(floormod(threadIdx.x_1, 21), 7) + floormod(blockIdx.x, 7)) < 8)) && (floormod(threadIdx.x_1, 7) < 6)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(blockIdx.x, 7)*7)) + floormod(threadIdx.x_1, 21)) - 6)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
            pad_temp.shared_1[(threadIdx.x_1 + 56)] = @tir.if_then_else((((1 <= (floormod(blockIdx.x, 7) + floormod((floordiv(threadIdx.x_1, 7) + 2), 3))) && ((floormod(blockIdx.x, 7) + floormod((floordiv(threadIdx.x_1, 7) + 2), 3)) < 8)) && (floormod(threadIdx.x_1, 7) < 6)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 56), 21)*49)) + (floormod(blockIdx.x, 7)*7)) + (floormod((floordiv(threadIdx.x_1, 7) + 2), 3)*7)) + floormod(threadIdx.x_1, 7)) - 6)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
            pad_temp.shared_1[(threadIdx.x_1 + 112)] = @tir.if_then_else((((1 <= (floormod(blockIdx.x, 7) + floormod((floordiv(threadIdx.x_1, 7) + 1), 3))) && ((floormod(blockIdx.x, 7) + floormod((floordiv(threadIdx.x_1, 7) + 1), 3)) < 8)) && (floormod(threadIdx.x_1, 7) < 6)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 112), 21)*49)) + (floormod(blockIdx.x, 7)*7)) + (floormod((floordiv(threadIdx.x_1, 7) + 1), 3)*7)) + floormod(threadIdx.x_1, 7)) - 6)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[(threadIdx.x_2*2)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 2)]
              kernel.shared_1[((threadIdx.x_2*2) + 1)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 5)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 112)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 56), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 16), 24)*3)) + 2)]
              kernel.shared_1[((threadIdx.x_2*2) + 113)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 56), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 17), 24)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 224)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 112), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 8), 24)*3)) + 2)]
              kernel.shared_1[((threadIdx.x_2*2) + 225)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 112), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 9), 24)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 336)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 64514)]
              kernel.shared_1[((threadIdx.x_2*2) + 337)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 64517)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 448)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 224), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 16), 24)*3)) + 2)]
              kernel.shared_1[((threadIdx.x_2*2) + 449)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 224), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 17), 24)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 560)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 280), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 8), 24)*3)) + 2)]
              kernel.shared_1[((threadIdx.x_2*2) + 561)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 280), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 9), 24)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 672)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 129026)]
              kernel.shared_1[((threadIdx.x_2*2) + 673)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 129029)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 784)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 392), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 16), 24)*3)) + 2)]
              kernel.shared_1[((threadIdx.x_2*2) + 785)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 392), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 17), 24)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 896)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 448), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 8), 24)*3)) + 2)]
              kernel.shared_1[((threadIdx.x_2*2) + 897)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 448), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 9), 24)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 1008)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 193538)]
              kernel.shared_1[((threadIdx.x_2*2) + 1009)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 193541)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 1120)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 560), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 16), 24)*3)) + 2)]
              kernel.shared_1[((threadIdx.x_2*2) + 1121)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 560), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 17), 24)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 1232)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 616), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 8), 24)*3)) + 2)]
              kernel.shared_1[((threadIdx.x_2*2) + 1233)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 616), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 9), 24)*3)) + 2)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              kernel.shared_1[((threadIdx.x_2*2) + 1344)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 258050)]
              kernel.shared_1[((threadIdx.x_2*2) + 1345)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv(threadIdx.x_2, 12)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 12)*6)) + 258053)]
            }
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
              if @tir.likely((threadIdx.x_2 < 40), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*2) + 1456)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 728), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 16), 24)*3)) + 2)]
              }
              if @tir.likely((threadIdx.x_2 < 40), dtype=bool) {
                kernel.shared_1[((threadIdx.x_2*2) + 1457)] = kernel_3[(((((floordiv(blockIdx.x, 7)*294912) + (floordiv((threadIdx.x_2 + 728), 12)*4608)) + cse_var_1) + (floormod(((threadIdx.x_2*2) + 17), 24)*3)) + 2)]
              }
            }
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[(floordiv(threadIdx.x, 7)*96)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 768)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 24)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 792)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 48)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 816)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 72)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[floormod(threadIdx.x, 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 840)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 3)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 771)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 27)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 795)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 51)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 819)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 75)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 843)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 1)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 769)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 25)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 793)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 49)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 817)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 73)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 841)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 4)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 772)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 28)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 796)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 52)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 820)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 76)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 28)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 844)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 2)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 770)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 26)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 794)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 50)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 818)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 74)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 842)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 5)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 773)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 29)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 797)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 53)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 821)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 77)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 35)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 845)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 6)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 774)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 30)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 798)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 54)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 822)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 78)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 42)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 846)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 9)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 777)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 33)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 801)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 57)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 825)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 81)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 849)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 7)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 775)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 31)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 799)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 55)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 823)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 79)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 49)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 847)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 10)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 778)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 34)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 802)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 58)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 826)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 82)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 850)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 8)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 776)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 32)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 800)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 56)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 824)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 80)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 56)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 848)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 11)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 779)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 35)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 803)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 59)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 827)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 83)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 851)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 12)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 780)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 36)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 804)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 60)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 828)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 84)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 852)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 15)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 783)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 39)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 807)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 63)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 831)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 87)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 855)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 13)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 781)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 37)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 805)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 61)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 829)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 85)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 853)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 16)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 784)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 40)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 808)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 64)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 832)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 88)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 112)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 856)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 14)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 782)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 38)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 806)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 62)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 830)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 86)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 854)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 17)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 785)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 41)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 809)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 65)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 833)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 89)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 119)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 857)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 18)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 786)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 42)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 810)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 66)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 834)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 90)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 858)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 21)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 789)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 45)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 813)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 69)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 837)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 93)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 147)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 861)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 19)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 787)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 43)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 811)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 67)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 835)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 91)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 859)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 22)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 790)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 46)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 814)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 70)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 838)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 94)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 154)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 862)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 20)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 788)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 44)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 812)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 68)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 836)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 92)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 860)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 23)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 791)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 47)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 815)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 71)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 839)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 95)]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(floormod(threadIdx.x, 7) + 161)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*96) + 863)]))
          }
        }
        for (i1.inner: int32, 0, 4) {
          compute_3: Buffer(compute_2, float32, [25088], [])[(((((floordiv(blockIdx.x, 7)*3136) + (floordiv(threadIdx.x, 7)*196)) + (i1.inner*49)) + (floormod(blockIdx.x, 7)*7)) + floormod(threadIdx.x, 7))] = max((conv2d_nchw_1[i1.inner] + bias_3: Buffer(bias_2, float32, [512], [])[(((floordiv(blockIdx.x, 7)*64) + (floordiv(threadIdx.x, 7)*4)) + i1.inner)]), 0f32)
          compute_3[((((((floordiv(blockIdx.x, 7)*3136) + (floordiv(threadIdx.x, 7)*196)) + (i1.inner*49)) + (floormod(blockIdx.x, 7)*7)) + floormod(threadIdx.x, 7)) + 1568)] = max((conv2d_nchw_1[(i1.inner + 4)] + bias_3[((((floordiv(blockIdx.x, 7)*64) + (floordiv(threadIdx.x, 7)*4)) + i1.inner) + 32)]), 0f32)
        }
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 141-144

Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.

.. GENERATED FROM PYTHON SOURCE LINES 144-171

.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Execution time of this operator: 0.528 ms




.. GENERATED FROM PYTHON SOURCE LINES 172-177

Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

.. GENERATED FROM PYTHON SOURCE LINES 179-182

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.

.. GENERATED FROM PYTHON SOURCE LINES 182-189

.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=4)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=8)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=2)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=7)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=2)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=4)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=1)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=3)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=1)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=1)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=4)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=8)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=2)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=1)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=7)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=2)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=56)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=56)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 1024)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(56) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[8];
      __shared__ float pad_temp_shared[168];
      __shared__ float kernel_shared[1536];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[4] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[5] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[6] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      conv2d_nchw[7] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 64; ++rc_outer_outer) {
        __syncthreads();
        pad_temp_shared[((int)threadIdx.x)] = ((((1 <= (((((int)threadIdx.x) % 21) / 7) + (((int)blockIdx.x) % 7))) && ((((((int)threadIdx.x) % 21) / 7) + (((int)blockIdx.x) % 7)) < 8)) && (1 <= (((int)threadIdx.x) % 7))) ? data[(((((rc_outer_outer * 392) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)blockIdx.x) % 7) * 7)) + (((int)threadIdx.x) % 21)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 56)] = ((((1 <= ((((int)blockIdx.x) % 7) + (((((int)threadIdx.x) / 7) + 2) % 3))) && (((((int)blockIdx.x) % 7) + (((((int)threadIdx.x) / 7) + 2) % 3)) < 8)) && (1 <= (((int)threadIdx.x) % 7))) ? data[((((((rc_outer_outer * 392) + (((((int)threadIdx.x) + 56) / 21) * 49)) + ((((int)blockIdx.x) % 7) * 7)) + ((((((int)threadIdx.x) / 7) + 2) % 3) * 7)) + (((int)threadIdx.x) % 7)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 112)] = ((((1 <= ((((int)blockIdx.x) % 7) + (((((int)threadIdx.x) / 7) + 1) % 3))) && (((((int)blockIdx.x) % 7) + (((((int)threadIdx.x) / 7) + 1) % 3)) < 8)) && (1 <= (((int)threadIdx.x) % 7))) ? data[((((((rc_outer_outer * 392) + (((((int)threadIdx.x) + 112) / 21) * 49)) + ((((int)blockIdx.x) % 7) * 7)) + ((((((int)threadIdx.x) / 7) + 1) % 3) * 7)) + (((int)threadIdx.x) % 7)) - 8)] : 0.000000e+00f);
        kernel_shared[(((int)threadIdx.x) * 2)] = kernel[(((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6))];
        kernel_shared[((((int)threadIdx.x) * 2) + 1)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 3)];
        kernel_shared[((((int)threadIdx.x) * 2) + 112)] = kernel[(((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 56) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 16) % 24) * 3))];
        kernel_shared[((((int)threadIdx.x) * 2) + 113)] = kernel[(((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 56) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 17) % 24) * 3))];
        kernel_shared[((((int)threadIdx.x) * 2) + 224)] = kernel[(((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 112) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 8) % 24) * 3))];
        kernel_shared[((((int)threadIdx.x) * 2) + 225)] = kernel[(((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 112) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 9) % 24) * 3))];
        kernel_shared[((((int)threadIdx.x) * 2) + 336)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 64512)];
        kernel_shared[((((int)threadIdx.x) * 2) + 337)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 64515)];
        kernel_shared[((((int)threadIdx.x) * 2) + 448)] = kernel[(((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 224) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 16) % 24) * 3))];
        kernel_shared[((((int)threadIdx.x) * 2) + 449)] = kernel[(((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 224) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 17) % 24) * 3))];
        kernel_shared[((((int)threadIdx.x) * 2) + 560)] = kernel[(((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 280) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 8) % 24) * 3))];
        kernel_shared[((((int)threadIdx.x) * 2) + 561)] = kernel[(((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 280) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 9) % 24) * 3))];
        kernel_shared[((((int)threadIdx.x) * 2) + 672)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 129024)];
        kernel_shared[((((int)threadIdx.x) * 2) + 673)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 129027)];
        kernel_shared[((((int)threadIdx.x) * 2) + 784)] = kernel[(((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 392) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 16) % 24) * 3))];
        kernel_shared[((((int)threadIdx.x) * 2) + 785)] = kernel[(((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 392) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 17) % 24) * 3))];
        kernel_shared[((((int)threadIdx.x) * 2) + 896)] = kernel[(((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 448) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 8) % 24) * 3))];
        kernel_shared[((((int)threadIdx.x) * 2) + 897)] = kernel[(((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 448) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 9) % 24) * 3))];
        kernel_shared[((((int)threadIdx.x) * 2) + 1008)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 193536)];
        kernel_shared[((((int)threadIdx.x) * 2) + 1009)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 193539)];
        kernel_shared[((((int)threadIdx.x) * 2) + 1120)] = kernel[(((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 560) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 16) % 24) * 3))];
        kernel_shared[((((int)threadIdx.x) * 2) + 1121)] = kernel[(((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 560) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 17) % 24) * 3))];
        kernel_shared[((((int)threadIdx.x) * 2) + 1232)] = kernel[(((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 616) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 8) % 24) * 3))];
        kernel_shared[((((int)threadIdx.x) * 2) + 1233)] = kernel[(((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 616) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 9) % 24) * 3))];
        kernel_shared[((((int)threadIdx.x) * 2) + 1344)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 258048)];
        kernel_shared[((((int)threadIdx.x) * 2) + 1345)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 258051)];
        if (((int)threadIdx.x) < 40) {
          kernel_shared[((((int)threadIdx.x) * 2) + 1456)] = kernel[(((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 728) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 16) % 24) * 3))];
        }
        if (((int)threadIdx.x) < 40) {
          kernel_shared[((((int)threadIdx.x) * 2) + 1457)] = kernel[(((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 728) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 17) % 24) * 3))];
        }
        __syncthreads();
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[((((int)threadIdx.x) / 7) * 96)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 768)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 24)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 792)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 48)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 816)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 72)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 840)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 3)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 771)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 27)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 795)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 51)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 819)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 75)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 843)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 1)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 769)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 25)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 793)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 49)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 817)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 73)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 841)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 4)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 772)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 28)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 796)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 52)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 820)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 76)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 844)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 2)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 770)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 26)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 794)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 50)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 818)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 74)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 842)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 5)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 773)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 29)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 797)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 53)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 821)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 77)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 845)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 6)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 774)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 30)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 798)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 54)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 822)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 78)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 846)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 9)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 777)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 33)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 801)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 57)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 825)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 81)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 849)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 7)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 775)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 31)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 799)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 55)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 823)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 79)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 847)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 10)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 778)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 34)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 802)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 58)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 826)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 82)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 850)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 8)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 776)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 32)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 800)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 56)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 824)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 80)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 848)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 11)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 779)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 35)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 803)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 59)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 827)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 83)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 851)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 12)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 780)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 36)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 804)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 60)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 828)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 84)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 852)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 15)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 783)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 39)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 807)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 63)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 831)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 87)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 855)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 13)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 781)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 37)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 805)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 61)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 829)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 85)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 853)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 16)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 784)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 40)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 808)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 64)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 832)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 88)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 856)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 14)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 782)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 38)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 806)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 62)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 830)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 86)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 854)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 17)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 785)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 41)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 809)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 65)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 833)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 89)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 857)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 18)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 786)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 42)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 810)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 66)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 834)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 90)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 858)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 21)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 789)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 45)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 813)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 69)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 837)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 93)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 861)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 19)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 787)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 43)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 811)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 67)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 835)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 91)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 859)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 22)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 790)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 46)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 814)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 70)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 838)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 94)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 862)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 20)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 788)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 44)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 812)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 68)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 836)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 92)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 860)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 23)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 791)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 47)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 815)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 71)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 839)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 95)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 863)]));
        __syncthreads();
        pad_temp_shared[((int)threadIdx.x)] = (((1 <= (((((int)threadIdx.x) % 21) / 7) + (((int)blockIdx.x) % 7))) && ((((((int)threadIdx.x) % 21) / 7) + (((int)blockIdx.x) % 7)) < 8)) ? data[(((((rc_outer_outer * 392) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)blockIdx.x) % 7) * 7)) + (((int)threadIdx.x) % 21)) - 7)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 56)] = (((1 <= ((((int)blockIdx.x) % 7) + (((((int)threadIdx.x) / 7) + 2) % 3))) && (((((int)blockIdx.x) % 7) + (((((int)threadIdx.x) / 7) + 2) % 3)) < 8)) ? data[((((((rc_outer_outer * 392) + (((((int)threadIdx.x) + 56) / 21) * 49)) + ((((int)blockIdx.x) % 7) * 7)) + ((((((int)threadIdx.x) / 7) + 2) % 3) * 7)) + (((int)threadIdx.x) % 7)) - 7)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 112)] = (((1 <= ((((int)blockIdx.x) % 7) + (((((int)threadIdx.x) / 7) + 1) % 3))) && (((((int)blockIdx.x) % 7) + (((((int)threadIdx.x) / 7) + 1) % 3)) < 8)) ? data[((((((rc_outer_outer * 392) + (((((int)threadIdx.x) + 112) / 21) * 49)) + ((((int)blockIdx.x) % 7) * 7)) + ((((((int)threadIdx.x) / 7) + 1) % 3) * 7)) + (((int)threadIdx.x) % 7)) - 7)] : 0.000000e+00f);
        kernel_shared[(((int)threadIdx.x) * 2)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 2) + 1)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 4)];
        kernel_shared[((((int)threadIdx.x) * 2) + 112)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 56) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 16) % 24) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 2) + 113)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 56) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 17) % 24) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 2) + 224)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 112) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 8) % 24) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 2) + 225)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 112) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 9) % 24) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 2) + 336)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 64513)];
        kernel_shared[((((int)threadIdx.x) * 2) + 337)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 64516)];
        kernel_shared[((((int)threadIdx.x) * 2) + 448)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 224) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 16) % 24) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 2) + 449)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 224) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 17) % 24) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 2) + 560)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 280) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 8) % 24) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 2) + 561)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 280) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 9) % 24) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 2) + 672)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 129025)];
        kernel_shared[((((int)threadIdx.x) * 2) + 673)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 129028)];
        kernel_shared[((((int)threadIdx.x) * 2) + 784)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 392) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 16) % 24) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 2) + 785)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 392) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 17) % 24) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 2) + 896)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 448) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 8) % 24) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 2) + 897)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 448) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 9) % 24) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 2) + 1008)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 193537)];
        kernel_shared[((((int)threadIdx.x) * 2) + 1009)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 193540)];
        kernel_shared[((((int)threadIdx.x) * 2) + 1120)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 560) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 16) % 24) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 2) + 1121)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 560) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 17) % 24) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 2) + 1232)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 616) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 8) % 24) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 2) + 1233)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 616) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 9) % 24) * 3)) + 1)];
        kernel_shared[((((int)threadIdx.x) * 2) + 1344)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 258049)];
        kernel_shared[((((int)threadIdx.x) * 2) + 1345)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 258052)];
        if (((int)threadIdx.x) < 40) {
          kernel_shared[((((int)threadIdx.x) * 2) + 1456)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 728) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 16) % 24) * 3)) + 1)];
        }
        if (((int)threadIdx.x) < 40) {
          kernel_shared[((((int)threadIdx.x) * 2) + 1457)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 728) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 17) % 24) * 3)) + 1)];
        }
        __syncthreads();
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[((((int)threadIdx.x) / 7) * 96)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 768)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 24)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 792)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 48)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 816)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 72)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 840)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 3)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 771)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 27)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 795)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 51)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 819)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 75)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 843)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 1)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 769)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 25)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 793)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 49)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 817)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 73)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 841)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 4)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 772)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 28)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 796)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 52)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 820)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 76)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 844)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 2)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 770)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 26)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 794)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 50)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 818)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 74)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 842)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 5)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 773)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 29)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 797)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 53)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 821)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 77)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 845)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 6)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 774)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 30)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 798)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 54)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 822)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 78)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 846)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 9)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 777)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 33)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 801)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 57)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 825)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 81)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 849)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 7)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 775)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 31)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 799)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 55)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 823)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 79)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 847)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 10)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 778)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 34)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 802)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 58)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 826)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 82)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 850)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 8)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 776)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 32)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 800)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 56)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 824)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 80)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 848)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 11)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 779)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 35)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 803)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 59)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 827)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 83)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 851)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 12)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 780)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 36)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 804)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 60)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 828)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 84)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 852)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 15)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 783)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 39)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 807)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 63)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 831)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 87)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 855)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 13)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 781)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 37)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 805)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 61)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 829)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 85)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 853)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 16)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 784)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 40)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 808)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 64)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 832)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 88)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 856)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 14)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 782)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 38)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 806)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 62)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 830)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 86)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 854)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 17)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 785)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 41)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 809)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 65)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 833)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 89)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 857)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 18)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 786)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 42)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 810)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 66)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 834)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 90)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 858)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 21)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 789)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 45)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 813)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 69)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 837)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 93)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 861)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 19)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 787)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 43)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 811)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 67)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 835)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 91)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 859)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 22)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 790)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 46)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 814)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 70)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 838)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 94)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 862)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 20)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 788)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 44)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 812)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 68)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 836)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 92)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 860)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 23)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 791)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 47)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 815)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 71)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 839)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 95)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 863)]));
        __syncthreads();
        pad_temp_shared[((int)threadIdx.x)] = ((((1 <= (((((int)threadIdx.x) % 21) / 7) + (((int)blockIdx.x) % 7))) && ((((((int)threadIdx.x) % 21) / 7) + (((int)blockIdx.x) % 7)) < 8)) && ((((int)threadIdx.x) % 7) < 6)) ? data[(((((rc_outer_outer * 392) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)blockIdx.x) % 7) * 7)) + (((int)threadIdx.x) % 21)) - 6)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 56)] = ((((1 <= ((((int)blockIdx.x) % 7) + (((((int)threadIdx.x) / 7) + 2) % 3))) && (((((int)blockIdx.x) % 7) + (((((int)threadIdx.x) / 7) + 2) % 3)) < 8)) && ((((int)threadIdx.x) % 7) < 6)) ? data[((((((rc_outer_outer * 392) + (((((int)threadIdx.x) + 56) / 21) * 49)) + ((((int)blockIdx.x) % 7) * 7)) + ((((((int)threadIdx.x) / 7) + 2) % 3) * 7)) + (((int)threadIdx.x) % 7)) - 6)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 112)] = ((((1 <= ((((int)blockIdx.x) % 7) + (((((int)threadIdx.x) / 7) + 1) % 3))) && (((((int)blockIdx.x) % 7) + (((((int)threadIdx.x) / 7) + 1) % 3)) < 8)) && ((((int)threadIdx.x) % 7) < 6)) ? data[((((((rc_outer_outer * 392) + (((((int)threadIdx.x) + 112) / 21) * 49)) + ((((int)blockIdx.x) % 7) * 7)) + ((((((int)threadIdx.x) / 7) + 1) % 3) * 7)) + (((int)threadIdx.x) % 7)) - 6)] : 0.000000e+00f);
        kernel_shared[(((int)threadIdx.x) * 2)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 2) + 1)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 5)];
        kernel_shared[((((int)threadIdx.x) * 2) + 112)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 56) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 16) % 24) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 2) + 113)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 56) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 17) % 24) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 2) + 224)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 112) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 8) % 24) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 2) + 225)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 112) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 9) % 24) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 2) + 336)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 64514)];
        kernel_shared[((((int)threadIdx.x) * 2) + 337)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 64517)];
        kernel_shared[((((int)threadIdx.x) * 2) + 448)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 224) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 16) % 24) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 2) + 449)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 224) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 17) % 24) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 2) + 560)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 280) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 8) % 24) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 2) + 561)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 280) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 9) % 24) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 2) + 672)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 129026)];
        kernel_shared[((((int)threadIdx.x) * 2) + 673)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 129029)];
        kernel_shared[((((int)threadIdx.x) * 2) + 784)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 392) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 16) % 24) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 2) + 785)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 392) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 17) % 24) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 2) + 896)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 448) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 8) % 24) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 2) + 897)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 448) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 9) % 24) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 2) + 1008)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 193538)];
        kernel_shared[((((int)threadIdx.x) * 2) + 1009)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 193541)];
        kernel_shared[((((int)threadIdx.x) * 2) + 1120)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 560) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 16) % 24) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 2) + 1121)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 560) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 17) % 24) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 2) + 1232)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 616) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 8) % 24) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 2) + 1233)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 616) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 9) % 24) * 3)) + 2)];
        kernel_shared[((((int)threadIdx.x) * 2) + 1344)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 258050)];
        kernel_shared[((((int)threadIdx.x) * 2) + 1345)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((int)threadIdx.x) % 12) * 6)) + 258053)];
        if (((int)threadIdx.x) < 40) {
          kernel_shared[((((int)threadIdx.x) * 2) + 1456)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 728) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 16) % 24) * 3)) + 2)];
        }
        if (((int)threadIdx.x) < 40) {
          kernel_shared[((((int)threadIdx.x) * 2) + 1457)] = kernel[((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 728) / 12) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) * 2) + 17) % 24) * 3)) + 2)];
        }
        __syncthreads();
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[((((int)threadIdx.x) / 7) * 96)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 768)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 24)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 792)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 48)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 816)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 72)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((int)threadIdx.x) % 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 840)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 3)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 771)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 27)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 795)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 51)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 819)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 75)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 843)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 1)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 769)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 25)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 793)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 49)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 817)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 73)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 841)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 4)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 772)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 28)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 796)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 52)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 820)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 76)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 28)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 844)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 2)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 770)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 26)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 794)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 50)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 818)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 74)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 842)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 5)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 773)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 29)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 797)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 53)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 821)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 77)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 35)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 845)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 6)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 774)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 30)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 798)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 54)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 822)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 78)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 42)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 846)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 9)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 777)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 33)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 801)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 57)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 825)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 81)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 63)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 849)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 7)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 775)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 31)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 799)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 55)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 823)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 79)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 49)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 847)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 10)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 778)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 34)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 802)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 58)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 826)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 82)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 70)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 850)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 8)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 776)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 32)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 800)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 56)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 824)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 80)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 56)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 848)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 11)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 779)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 35)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 803)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 59)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 827)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 83)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 77)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 851)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 12)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 780)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 36)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 804)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 60)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 828)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 84)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 852)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 15)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 783)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 39)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 807)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 63)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 831)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 87)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 855)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 13)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 781)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 37)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 805)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 61)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 829)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 85)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 853)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 16)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 784)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 40)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 808)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 64)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 832)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 88)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 112)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 856)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 14)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 782)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 38)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 806)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 62)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 830)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 86)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 854)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 17)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 785)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 41)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 809)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 65)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 833)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 89)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 119)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 857)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 18)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 786)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 42)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 810)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 66)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 834)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 90)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 126)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 858)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 21)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 789)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 45)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 813)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 69)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 837)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 93)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 147)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 861)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 19)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 787)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 43)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 811)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 67)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 835)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 91)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 133)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 859)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 22)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 790)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 46)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 814)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 70)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 838)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 94)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 154)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 862)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 20)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 788)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 44)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 812)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 68)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 836)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 92)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 140)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 860)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 23)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 791)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 47)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 815)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 71)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 839)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 95)]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((int)threadIdx.x) % 7) + 161)] * kernel_shared[(((((int)threadIdx.x) / 7) * 96) + 863)]));
      }
      for (int i1_inner = 0; i1_inner < 4; ++i1_inner) {
        compute[((((((((int)blockIdx.x) / 7) * 3136) + ((((int)threadIdx.x) / 7) * 196)) + (i1_inner * 49)) + ((((int)blockIdx.x) % 7) * 7)) + (((int)threadIdx.x) % 7))] = max((conv2d_nchw[i1_inner] + bias[((((((int)blockIdx.x) / 7) * 64) + ((((int)threadIdx.x) / 7) * 4)) + i1_inner)]), 0.000000e+00f);
        compute[(((((((((int)blockIdx.x) / 7) * 3136) + ((((int)threadIdx.x) / 7) * 196)) + (i1_inner * 49)) + ((((int)blockIdx.x) % 7) * 7)) + (((int)threadIdx.x) % 7)) + 1568)] = max((conv2d_nchw[(i1_inner + 4)] + bias[(((((((int)blockIdx.x) / 7) * 64) + ((((int)threadIdx.x) / 7) * 4)) + i1_inner) + 32)]), 0.000000e+00f);
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 190-194

A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.

.. GENERATED FROM PYTHON SOURCE LINES 194-216

.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resume search:
    /venv/apache-tvm-py3.7/lib/python3.7/site-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  42.880 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
