
.. DO NOT EDIT. THIS FILE WAS AUTOMATICALLY GENERATED BY
.. TVM'S MONKEY-PATCHED VERSION OF SPHINX-GALLERY. TO MAKE
.. CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.py"

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        This tutorial can be used interactively with Google Colab! You can also click
        :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>` to run the Jupyter notebook locally.

        .. image:: https://raw.githubusercontent.com/tlc-pack/web-data/main/images/utilities/colab_button.svg
            :align: center
            :target: https://colab.research.google.com/github/apache/tvm-site/blob/asf-site/docs/_downloads/5f1f7bd7d90710fd404f7bcdc4965622/tune_conv2d_layer_cuda.ipynb
            :width: 300px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.

.. GENERATED FROM PYTHON SOURCE LINES 39-47

.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python








.. GENERATED FROM PYTHON SOURCE LINES 51-56

Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.

.. GENERATED FROM PYTHON SOURCE LINES 56-68

.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]









.. GENERATED FROM PYTHON SOURCE LINES 69-72

Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.

.. GENERATED FROM PYTHON SOURCE LINES 72-85

.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)





.. GENERATED FROM PYTHON SOURCE LINES 86-103

Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the main process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.

.. GENERATED FROM PYTHON SOURCE LINES 103-113

.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Get devices for measurement successfully!




.. GENERATED FROM PYTHON SOURCE LINES 114-120

Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.

.. GENERATED FROM PYTHON SOURCE LINES 120-129

.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx








.. GENERATED FROM PYTHON SOURCE LINES 130-133

We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.

.. GENERATED FROM PYTHON SOURCE LINES 133-137

.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Lowered TIR:
    @I.ir_module
    class Module:
        @T.prim_func
        def main(data: T.Buffer((1, 512, 7, 7), "float32"), kernel: T.Buffer((512, 512, 3, 3), "float32"), bias: T.Buffer((1, 512, 1, 1), "float32"), compute: T.Buffer((1, 512, 7, 7), "float32")):
            T.func_attr({"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True})
            blockIdx_x = T.env_thread("blockIdx.x")
            T.launch_thread(blockIdx_x, 16)
            conv2d_nchw = T.allocate([8], "float32", "local")
            pad_temp_shared = T.allocate([4032], "float32", "shared")
            kernel_shared = T.allocate([6144], "float32", "shared")
            threadIdx_x = T.env_thread("threadIdx.x")
            T.launch_thread(threadIdx_x, 196)
            conv2d_nchw_1 = T.buffer_decl((16,), data=conv2d_nchw, scope="local", align=16)
            conv2d_nchw_1[0] = T.float32(0)
            conv2d_nchw_1[4] = T.float32(0)
            conv2d_nchw_1[1] = T.float32(0)
            conv2d_nchw_1[5] = T.float32(0)
            conv2d_nchw_1[2] = T.float32(0)
            conv2d_nchw_1[6] = T.float32(0)
            conv2d_nchw_1[3] = T.float32(0)
            conv2d_nchw_1[7] = T.float32(0)
            for rc_outer_outer, ry_outer_outer in T.grid(8, 3):
                cse_var_2: T.int32 = rc_outer_outer * 576
                cse_var_1: T.int32 = ry_outer_outer * 3
                threadIdx_x_1 = T.env_thread("threadIdx.x")
                pad_temp_shared_1 = T.buffer_decl((4032,), data=pad_temp_shared, scope="shared")
                with T.launch_thread(threadIdx_x_1, 196):
                    data_1 = T.buffer_decl((25088,), data=data.data)
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32] = T.if_then_else(1 <= threadIdx_x_1 * 32 % 63 // 9 + ry_outer_outer and threadIdx_x_1 * 32 % 63 // 9 + ry_outer_outer < 8 and 1 <= threadIdx_x_1 * 5 % 9 and threadIdx_x_1 * 5 % 9 < 8, data_1[rc_outer_outer * 3136 + threadIdx_x_1 * 32 // 9 * 7 + ry_outer_outer * 7 + threadIdx_x_1 * 5 % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 1] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 1) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 1) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 1) % 9 and (threadIdx_x_1 * 5 + 1) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 1) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 1) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 2] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 2) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 2) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 2) % 9 and (threadIdx_x_1 * 5 + 2) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 2) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 2) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 3] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 3) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 3) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 3) % 9 and (threadIdx_x_1 * 5 + 3) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 3) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 3) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 4] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 4) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 4) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 4) % 9 and (threadIdx_x_1 * 5 + 4) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 4) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 4) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 5] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 5) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 5) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 5) % 9 and (threadIdx_x_1 * 5 + 5) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 5) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 5) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 6] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 6) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 6) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 6) % 9 and (threadIdx_x_1 * 5 + 6) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 6) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 6) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 7] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 7) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 7) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 7) % 9 and (threadIdx_x_1 * 5 + 7) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 7) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 7) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 8] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 8) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 8) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 8) % 9 and (threadIdx_x_1 * 5 + 8) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 8) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 8) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 9] = T.if_then_else(1 <= ry_outer_outer + (threadIdx_x_1 * 32 // 9 + 1) % 7 and ry_outer_outer + (threadIdx_x_1 * 32 // 9 + 1) % 7 < 8 and 1 <= threadIdx_x_1 * 5 % 9 and threadIdx_x_1 * 5 % 9 < 8, data_1[rc_outer_outer * 3136 + threadIdx_x_1 * 32 // 9 * 7 + ry_outer_outer * 7 + threadIdx_x_1 * 5 % 9 - 1], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 10] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 10) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 10) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 1) % 9 and (threadIdx_x_1 * 5 + 1) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 10) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 1) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 11] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 11) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 11) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 2) % 9 and (threadIdx_x_1 * 5 + 2) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 11) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 2) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 12] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 12) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 12) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 3) % 9 and (threadIdx_x_1 * 5 + 3) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 12) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 3) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 13] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 13) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 13) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 4) % 9 and (threadIdx_x_1 * 5 + 4) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 13) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 4) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 14] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 14) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 14) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 5) % 9 and (threadIdx_x_1 * 5 + 5) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 14) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 5) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 15] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 15) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 15) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 6) % 9 and (threadIdx_x_1 * 5 + 6) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 15) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 6) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 16] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 16) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 16) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 7) % 9 and (threadIdx_x_1 * 5 + 7) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 16) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 7) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 17] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 17) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 17) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 8) % 9 and (threadIdx_x_1 * 5 + 8) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 17) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 8) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 18] = T.if_then_else(1 <= ry_outer_outer + (threadIdx_x_1 * 32 // 9 + 2) % 7 and ry_outer_outer + (threadIdx_x_1 * 32 // 9 + 2) % 7 < 8 and 1 <= threadIdx_x_1 * 5 % 9 and threadIdx_x_1 * 5 % 9 < 8, data_1[rc_outer_outer * 3136 + threadIdx_x_1 * 32 // 9 * 7 + ry_outer_outer * 7 + threadIdx_x_1 * 5 % 9 + 6], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 19] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 19) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 19) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 1) % 9 and (threadIdx_x_1 * 5 + 1) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 19) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 1) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 20] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 20) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 20) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 2) % 9 and (threadIdx_x_1 * 5 + 2) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 20) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 2) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 21] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 21) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 21) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 3) % 9 and (threadIdx_x_1 * 5 + 3) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 21) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 3) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 22] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 22) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 22) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 4) % 9 and (threadIdx_x_1 * 5 + 4) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 22) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 4) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 23] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 23) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 23) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 5) % 9 and (threadIdx_x_1 * 5 + 5) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 23) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 5) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 24] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 24) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 24) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 6) % 9 and (threadIdx_x_1 * 5 + 6) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 24) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 6) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 25] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 25) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 25) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 7) % 9 and (threadIdx_x_1 * 5 + 7) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 25) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 7) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 26] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 26) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 26) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 8) % 9 and (threadIdx_x_1 * 5 + 8) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 26) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 8) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 27] = T.if_then_else(1 <= ry_outer_outer + (threadIdx_x_1 * 32 // 9 + 3) % 7 and ry_outer_outer + (threadIdx_x_1 * 32 // 9 + 3) % 7 < 8 and 1 <= threadIdx_x_1 * 5 % 9 and threadIdx_x_1 * 5 % 9 < 8, data_1[rc_outer_outer * 3136 + threadIdx_x_1 * 32 // 9 * 7 + ry_outer_outer * 7 + threadIdx_x_1 * 5 % 9 + 13], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 28] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 28) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 28) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 1) % 9 and (threadIdx_x_1 * 5 + 1) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 28) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 1) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 29] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 29) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 29) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 2) % 9 and (threadIdx_x_1 * 5 + 2) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 29) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 2) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 30] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 30) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 30) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 3) % 9 and (threadIdx_x_1 * 5 + 3) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 30) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 3) % 9 - 8], T.float32(0))
                    if T.likely(threadIdx_x_1 < 126):
                        pad_temp_shared_1[threadIdx_x_1 * 32 + 31] = T.if_then_else(1 <= (threadIdx_x_1 * 32 + 31) % 63 // 9 + ry_outer_outer and (threadIdx_x_1 * 32 + 31) % 63 // 9 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 5 + 4) % 9 and (threadIdx_x_1 * 5 + 4) % 9 < 8, data_1[rc_outer_outer * 3136 + (threadIdx_x_1 * 32 + 31) // 9 * 7 + ry_outer_outer * 7 + (threadIdx_x_1 * 5 + 4) % 9 - 8], T.float32(0))
                threadIdx_x_2 = T.env_thread("threadIdx.x")
                kernel_shared_1 = T.buffer_decl((6144,), data=kernel_shared, scope="shared")
                kernel_1 = T.buffer_decl((2359296,), data=kernel.data)
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2] = kernel_1[blockIdx_x * 147456 + threadIdx_x_2 // 192 * 4608 + cse_var_2 + threadIdx_x_2 % 192 // 3 * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 196] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 196) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 + 4) % 192 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 392] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 392) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 + 8) % 192 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 588] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 588) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 // 3 + 4) % 64 * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 784] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 784) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 + 16) % 192 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 980] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 980) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 + 20) % 192 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 1176] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 1176) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 // 3 + 8) % 64 * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 1372] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 1372) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 + 28) % 192 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 1568] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 1568) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 + 32) % 192 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 1764] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 1764) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 // 3 + 12) % 64 * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 1960] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 1960) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 + 40) % 192 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 2156] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 2156) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 + 44) % 192 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 2352] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 2352) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 // 3 + 16) % 64 * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 2548] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 2548) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 + 52) % 192 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 2744] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 2744) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 + 56) % 192 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 2940] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 2940) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 // 3 + 20) % 64 * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 3136] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 3136) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 + 64) % 192 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 3332] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 3332) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 + 68) % 192 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 3528] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 3528) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 // 3 + 24) % 64 * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 3724] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 3724) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 + 76) % 192 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 3920] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 3920) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 + 80) % 192 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 4116] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 4116) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 // 3 + 28) % 64 * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 4312] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 4312) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 + 88) % 192 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 4508] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 4508) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 + 92) % 192 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 4704] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 4704) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 // 3 + 32) % 64 * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 4900] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 4900) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 + 100) % 192 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 5096] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 5096) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 + 104) % 192 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 5292] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 5292) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 // 3 + 36) % 64 * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 5488] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 5488) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 + 112) % 192 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 5684] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 5684) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 + 116) % 192 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    kernel_shared_1[threadIdx_x_2 + 5880] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 5880) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 // 3 + 40) % 64 * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 196):
                    if T.likely(threadIdx_x_2 < 68):
                        kernel_shared_1[threadIdx_x_2 + 6076] = kernel_1[blockIdx_x * 147456 + (threadIdx_x_2 + 6076) // 192 * 4608 + cse_var_2 + (threadIdx_x_2 + 124) // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                for rc_outer_inner in range(16):
                    conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12]
                    conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3072]
                    conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 63] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3]
                    conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 63] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3075]
                    conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 126] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 6]
                    conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 126] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3078]
                    conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 189] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 9]
                    conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 189] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3081]
                    conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 192]
                    conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3264]
                    conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 63] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 195]
                    conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 63] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3267]
                    conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 126] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 198]
                    conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 126] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3270]
                    conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 189] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 201]
                    conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 189] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3273]
                    conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 384]
                    conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3456]
                    conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 63] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 387]
                    conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 63] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3459]
                    conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 126] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 390]
                    conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 126] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3462]
                    conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 189] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 393]
                    conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 189] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3465]
                    conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 576]
                    conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3648]
                    conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 63] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 579]
                    conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 63] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3651]
                    conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 126] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 582]
                    conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 126] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3654]
                    conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 189] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 585]
                    conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 189] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3657]
                    conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 1] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 1]
                    conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 1] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3073]
                    conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 64] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 4]
                    conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 64] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3076]
                    conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 127] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 7]
                    conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 127] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3079]
                    conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 190] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 10]
                    conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 190] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3082]
                    conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 1] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 193]
                    conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 1] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3265]
                    conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 64] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 196]
                    conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 64] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3268]
                    conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 127] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 199]
                    conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 127] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3271]
                    conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 190] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 202]
                    conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 190] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3274]
                    conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 1] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 385]
                    conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 1] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3457]
                    conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 64] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 388]
                    conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 64] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3460]
                    conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 127] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 391]
                    conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 127] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3463]
                    conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 190] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 394]
                    conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 190] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3466]
                    conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 1] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 577]
                    conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 1] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3649]
                    conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 64] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 580]
                    conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 64] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3652]
                    conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 127] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 583]
                    conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 127] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3655]
                    conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 190] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 586]
                    conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 190] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3658]
                    conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 2] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 2]
                    conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 2] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3074]
                    conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 65] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 5]
                    conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 65] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3077]
                    conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 128] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 8]
                    conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 128] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3080]
                    conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 191] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 11]
                    conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 191] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3083]
                    conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 2] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 194]
                    conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 2] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3266]
                    conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 65] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 197]
                    conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 65] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3269]
                    conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 128] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 200]
                    conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 128] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3272]
                    conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 191] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 203]
                    conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 191] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3275]
                    conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 2] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 386]
                    conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 2] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3458]
                    conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 65] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 389]
                    conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 65] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3461]
                    conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 128] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 392]
                    conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 128] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3464]
                    conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 191] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 395]
                    conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 191] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3467]
                    conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 2] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 578]
                    conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 2] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3650]
                    conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 65] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 581]
                    conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 65] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3653]
                    conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 128] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 584]
                    conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 128] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3656]
                    conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 191] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 587]
                    conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 252 + threadIdx_x % 49 // 7 * 9 + threadIdx_x % 7 + 191] * kernel_shared_1[threadIdx_x // 49 * 768 + rc_outer_inner * 12 + 3659]
            for i1_inner in range(4):
                compute_1 = T.buffer_decl((25088,), data=compute.data)
                bias_1 = T.buffer_decl((512,), data=bias.data)
                compute_1[blockIdx_x * 1568 + threadIdx_x // 49 * 196 + i1_inner * 49 + threadIdx_x % 49] = T.max(conv2d_nchw_1[i1_inner] + bias_1[blockIdx_x * 32 + threadIdx_x // 49 * 4 + i1_inner], T.float32(0))
                compute_1[blockIdx_x * 1568 + threadIdx_x // 49 * 196 + i1_inner * 49 + threadIdx_x % 49 + 784] = T.max(conv2d_nchw_1[i1_inner + 4] + bias_1[blockIdx_x * 32 + threadIdx_x // 49 * 4 + i1_inner + 16], T.float32(0))




.. GENERATED FROM PYTHON SOURCE LINES 138-141

Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.

.. GENERATED FROM PYTHON SOURCE LINES 141-168

.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Execution time of this operator: 0.343 ms




.. GENERATED FROM PYTHON SOURCE LINES 169-174

Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

.. GENERATED FROM PYTHON SOURCE LINES 176-179

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.

.. GENERATED FROM PYTHON SOURCE LINES 179-186

.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=1)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=4)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=4)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=2)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=7)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=7)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=4)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=16)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=1)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=1)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=1)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=3)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=4)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=4)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=2)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=7)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=7)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=196)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=32)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=196)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 1024)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(196) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[8];
      __shared__ float pad_temp_shared[4032];
      __shared__ float kernel_shared[6144];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[4] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[5] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[6] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      conv2d_nchw[7] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 8; ++rc_outer_outer) {
        for (int ry_outer_outer = 0; ry_outer_outer < 3; ++ry_outer_outer) {
          __syncthreads();
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[(((int)threadIdx.x) * 32)] = (((((1 <= ((((((int)threadIdx.x) * 32) % 63) / 9) + ry_outer_outer)) && (((((((int)threadIdx.x) * 32) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= ((((int)threadIdx.x) * 5) % 9))) && (((((int)threadIdx.x) * 5) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + (((((int)threadIdx.x) * 32) / 9) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 5) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 1)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 1) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 1) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 1) % 9))) && ((((((int)threadIdx.x) * 5) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 1) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 1) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 2)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 2) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 2) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 2) % 9))) && ((((((int)threadIdx.x) * 5) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 2) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 2) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 3)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 3) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 3) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 3) % 9))) && ((((((int)threadIdx.x) * 5) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 3) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 3) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 4)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 4) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 4) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 4) % 9))) && ((((((int)threadIdx.x) * 5) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 4) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 4) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 5)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 5) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 5) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 5) % 9))) && ((((((int)threadIdx.x) * 5) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 5) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 5) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 6)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 6) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 6) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 6) % 9))) && ((((((int)threadIdx.x) * 5) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 6) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 6) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 7)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 7) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 7) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 7) % 9))) && ((((((int)threadIdx.x) * 5) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 7) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 7) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 8)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 8) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 8) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 8) % 9))) && ((((((int)threadIdx.x) * 5) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 8) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 8) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 9)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 32) / 9) + 1) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 32) / 9) + 1) % 7)) < 8)) && (1 <= ((((int)threadIdx.x) * 5) % 9))) && (((((int)threadIdx.x) * 5) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + (((((int)threadIdx.x) * 32) / 9) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 5) % 9)) - 1)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 10)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 10) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 10) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 1) % 9))) && ((((((int)threadIdx.x) * 5) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 10) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 1) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 11)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 11) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 11) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 2) % 9))) && ((((((int)threadIdx.x) * 5) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 11) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 2) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 12)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 12) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 12) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 3) % 9))) && ((((((int)threadIdx.x) * 5) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 12) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 3) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 13)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 13) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 13) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 4) % 9))) && ((((((int)threadIdx.x) * 5) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 13) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 4) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 14)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 14) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 14) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 5) % 9))) && ((((((int)threadIdx.x) * 5) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 14) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 5) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 15)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 15) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 15) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 6) % 9))) && ((((((int)threadIdx.x) * 5) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 15) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 6) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 16)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 16) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 16) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 7) % 9))) && ((((((int)threadIdx.x) * 5) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 16) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 7) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 17)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 17) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 17) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 8) % 9))) && ((((((int)threadIdx.x) * 5) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 17) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 8) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 18)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 32) / 9) + 2) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 32) / 9) + 2) % 7)) < 8)) && (1 <= ((((int)threadIdx.x) * 5) % 9))) && (((((int)threadIdx.x) * 5) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + (((((int)threadIdx.x) * 32) / 9) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 5) % 9)) + 6)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 19)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 19) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 19) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 1) % 9))) && ((((((int)threadIdx.x) * 5) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 19) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 1) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 20)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 20) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 20) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 2) % 9))) && ((((((int)threadIdx.x) * 5) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 20) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 2) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 21)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 21) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 21) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 3) % 9))) && ((((((int)threadIdx.x) * 5) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 21) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 3) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 22)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 22) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 22) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 4) % 9))) && ((((((int)threadIdx.x) * 5) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 22) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 4) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 23)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 23) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 23) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 5) % 9))) && ((((((int)threadIdx.x) * 5) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 23) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 5) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 24)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 24) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 24) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 6) % 9))) && ((((((int)threadIdx.x) * 5) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 24) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 6) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 25)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 25) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 25) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 7) % 9))) && ((((((int)threadIdx.x) * 5) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 25) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 7) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 26)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 26) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 26) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 8) % 9))) && ((((((int)threadIdx.x) * 5) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 26) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 8) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 27)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 32) / 9) + 3) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 32) / 9) + 3) % 7)) < 8)) && (1 <= ((((int)threadIdx.x) * 5) % 9))) && (((((int)threadIdx.x) * 5) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + (((((int)threadIdx.x) * 32) / 9) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 5) % 9)) + 13)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 28)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 28) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 28) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 1) % 9))) && ((((((int)threadIdx.x) * 5) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 28) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 1) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 29)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 29) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 29) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 2) % 9))) && ((((((int)threadIdx.x) * 5) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 29) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 2) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 30)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 30) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 30) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 3) % 9))) && ((((((int)threadIdx.x) * 5) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 30) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 3) % 9)) - 8)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 126) {
            pad_temp_shared[((((int)threadIdx.x) * 32) + 31)] = (((((1 <= (((((((int)threadIdx.x) * 32) + 31) % 63) / 9) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 32) + 31) % 63) / 9) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 5) + 4) % 9))) && ((((((int)threadIdx.x) * 5) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((((int)threadIdx.x) * 32) + 31) / 9) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 5) + 4) % 9)) - 8)] : 0.000000e+00f);
          }
          kernel_shared[((int)threadIdx.x)] = kernel[((((((((int)blockIdx.x) * 147456) + ((((int)threadIdx.x) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) % 192) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((int)threadIdx.x) + 196)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 196) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 4) % 192) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 392)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 392) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 8) % 192) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 588)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 588) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) / 3) + 4) & 63) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((int)threadIdx.x) + 784)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 784) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 16) % 192) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 980)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 980) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 20) % 192) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1176)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1176) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) / 3) + 8) & 63) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1372)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1372) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 28) % 192) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1568)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1568) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 32) % 192) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1764)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1764) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) / 3) + 12) & 63) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1960)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1960) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 40) % 192) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2156)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2156) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 44) % 192) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2352)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2352) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) / 3) + 16) & 63) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2548)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2548) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 52) % 192) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2744)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2744) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 56) % 192) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2940)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2940) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) / 3) + 20) & 63) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((int)threadIdx.x) + 3136)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 3136) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 64) % 192) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 3332)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 3332) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 68) % 192) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 3528)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 3528) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) / 3) + 24) & 63) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((int)threadIdx.x) + 3724)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 3724) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 76) % 192) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 3920)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 3920) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 80) % 192) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 4116)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 4116) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) / 3) + 28) & 63) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((int)threadIdx.x) + 4312)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 4312) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 88) % 192) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 4508)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 4508) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 92) % 192) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 4704)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 4704) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) / 3) + 32) & 63) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((int)threadIdx.x) + 4900)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 4900) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 100) % 192) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 5096)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 5096) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 104) % 192) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 5292)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 5292) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) / 3) + 36) & 63) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((int)threadIdx.x) + 5488)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 5488) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 112) % 192) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 5684)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 5684) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 116) % 192) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 5880)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 5880) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) / 3) + 40) & 63) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          if (((int)threadIdx.x) < 68) {
            kernel_shared[(((int)threadIdx.x) + 6076)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 6076) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 124) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          }
          __syncthreads();
          for (int rc_outer_inner = 0; rc_outer_inner < 16; ++rc_outer_inner) {
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[(((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12))]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3072)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 63)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3)]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 63)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3075)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 126)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 6)]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 126)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3078)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 189)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 9)]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 189)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3081)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 192)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3264)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 63)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 195)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 63)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3267)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 126)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 198)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 126)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3270)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 189)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 201)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 189)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3273)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 384)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3456)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 63)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 387)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 63)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3459)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 126)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 390)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 126)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3462)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 189)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 393)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 189)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3465)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 576)]));
            conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7))] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3648)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 63)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 579)]));
            conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 63)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3651)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 126)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 582)]));
            conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 126)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3654)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 189)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 585)]));
            conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 189)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3657)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 1)]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3073)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 64)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 4)]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 64)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3076)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 127)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 7)]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 127)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3079)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 190)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 10)]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 190)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3082)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 193)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3265)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 64)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 196)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 64)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3268)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 127)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 199)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 127)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3271)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 190)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 202)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 190)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3274)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 385)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3457)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 64)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 388)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 64)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3460)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 127)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 391)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 127)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3463)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 190)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 394)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 190)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3466)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 577)]));
            conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3649)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 64)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 580)]));
            conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 64)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3652)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 127)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 583)]));
            conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 127)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3655)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 190)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 586)]));
            conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 190)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3658)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 2)]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3074)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 65)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 5)]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 65)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3077)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 128)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 8)]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 128)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3080)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 191)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 11)]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 191)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3083)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 194)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3266)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 65)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 197)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 65)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3269)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 128)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 200)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 128)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3272)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 191)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 203)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 191)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3275)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 386)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3458)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 65)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 389)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 65)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3461)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 128)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 392)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 128)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3464)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 191)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 395)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 191)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3467)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 578)]));
            conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3650)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 65)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 581)]));
            conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 65)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3653)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 128)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 584)]));
            conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 128)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3656)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 191)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 587)]));
            conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((rc_outer_inner * 252) + (((((int)threadIdx.x) % 49) / 7) * 9)) + (((int)threadIdx.x) % 7)) + 191)] * kernel_shared[((((((int)threadIdx.x) / 49) * 768) + (rc_outer_inner * 12)) + 3659)]));
          }
        }
      }
      for (int i1_inner = 0; i1_inner < 4; ++i1_inner) {
        compute[((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 49) * 196)) + (i1_inner * 49)) + (((int)threadIdx.x) % 49))] = max((conv2d_nchw[i1_inner] + bias[(((((int)blockIdx.x) * 32) + ((((int)threadIdx.x) / 49) * 4)) + i1_inner)]), 0.000000e+00f);
        compute[(((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 49) * 196)) + (i1_inner * 49)) + (((int)threadIdx.x) % 49)) + 784)] = max((conv2d_nchw[(i1_inner + 4)] + bias[((((((int)blockIdx.x) * 32) + ((((int)threadIdx.x) / 49) * 4)) + i1_inner) + 16)]), 0.000000e+00f);
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 187-191

A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.

.. GENERATED FROM PYTHON SOURCE LINES 191-213

.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resume search:
    /venv/apache-tvm-py3.7/lib/python3.7/site-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  43.389 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
