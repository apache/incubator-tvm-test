
.. DO NOT EDIT. THIS FILE WAS AUTOMATICALLY GENERATED BY
.. TVM'S MONKEY-PATCHED VERSION OF SPHINX-GALLERY. TO MAKE
.. CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.py"

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        This tutorial can be used interactively with Google Colab! You can also click
        :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>` to run the Jupyter notebook locally.

        .. image:: https://raw.githubusercontent.com/tlc-pack/web-data/main/images/utilities/colab_button.svg
            :align: center
            :target: https://colab.research.google.com/github/apache/tvm-site/blob/asf-site/docs/_downloads/5f1f7bd7d90710fd404f7bcdc4965622/tune_conv2d_layer_cuda.ipynb
            :width: 300px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.

.. GENERATED FROM PYTHON SOURCE LINES 39-47

.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python








.. GENERATED FROM PYTHON SOURCE LINES 51-56

Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.

.. GENERATED FROM PYTHON SOURCE LINES 56-68

.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]









.. GENERATED FROM PYTHON SOURCE LINES 69-72

Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.

.. GENERATED FROM PYTHON SOURCE LINES 72-85

.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)





.. GENERATED FROM PYTHON SOURCE LINES 86-103

Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the main process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.

.. GENERATED FROM PYTHON SOURCE LINES 103-113

.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Get devices for measurement successfully!




.. GENERATED FROM PYTHON SOURCE LINES 114-120

Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.

.. GENERATED FROM PYTHON SOURCE LINES 120-129

.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx








.. GENERATED FROM PYTHON SOURCE LINES 130-133

We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.

.. GENERATED FROM PYTHON SOURCE LINES 133-137

.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Lowered TIR:
    @I.ir_module
    class Module:
        @T.prim_func
        def main(data: T.handle, kernel: T.handle, bias: T.handle, compute: T.handle):
            T.func_attr({"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True})
            data_1 = T.match_buffer(data, (1, 512, 7, 7))
            kernel_1 = T.match_buffer(kernel, (512, 512, 3, 3))
            bias_1 = T.match_buffer(bias, (1, 512, 1, 1))
            compute_1 = T.match_buffer(compute, (1, 512, 7, 7))
            blockIdx_x = T.env_thread("blockIdx.x")
            T.launch_thread(blockIdx_x, 16)
            conv2d_nchw = T.allocate([28], "float32", "local")
            pad_temp_shared = T.allocate([2016], "float32", "shared")
            kernel_shared = T.allocate([3072], "float32", "shared")
            threadIdx_x = T.env_thread("threadIdx.x")
            T.launch_thread(threadIdx_x, 56)
            conv2d_nchw_1 = T.buffer_decl((4,), data=conv2d_nchw, scope="local", align=8)
            conv2d_nchw_1[0] = T.float32(0)
            conv2d_nchw_1[2] = T.float32(0)
            conv2d_nchw_1[4] = T.float32(0)
            conv2d_nchw_1[6] = T.float32(0)
            conv2d_nchw_1[8] = T.float32(0)
            conv2d_nchw_1[10] = T.float32(0)
            conv2d_nchw_1[12] = T.float32(0)
            conv2d_nchw_1[14] = T.float32(0)
            conv2d_nchw_1[16] = T.float32(0)
            conv2d_nchw_1[18] = T.float32(0)
            conv2d_nchw_1[20] = T.float32(0)
            conv2d_nchw_1[22] = T.float32(0)
            conv2d_nchw_1[24] = T.float32(0)
            conv2d_nchw_1[26] = T.float32(0)
            conv2d_nchw_1[1] = T.float32(0)
            conv2d_nchw_1[3] = T.float32(0)
            conv2d_nchw_1[5] = T.float32(0)
            conv2d_nchw_1[7] = T.float32(0)
            conv2d_nchw_1[9] = T.float32(0)
            conv2d_nchw_1[11] = T.float32(0)
            conv2d_nchw_1[13] = T.float32(0)
            conv2d_nchw_1[15] = T.float32(0)
            conv2d_nchw_1[17] = T.float32(0)
            conv2d_nchw_1[19] = T.float32(0)
            conv2d_nchw_1[21] = T.float32(0)
            conv2d_nchw_1[23] = T.float32(0)
            conv2d_nchw_1[25] = T.float32(0)
            conv2d_nchw_1[27] = T.float32(0)
            for rc_outer_outer, ry_outer_outer in T.grid(16, 3):
                cse_var_4: T.int32 = rc_outer_outer * 1568
                cse_var_3: T.int32 = rc_outer_outer * 288
                cse_var_2: T.int32 = ry_outer_outer * 7
                cse_var_1: T.int32 = ry_outer_outer * 3
                threadIdx_x_1 = T.env_thread("threadIdx.x")
                pad_temp_shared_1 = T.buffer_decl((2016,), data=pad_temp_shared, scope="shared")
                data_2 = T.buffer_decl((25088,), data=data_1.data)
                with T.launch_thread(threadIdx_x_1, 56):
                    pad_temp_shared_1[threadIdx_x_1 * 6] = T.if_then_else(1 <= threadIdx_x_1 * 2 % 21 // 3 + ry_outer_outer and threadIdx_x_1 * 2 % 21 // 3 + ry_outer_outer < 8 and 1 < threadIdx_x_1 * 6 % 9 and threadIdx_x_1 * 6 % 9 < 8, data_2[cse_var_4 + threadIdx_x_1 * 2 // 3 * 7 + cse_var_2 + threadIdx_x_1 * 6 % 9 - 8], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 1] = T.if_then_else(1 <= threadIdx_x_1 * 2 % 21 // 3 + ry_outer_outer and threadIdx_x_1 * 2 % 21 // 3 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 6 + 1) % 9 and (threadIdx_x_1 * 6 + 1) % 9 < 8, data_2[cse_var_4 + threadIdx_x_1 * 2 // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 1) % 9 - 8], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 2] = T.if_then_else(1 <= threadIdx_x_1 * 2 % 21 // 3 + ry_outer_outer and threadIdx_x_1 * 2 % 21 // 3 + ry_outer_outer < 8 and 1 < (threadIdx_x_1 * 6 + 2) % 9 and (threadIdx_x_1 * 6 + 2) % 9 < 8, data_2[cse_var_4 + threadIdx_x_1 * 2 // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 2) % 9 - 8], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 3] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 1) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 1) % 21 // 3 + ry_outer_outer < 8 and 1 < (threadIdx_x_1 * 6 + 3) % 9 and (threadIdx_x_1 * 6 + 3) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 1) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 3) % 9 - 8], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 4] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 1) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 1) % 21 // 3 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 6 + 4) % 9 and (threadIdx_x_1 * 6 + 4) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 1) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 4) % 9 - 8], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 5] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 1) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 1) % 21 // 3 + ry_outer_outer < 8 and 1 < (threadIdx_x_1 * 6 + 5) % 9 and (threadIdx_x_1 * 6 + 5) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 1) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 5) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 56):
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 336] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 7) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 7) % 21 // 3 + ry_outer_outer < 8 and 1 < (threadIdx_x_1 * 6 + 3) % 9 and (threadIdx_x_1 * 6 + 3) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 112) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 3) % 9 - 8], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 337] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 7) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 7) % 21 // 3 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 6 + 4) % 9 and (threadIdx_x_1 * 6 + 4) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 112) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 4) % 9 - 8], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 338] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 7) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 7) % 21 // 3 + ry_outer_outer < 8 and 1 < (threadIdx_x_1 * 6 + 5) % 9 and (threadIdx_x_1 * 6 + 5) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 112) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 5) % 9 - 8], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 339] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 8) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 8) % 21 // 3 + ry_outer_outer < 8 and 1 < (threadIdx_x_1 * 6 + 6) % 9 and (threadIdx_x_1 * 6 + 6) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 113) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 6) % 9 - 8], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 340] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 8) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 8) % 21 // 3 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 6 + 7) % 9 and (threadIdx_x_1 * 6 + 7) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 113) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 7) % 9 - 8], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 341] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 8) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 8) % 21 // 3 + ry_outer_outer < 8 and 1 < (threadIdx_x_1 * 6 + 8) % 9 and (threadIdx_x_1 * 6 + 8) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 113) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 8) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 56):
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 672] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 14) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 14) % 21 // 3 + ry_outer_outer < 8 and 1 < (threadIdx_x_1 * 6 + 6) % 9 and (threadIdx_x_1 * 6 + 6) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 224) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 6) % 9 - 8], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 673] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 14) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 14) % 21 // 3 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 6 + 7) % 9 and (threadIdx_x_1 * 6 + 7) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 224) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 7) % 9 - 8], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 674] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 14) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 14) % 21 // 3 + ry_outer_outer < 8 and 1 < (threadIdx_x_1 * 6 + 8) % 9 and (threadIdx_x_1 * 6 + 8) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 224) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 8) % 9 - 8], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 675] = T.if_then_else(1 <= ry_outer_outer + (threadIdx_x_1 * 2 // 3 + 5) % 7 and ry_outer_outer + (threadIdx_x_1 * 2 // 3 + 5) % 7 < 8 and 1 < threadIdx_x_1 * 6 % 9 and threadIdx_x_1 * 6 % 9 < 8, data_2[cse_var_4 + threadIdx_x_1 * 2 // 3 * 7 + cse_var_2 + threadIdx_x_1 * 6 % 9 + 517], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 676] = T.if_then_else(1 <= ry_outer_outer + (threadIdx_x_1 * 2 // 3 + 5) % 7 and ry_outer_outer + (threadIdx_x_1 * 2 // 3 + 5) % 7 < 8 and 1 <= (threadIdx_x_1 * 6 + 1) % 9 and (threadIdx_x_1 * 6 + 1) % 9 < 8, data_2[cse_var_4 + threadIdx_x_1 * 2 // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 1) % 9 + 517], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 677] = T.if_then_else(1 <= ry_outer_outer + (threadIdx_x_1 * 2 // 3 + 5) % 7 and ry_outer_outer + (threadIdx_x_1 * 2 // 3 + 5) % 7 < 8 and 1 < (threadIdx_x_1 * 6 + 2) % 9 and (threadIdx_x_1 * 6 + 2) % 9 < 8, data_2[cse_var_4 + threadIdx_x_1 * 2 // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 2) % 9 + 517], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 56):
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 1008] = T.if_then_else(1 <= threadIdx_x_1 * 2 % 21 // 3 + ry_outer_outer and threadIdx_x_1 * 2 % 21 // 3 + ry_outer_outer < 8 and 1 < threadIdx_x_1 * 6 % 9 and threadIdx_x_1 * 6 % 9 < 8, data_2[cse_var_4 + threadIdx_x_1 * 2 // 3 * 7 + cse_var_2 + threadIdx_x_1 * 6 % 9 + 776], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 1009] = T.if_then_else(1 <= threadIdx_x_1 * 2 % 21 // 3 + ry_outer_outer and threadIdx_x_1 * 2 % 21 // 3 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 6 + 1) % 9 and (threadIdx_x_1 * 6 + 1) % 9 < 8, data_2[cse_var_4 + threadIdx_x_1 * 2 // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 1) % 9 + 776], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 1010] = T.if_then_else(1 <= threadIdx_x_1 * 2 % 21 // 3 + ry_outer_outer and threadIdx_x_1 * 2 % 21 // 3 + ry_outer_outer < 8 and 1 < (threadIdx_x_1 * 6 + 2) % 9 and (threadIdx_x_1 * 6 + 2) % 9 < 8, data_2[cse_var_4 + threadIdx_x_1 * 2 // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 2) % 9 + 776], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 1011] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 1) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 1) % 21 // 3 + ry_outer_outer < 8 and 1 < (threadIdx_x_1 * 6 + 3) % 9 and (threadIdx_x_1 * 6 + 3) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 337) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 3) % 9 - 8], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 1012] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 1) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 1) % 21 // 3 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 6 + 4) % 9 and (threadIdx_x_1 * 6 + 4) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 337) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 4) % 9 - 8], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 1013] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 1) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 1) % 21 // 3 + ry_outer_outer < 8 and 1 < (threadIdx_x_1 * 6 + 5) % 9 and (threadIdx_x_1 * 6 + 5) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 337) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 5) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 56):
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 1344] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 7) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 7) % 21 // 3 + ry_outer_outer < 8 and 1 < (threadIdx_x_1 * 6 + 3) % 9 and (threadIdx_x_1 * 6 + 3) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 448) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 3) % 9 - 8], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 1345] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 7) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 7) % 21 // 3 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 6 + 4) % 9 and (threadIdx_x_1 * 6 + 4) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 448) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 4) % 9 - 8], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 1346] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 7) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 7) % 21 // 3 + ry_outer_outer < 8 and 1 < (threadIdx_x_1 * 6 + 5) % 9 and (threadIdx_x_1 * 6 + 5) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 448) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 5) % 9 - 8], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 1347] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 8) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 8) % 21 // 3 + ry_outer_outer < 8 and 1 < (threadIdx_x_1 * 6 + 6) % 9 and (threadIdx_x_1 * 6 + 6) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 449) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 6) % 9 - 8], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 1348] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 8) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 8) % 21 // 3 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 6 + 7) % 9 and (threadIdx_x_1 * 6 + 7) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 449) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 7) % 9 - 8], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 1349] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 8) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 8) % 21 // 3 + ry_outer_outer < 8 and 1 < (threadIdx_x_1 * 6 + 8) % 9 and (threadIdx_x_1 * 6 + 8) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 449) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 8) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 56):
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 1680] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 14) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 14) % 21 // 3 + ry_outer_outer < 8 and 1 < (threadIdx_x_1 * 6 + 6) % 9 and (threadIdx_x_1 * 6 + 6) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 560) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 6) % 9 - 8], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 1681] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 14) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 14) % 21 // 3 + ry_outer_outer < 8 and 1 <= (threadIdx_x_1 * 6 + 7) % 9 and (threadIdx_x_1 * 6 + 7) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 560) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 7) % 9 - 8], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 1682] = T.if_then_else(1 <= (threadIdx_x_1 * 2 + 14) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 * 2 + 14) % 21 // 3 + ry_outer_outer < 8 and 1 < (threadIdx_x_1 * 6 + 8) % 9 and (threadIdx_x_1 * 6 + 8) % 9 < 8, data_2[cse_var_4 + (threadIdx_x_1 * 2 + 560) // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 8) % 9 - 8], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 1683] = T.if_then_else(1 <= ry_outer_outer + (threadIdx_x_1 * 2 // 3 + 5) % 7 and ry_outer_outer + (threadIdx_x_1 * 2 // 3 + 5) % 7 < 8 and 1 < threadIdx_x_1 * 6 % 9 and threadIdx_x_1 * 6 % 9 < 8, data_2[cse_var_4 + threadIdx_x_1 * 2 // 3 * 7 + cse_var_2 + threadIdx_x_1 * 6 % 9 + 1301], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 1684] = T.if_then_else(1 <= ry_outer_outer + (threadIdx_x_1 * 2 // 3 + 5) % 7 and ry_outer_outer + (threadIdx_x_1 * 2 // 3 + 5) % 7 < 8 and 1 <= (threadIdx_x_1 * 6 + 1) % 9 and (threadIdx_x_1 * 6 + 1) % 9 < 8, data_2[cse_var_4 + threadIdx_x_1 * 2 // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 1) % 9 + 1301], T.float32(0))
                    pad_temp_shared_1[threadIdx_x_1 * 6 + 1685] = T.if_then_else(1 <= ry_outer_outer + (threadIdx_x_1 * 2 // 3 + 5) % 7 and ry_outer_outer + (threadIdx_x_1 * 2 // 3 + 5) % 7 < 8 and 1 < (threadIdx_x_1 * 6 + 2) % 9 and (threadIdx_x_1 * 6 + 2) % 9 < 8, data_2[cse_var_4 + threadIdx_x_1 * 2 // 3 * 7 + cse_var_2 + (threadIdx_x_1 * 6 + 2) % 9 + 1301], T.float32(0))
                threadIdx_x_2 = T.env_thread("threadIdx.x")
                kernel_shared_1 = T.buffer_decl((3072,), data=kernel_shared, scope="shared")
                kernel_2 = T.buffer_decl((2359296,), data=kernel_1.data)
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2] = kernel_2[blockIdx_x * 147456 + cse_var_3 + threadIdx_x_2 // 3 * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 56] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 56) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 56) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 112] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 112) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 16) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 168] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 168) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 // 3 + 24) % 32 * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 224] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 224) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 32) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 280] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 280) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 88) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 336] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 336) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 // 3 + 16) % 32 * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 392] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 392) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 8) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 448] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 448) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 64) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 504] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 504) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 // 3 + 8) * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 560] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 560) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 80) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 616] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 616) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 40) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 672] = kernel_2[blockIdx_x * 147456 + cse_var_3 + threadIdx_x_2 // 3 * 9 + cse_var_1 + threadIdx_x_2 % 3 + 32256]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 728] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 728) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 56) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 784] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 784) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 16) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 840] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 840) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 // 3 + 24) % 32 * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 896] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 896) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 32) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 952] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 952) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 88) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1008] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 1008) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 // 3 + 16) % 32 * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1064] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 1064) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 8) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1120] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 1120) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 64) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1176] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 1176) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 // 3 + 8) * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1232] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 1232) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 80) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1288] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 1288) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 40) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1344] = kernel_2[blockIdx_x * 147456 + cse_var_3 + threadIdx_x_2 // 3 * 9 + cse_var_1 + threadIdx_x_2 % 3 + 64512]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1400] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 1400) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 56) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1456] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 1456) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 16) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1512] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 1512) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 // 3 + 24) % 32 * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1568] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 1568) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 32) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1624] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 1624) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 88) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1680] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 1680) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 // 3 + 16) % 32 * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1736] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 1736) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 8) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1792] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 1792) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 64) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1848] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 1848) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 // 3 + 8) * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1904] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 1904) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 80) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 1960] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 1960) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 40) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 2016] = kernel_2[blockIdx_x * 147456 + cse_var_3 + threadIdx_x_2 // 3 * 9 + cse_var_1 + threadIdx_x_2 % 3 + 96768]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 2072] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 2072) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 56) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 2128] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 2128) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 16) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 2184] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 2184) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 // 3 + 24) % 32 * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 2240] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 2240) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 32) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 2296] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 2296) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 88) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 2352] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 2352) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 // 3 + 16) % 32 * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 2408] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 2408) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 8) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 2464] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 2464) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 64) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 2520] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 2520) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 // 3 + 8) * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 2576] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 2576) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 80) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 2632] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 2632) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 40) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 2688] = kernel_2[blockIdx_x * 147456 + cse_var_3 + threadIdx_x_2 // 3 * 9 + cse_var_1 + threadIdx_x_2 % 3 + 129024]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 2744] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 2744) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 56) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 2800] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 2800) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 16) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 2856] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 2856) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 // 3 + 24) % 32 * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 2912] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 2912) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 32) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    kernel_shared_1[threadIdx_x_2 + 2968] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 2968) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 + 88) % 96 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 56):
                    if T.likely(threadIdx_x_2 < 48):
                        kernel_shared_1[threadIdx_x_2 + 3024] = kernel_2[blockIdx_x * 147456 + (threadIdx_x_2 + 3024) // 96 * 4608 + cse_var_3 + (threadIdx_x_2 // 3 + 16) * 9 + cse_var_1 + threadIdx_x_2 % 3]
                for rc_outer_inner in range(32):
                    conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3]
                    conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 1] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3]
                    conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 2] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3]
                    conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 3] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3]
                    conv2d_nchw_1[8] = conv2d_nchw_1[8] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 4] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3]
                    conv2d_nchw_1[10] = conv2d_nchw_1[10] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 5] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3]
                    conv2d_nchw_1[12] = conv2d_nchw_1[12] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 6] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3]
                    conv2d_nchw_1[14] = conv2d_nchw_1[14] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1536]
                    conv2d_nchw_1[16] = conv2d_nchw_1[16] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 1] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1536]
                    conv2d_nchw_1[18] = conv2d_nchw_1[18] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 2] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1536]
                    conv2d_nchw_1[20] = conv2d_nchw_1[20] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 3] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1536]
                    conv2d_nchw_1[22] = conv2d_nchw_1[22] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 4] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1536]
                    conv2d_nchw_1[24] = conv2d_nchw_1[24] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 5] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1536]
                    conv2d_nchw_1[26] = conv2d_nchw_1[26] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 6] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1536]
                    conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 1] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1]
                    conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 2] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1]
                    conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 3] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1]
                    conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 4] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1]
                    conv2d_nchw_1[8] = conv2d_nchw_1[8] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 5] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1]
                    conv2d_nchw_1[10] = conv2d_nchw_1[10] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 6] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1]
                    conv2d_nchw_1[12] = conv2d_nchw_1[12] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 7] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1]
                    conv2d_nchw_1[14] = conv2d_nchw_1[14] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 1] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1537]
                    conv2d_nchw_1[16] = conv2d_nchw_1[16] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 2] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1537]
                    conv2d_nchw_1[18] = conv2d_nchw_1[18] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 3] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1537]
                    conv2d_nchw_1[20] = conv2d_nchw_1[20] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 4] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1537]
                    conv2d_nchw_1[22] = conv2d_nchw_1[22] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 5] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1537]
                    conv2d_nchw_1[24] = conv2d_nchw_1[24] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 6] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1537]
                    conv2d_nchw_1[26] = conv2d_nchw_1[26] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 7] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1537]
                    conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 2] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 2]
                    conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 3] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 2]
                    conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 4] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 2]
                    conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 5] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 2]
                    conv2d_nchw_1[8] = conv2d_nchw_1[8] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 6] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 2]
                    conv2d_nchw_1[10] = conv2d_nchw_1[10] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 7] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 2]
                    conv2d_nchw_1[12] = conv2d_nchw_1[12] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 8] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 2]
                    conv2d_nchw_1[14] = conv2d_nchw_1[14] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 2] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1538]
                    conv2d_nchw_1[16] = conv2d_nchw_1[16] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 3] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1538]
                    conv2d_nchw_1[18] = conv2d_nchw_1[18] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 4] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1538]
                    conv2d_nchw_1[20] = conv2d_nchw_1[20] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 5] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1538]
                    conv2d_nchw_1[22] = conv2d_nchw_1[22] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 6] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1538]
                    conv2d_nchw_1[24] = conv2d_nchw_1[24] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 7] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1538]
                    conv2d_nchw_1[26] = conv2d_nchw_1[26] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 8] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1538]
                    conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 96]
                    conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 1] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 96]
                    conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 2] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 96]
                    conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 3] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 96]
                    conv2d_nchw_1[9] = conv2d_nchw_1[9] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 4] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 96]
                    conv2d_nchw_1[11] = conv2d_nchw_1[11] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 5] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 96]
                    conv2d_nchw_1[13] = conv2d_nchw_1[13] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 6] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 96]
                    conv2d_nchw_1[15] = conv2d_nchw_1[15] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1632]
                    conv2d_nchw_1[17] = conv2d_nchw_1[17] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 1] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1632]
                    conv2d_nchw_1[19] = conv2d_nchw_1[19] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 2] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1632]
                    conv2d_nchw_1[21] = conv2d_nchw_1[21] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 3] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1632]
                    conv2d_nchw_1[23] = conv2d_nchw_1[23] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 4] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1632]
                    conv2d_nchw_1[25] = conv2d_nchw_1[25] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 5] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1632]
                    conv2d_nchw_1[27] = conv2d_nchw_1[27] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 6] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1632]
                    conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 1] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 97]
                    conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 2] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 97]
                    conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 3] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 97]
                    conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 4] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 97]
                    conv2d_nchw_1[9] = conv2d_nchw_1[9] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 5] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 97]
                    conv2d_nchw_1[11] = conv2d_nchw_1[11] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 6] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 97]
                    conv2d_nchw_1[13] = conv2d_nchw_1[13] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 7] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 97]
                    conv2d_nchw_1[15] = conv2d_nchw_1[15] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 1] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1633]
                    conv2d_nchw_1[17] = conv2d_nchw_1[17] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 2] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1633]
                    conv2d_nchw_1[19] = conv2d_nchw_1[19] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 3] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1633]
                    conv2d_nchw_1[21] = conv2d_nchw_1[21] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 4] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1633]
                    conv2d_nchw_1[23] = conv2d_nchw_1[23] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 5] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1633]
                    conv2d_nchw_1[25] = conv2d_nchw_1[25] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 6] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1633]
                    conv2d_nchw_1[27] = conv2d_nchw_1[27] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 7] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1633]
                    conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 2] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 98]
                    conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 3] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 98]
                    conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 4] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 98]
                    conv2d_nchw_1[7] = conv2d_nchw_1[7] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 5] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 98]
                    conv2d_nchw_1[9] = conv2d_nchw_1[9] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 6] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 98]
                    conv2d_nchw_1[11] = conv2d_nchw_1[11] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 7] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 98]
                    conv2d_nchw_1[13] = conv2d_nchw_1[13] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 8] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 98]
                    conv2d_nchw_1[15] = conv2d_nchw_1[15] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 2] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1634]
                    conv2d_nchw_1[17] = conv2d_nchw_1[17] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 3] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1634]
                    conv2d_nchw_1[19] = conv2d_nchw_1[19] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 4] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1634]
                    conv2d_nchw_1[21] = conv2d_nchw_1[21] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 5] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1634]
                    conv2d_nchw_1[23] = conv2d_nchw_1[23] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 6] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1634]
                    conv2d_nchw_1[25] = conv2d_nchw_1[25] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 7] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1634]
                    conv2d_nchw_1[27] = conv2d_nchw_1[27] + pad_temp_shared_1[rc_outer_inner * 63 + threadIdx_x % 7 * 9 + 8] * kernel_shared_1[threadIdx_x // 7 * 192 + rc_outer_inner * 3 + 1634]
            for i1_inner in range(2):
                compute_2 = T.buffer_decl((25088,), data=compute_1.data)
                bias_2 = T.buffer_decl((512,), data=bias_1.data)
                compute_2[blockIdx_x * 1568 + threadIdx_x // 7 * 98 + i1_inner * 49 + threadIdx_x % 7 * 7] = T.max(conv2d_nchw_1[i1_inner] + bias_2[blockIdx_x * 32 + threadIdx_x // 7 * 2 + i1_inner], T.float32(0))
                compute_2[blockIdx_x * 1568 + threadIdx_x // 7 * 98 + i1_inner * 49 + threadIdx_x % 7 * 7 + 1] = T.max(conv2d_nchw_1[i1_inner + 2] + bias_2[blockIdx_x * 32 + threadIdx_x // 7 * 2 + i1_inner], T.float32(0))
                compute_2[blockIdx_x * 1568 + threadIdx_x // 7 * 98 + i1_inner * 49 + threadIdx_x % 7 * 7 + 2] = T.max(conv2d_nchw_1[i1_inner + 4] + bias_2[blockIdx_x * 32 + threadIdx_x // 7 * 2 + i1_inner], T.float32(0))
                compute_2[blockIdx_x * 1568 + threadIdx_x // 7 * 98 + i1_inner * 49 + threadIdx_x % 7 * 7 + 3] = T.max(conv2d_nchw_1[i1_inner + 6] + bias_2[blockIdx_x * 32 + threadIdx_x // 7 * 2 + i1_inner], T.float32(0))
                compute_2[blockIdx_x * 1568 + threadIdx_x // 7 * 98 + i1_inner * 49 + threadIdx_x % 7 * 7 + 4] = T.max(conv2d_nchw_1[i1_inner + 8] + bias_2[blockIdx_x * 32 + threadIdx_x // 7 * 2 + i1_inner], T.float32(0))
                compute_2[blockIdx_x * 1568 + threadIdx_x // 7 * 98 + i1_inner * 49 + threadIdx_x % 7 * 7 + 5] = T.max(conv2d_nchw_1[i1_inner + 10] + bias_2[blockIdx_x * 32 + threadIdx_x // 7 * 2 + i1_inner], T.float32(0))
                compute_2[blockIdx_x * 1568 + threadIdx_x // 7 * 98 + i1_inner * 49 + threadIdx_x % 7 * 7 + 6] = T.max(conv2d_nchw_1[i1_inner + 12] + bias_2[blockIdx_x * 32 + threadIdx_x // 7 * 2 + i1_inner], T.float32(0))
                compute_2[blockIdx_x * 1568 + threadIdx_x // 7 * 98 + i1_inner * 49 + threadIdx_x % 7 * 7 + 784] = T.max(conv2d_nchw_1[i1_inner + 14] + bias_2[blockIdx_x * 32 + threadIdx_x // 7 * 2 + i1_inner + 16], T.float32(0))
                compute_2[blockIdx_x * 1568 + threadIdx_x // 7 * 98 + i1_inner * 49 + threadIdx_x % 7 * 7 + 785] = T.max(conv2d_nchw_1[i1_inner + 16] + bias_2[blockIdx_x * 32 + threadIdx_x // 7 * 2 + i1_inner + 16], T.float32(0))
                compute_2[blockIdx_x * 1568 + threadIdx_x // 7 * 98 + i1_inner * 49 + threadIdx_x % 7 * 7 + 786] = T.max(conv2d_nchw_1[i1_inner + 18] + bias_2[blockIdx_x * 32 + threadIdx_x // 7 * 2 + i1_inner + 16], T.float32(0))
                compute_2[blockIdx_x * 1568 + threadIdx_x // 7 * 98 + i1_inner * 49 + threadIdx_x % 7 * 7 + 787] = T.max(conv2d_nchw_1[i1_inner + 20] + bias_2[blockIdx_x * 32 + threadIdx_x // 7 * 2 + i1_inner + 16], T.float32(0))
                compute_2[blockIdx_x * 1568 + threadIdx_x // 7 * 98 + i1_inner * 49 + threadIdx_x % 7 * 7 + 788] = T.max(conv2d_nchw_1[i1_inner + 22] + bias_2[blockIdx_x * 32 + threadIdx_x // 7 * 2 + i1_inner + 16], T.float32(0))
                compute_2[blockIdx_x * 1568 + threadIdx_x // 7 * 98 + i1_inner * 49 + threadIdx_x % 7 * 7 + 789] = T.max(conv2d_nchw_1[i1_inner + 24] + bias_2[blockIdx_x * 32 + threadIdx_x // 7 * 2 + i1_inner + 16], T.float32(0))
                compute_2[blockIdx_x * 1568 + threadIdx_x // 7 * 98 + i1_inner * 49 + threadIdx_x % 7 * 7 + 790] = T.max(conv2d_nchw_1[i1_inner + 26] + bias_2[blockIdx_x * 32 + threadIdx_x // 7 * 2 + i1_inner + 16], T.float32(0))




.. GENERATED FROM PYTHON SOURCE LINES 138-141

Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.

.. GENERATED FROM PYTHON SOURCE LINES 141-168

.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Execution time of this operator: 0.315 ms




.. GENERATED FROM PYTHON SOURCE LINES 169-174

Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

.. GENERATED FROM PYTHON SOURCE LINES 176-179

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.

.. GENERATED FROM PYTHON SOURCE LINES 179-186

.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=1)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=2)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=8)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=2)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=7)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=7)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=1)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=32)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=1)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=1)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=3)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=1)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=2)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=8)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=2)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=7)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=1)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=7)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=56)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=6)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=56)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 1024)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(56) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[28];
      __shared__ float pad_temp_shared[2016];
      __shared__ float kernel_shared[3072];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[4] = 0.000000e+00f;
      conv2d_nchw[6] = 0.000000e+00f;
      conv2d_nchw[8] = 0.000000e+00f;
      conv2d_nchw[10] = 0.000000e+00f;
      conv2d_nchw[12] = 0.000000e+00f;
      conv2d_nchw[14] = 0.000000e+00f;
      conv2d_nchw[16] = 0.000000e+00f;
      conv2d_nchw[18] = 0.000000e+00f;
      conv2d_nchw[20] = 0.000000e+00f;
      conv2d_nchw[22] = 0.000000e+00f;
      conv2d_nchw[24] = 0.000000e+00f;
      conv2d_nchw[26] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      conv2d_nchw[5] = 0.000000e+00f;
      conv2d_nchw[7] = 0.000000e+00f;
      conv2d_nchw[9] = 0.000000e+00f;
      conv2d_nchw[11] = 0.000000e+00f;
      conv2d_nchw[13] = 0.000000e+00f;
      conv2d_nchw[15] = 0.000000e+00f;
      conv2d_nchw[17] = 0.000000e+00f;
      conv2d_nchw[19] = 0.000000e+00f;
      conv2d_nchw[21] = 0.000000e+00f;
      conv2d_nchw[23] = 0.000000e+00f;
      conv2d_nchw[25] = 0.000000e+00f;
      conv2d_nchw[27] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 16; ++rc_outer_outer) {
        for (int ry_outer_outer = 0; ry_outer_outer < 3; ++ry_outer_outer) {
          __syncthreads();
          pad_temp_shared[(((int)threadIdx.x) * 6)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 < ((((int)threadIdx.x) * 6) % 9))) && (((((int)threadIdx.x) * 6) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 6) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 1) % 9))) && ((((((int)threadIdx.x) * 6) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 1) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 2)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 < (((((int)threadIdx.x) * 6) + 2) % 9))) && ((((((int)threadIdx.x) * 6) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 2) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 3)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 < (((((int)threadIdx.x) * 6) + 3) % 9))) && ((((((int)threadIdx.x) * 6) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 1) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 3) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 4)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 4) % 9))) && ((((((int)threadIdx.x) * 6) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 1) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 4) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 5)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 < (((((int)threadIdx.x) * 6) + 5) % 9))) && ((((((int)threadIdx.x) * 6) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 1) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 5) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 336)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 < (((((int)threadIdx.x) * 6) + 3) % 9))) && ((((((int)threadIdx.x) * 6) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 112) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 3) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 337)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 4) % 9))) && ((((((int)threadIdx.x) * 6) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 112) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 4) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 338)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 < (((((int)threadIdx.x) * 6) + 5) % 9))) && ((((((int)threadIdx.x) * 6) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 112) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 5) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 339)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 < (((((int)threadIdx.x) * 6) + 6) % 9))) && ((((((int)threadIdx.x) * 6) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 113) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 6) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 340)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 7) % 9))) && ((((((int)threadIdx.x) * 6) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 113) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 7) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 341)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 < (((((int)threadIdx.x) * 6) + 8) % 9))) && ((((((int)threadIdx.x) * 6) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 113) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 8) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 672)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 < (((((int)threadIdx.x) * 6) + 6) % 9))) && ((((((int)threadIdx.x) * 6) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 224) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 6) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 673)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 7) % 9))) && ((((((int)threadIdx.x) * 6) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 224) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 7) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 674)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 < (((((int)threadIdx.x) * 6) + 8) % 9))) && ((((((int)threadIdx.x) * 6) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 224) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 8) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 675)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 < ((((int)threadIdx.x) * 6) % 9))) && (((((int)threadIdx.x) * 6) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 6) % 9)) + 517)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 676)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 1) % 9))) && ((((((int)threadIdx.x) * 6) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 1) % 9)) + 517)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 677)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 < (((((int)threadIdx.x) * 6) + 2) % 9))) && ((((((int)threadIdx.x) * 6) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 2) % 9)) + 517)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1008)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 < ((((int)threadIdx.x) * 6) % 9))) && (((((int)threadIdx.x) * 6) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 6) % 9)) + 776)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1009)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 1) % 9))) && ((((((int)threadIdx.x) * 6) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 1) % 9)) + 776)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1010)] = (((((1 <= ((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) * 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 < (((((int)threadIdx.x) * 6) + 2) % 9))) && ((((((int)threadIdx.x) * 6) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 2) % 9)) + 776)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1011)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 < (((((int)threadIdx.x) * 6) + 3) % 9))) && ((((((int)threadIdx.x) * 6) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 337) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 3) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1012)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 4) % 9))) && ((((((int)threadIdx.x) * 6) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 337) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 4) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1013)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 < (((((int)threadIdx.x) * 6) + 5) % 9))) && ((((((int)threadIdx.x) * 6) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 337) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 5) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1344)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 < (((((int)threadIdx.x) * 6) + 3) % 9))) && ((((((int)threadIdx.x) * 6) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 448) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 3) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1345)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 4) % 9))) && ((((((int)threadIdx.x) * 6) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 448) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 4) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1346)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 7) % 21) / 3) + ry_outer_outer) < 8)) && (1 < (((((int)threadIdx.x) * 6) + 5) % 9))) && ((((((int)threadIdx.x) * 6) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 448) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 5) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1347)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 < (((((int)threadIdx.x) * 6) + 6) % 9))) && ((((((int)threadIdx.x) * 6) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 449) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 6) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1348)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 7) % 9))) && ((((((int)threadIdx.x) * 6) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 449) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 7) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1349)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 8) % 21) / 3) + ry_outer_outer) < 8)) && (1 < (((((int)threadIdx.x) * 6) + 8) % 9))) && ((((((int)threadIdx.x) * 6) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 449) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 8) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1680)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 < (((((int)threadIdx.x) * 6) + 6) % 9))) && ((((((int)threadIdx.x) * 6) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 560) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 6) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1681)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 7) % 9))) && ((((((int)threadIdx.x) * 6) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 560) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 7) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1682)] = (((((1 <= (((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer)) && ((((((((int)threadIdx.x) * 2) + 14) % 21) / 3) + ry_outer_outer) < 8)) && (1 < (((((int)threadIdx.x) * 6) + 8) % 9))) && ((((((int)threadIdx.x) * 6) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((((int)threadIdx.x) * 2) + 560) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 8) % 9)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1683)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 < ((((int)threadIdx.x) * 6) % 9))) && (((((int)threadIdx.x) * 6) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + ((((int)threadIdx.x) * 6) % 9)) + 1301)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1684)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 <= (((((int)threadIdx.x) * 6) + 1) % 9))) && ((((((int)threadIdx.x) * 6) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 1) % 9)) + 1301)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 6) + 1685)] = (((((1 <= (ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7))) && ((ry_outer_outer + ((((((int)threadIdx.x) * 2) / 3) + 5) % 7)) < 8)) && (1 < (((((int)threadIdx.x) * 6) + 2) % 9))) && ((((((int)threadIdx.x) * 6) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) * 2) / 3) * 7)) + (ry_outer_outer * 7)) + (((((int)threadIdx.x) * 6) + 2) % 9)) + 1301)] : 0.000000e+00f);
          kernel_shared[((int)threadIdx.x)] = kernel[(((((((int)blockIdx.x) * 147456) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((int)threadIdx.x) + 56)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 56) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 56) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 112)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 112) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 16) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 168)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 168) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) / 3) + 24) & 31) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((int)threadIdx.x) + 224)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 224) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 32) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 280)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 280) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 88) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 336)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 336) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) / 3) + 16) & 31) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((int)threadIdx.x) + 392)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 392) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 8) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 448)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 448) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 64) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 504)] = kernel[(((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 504) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 72)];
          kernel_shared[(((int)threadIdx.x) + 560)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 560) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 80) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 616)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 616) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 40) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 672)] = kernel[((((((((int)blockIdx.x) * 147456) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 32256)];
          kernel_shared[(((int)threadIdx.x) + 728)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 728) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 56) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 784)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 784) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 16) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 840)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 840) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) / 3) + 24) & 31) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((int)threadIdx.x) + 896)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 896) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 32) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 952)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 952) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 88) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1008)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1008) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) / 3) + 16) & 31) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1064)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1064) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 8) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1120)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1120) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 64) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1176)] = kernel[(((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1176) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 72)];
          kernel_shared[(((int)threadIdx.x) + 1232)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1232) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 80) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1288)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1288) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 40) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1344)] = kernel[((((((((int)blockIdx.x) * 147456) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 64512)];
          kernel_shared[(((int)threadIdx.x) + 1400)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1400) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 56) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1456)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1456) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 16) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1512)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1512) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) / 3) + 24) & 31) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1568)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1568) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 32) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1624)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1624) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 88) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1680)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1680) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) / 3) + 16) & 31) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1736)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1736) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 8) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1792)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1792) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 64) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1848)] = kernel[(((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1848) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 72)];
          kernel_shared[(((int)threadIdx.x) + 1904)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1904) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 80) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1960)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1960) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 40) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2016)] = kernel[((((((((int)blockIdx.x) * 147456) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 96768)];
          kernel_shared[(((int)threadIdx.x) + 2072)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2072) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 56) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2128)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2128) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 16) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2184)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2184) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) / 3) + 24) & 31) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2240)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2240) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 32) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2296)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2296) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 88) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2352)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2352) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) / 3) + 16) & 31) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2408)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2408) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 8) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2464)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2464) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 64) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2520)] = kernel[(((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2520) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 72)];
          kernel_shared[(((int)threadIdx.x) + 2576)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2576) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 80) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2632)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2632) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 40) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2688)] = kernel[((((((((int)blockIdx.x) * 147456) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 129024)];
          kernel_shared[(((int)threadIdx.x) + 2744)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2744) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 56) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2800)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2800) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 16) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2856)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2856) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) / 3) + 24) & 31) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2912)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2912) / 96) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 32) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2968)] = kernel[((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2968) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 88) % 96) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          if (((int)threadIdx.x) < 48) {
            kernel_shared[(((int)threadIdx.x) + 3024)] = kernel[(((((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 3024) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 144)];
          }
          __syncthreads();
          for (int rc_outer_inner = 0; rc_outer_inner < 32; ++rc_outer_inner) {
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9))] * kernel_shared[(((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3))]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 1)] * kernel_shared[(((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3))]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 2)] * kernel_shared[(((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3))]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 3)] * kernel_shared[(((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3))]));
            conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 4)] * kernel_shared[(((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3))]));
            conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 5)] * kernel_shared[(((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3))]));
            conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 6)] * kernel_shared[(((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3))]));
            conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9))] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1536)]));
            conv2d_nchw[16] = (conv2d_nchw[16] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 1)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1536)]));
            conv2d_nchw[18] = (conv2d_nchw[18] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 2)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1536)]));
            conv2d_nchw[20] = (conv2d_nchw[20] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 3)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1536)]));
            conv2d_nchw[22] = (conv2d_nchw[22] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 4)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1536)]));
            conv2d_nchw[24] = (conv2d_nchw[24] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 5)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1536)]));
            conv2d_nchw[26] = (conv2d_nchw[26] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 6)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1536)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 1)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 2)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1)]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 3)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 4)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1)]));
            conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 5)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1)]));
            conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 6)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1)]));
            conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 7)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1)]));
            conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 1)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1537)]));
            conv2d_nchw[16] = (conv2d_nchw[16] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 2)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1537)]));
            conv2d_nchw[18] = (conv2d_nchw[18] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 3)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1537)]));
            conv2d_nchw[20] = (conv2d_nchw[20] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 4)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1537)]));
            conv2d_nchw[22] = (conv2d_nchw[22] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 5)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1537)]));
            conv2d_nchw[24] = (conv2d_nchw[24] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 6)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1537)]));
            conv2d_nchw[26] = (conv2d_nchw[26] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 7)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1537)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 2)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 2)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 3)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 2)]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 4)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 2)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 5)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 2)]));
            conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 6)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 2)]));
            conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 7)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 2)]));
            conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 8)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 2)]));
            conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 2)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1538)]));
            conv2d_nchw[16] = (conv2d_nchw[16] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 3)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1538)]));
            conv2d_nchw[18] = (conv2d_nchw[18] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 4)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1538)]));
            conv2d_nchw[20] = (conv2d_nchw[20] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 5)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1538)]));
            conv2d_nchw[22] = (conv2d_nchw[22] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 6)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1538)]));
            conv2d_nchw[24] = (conv2d_nchw[24] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 7)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1538)]));
            conv2d_nchw[26] = (conv2d_nchw[26] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 8)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1538)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9))] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 96)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 1)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 96)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 2)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 96)]));
            conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 3)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 96)]));
            conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 4)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 96)]));
            conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 5)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 96)]));
            conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 6)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 96)]));
            conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9))] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1632)]));
            conv2d_nchw[17] = (conv2d_nchw[17] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 1)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1632)]));
            conv2d_nchw[19] = (conv2d_nchw[19] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 2)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1632)]));
            conv2d_nchw[21] = (conv2d_nchw[21] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 3)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1632)]));
            conv2d_nchw[23] = (conv2d_nchw[23] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 4)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1632)]));
            conv2d_nchw[25] = (conv2d_nchw[25] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 5)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1632)]));
            conv2d_nchw[27] = (conv2d_nchw[27] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 6)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1632)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 1)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 97)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 2)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 97)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 3)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 97)]));
            conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 4)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 97)]));
            conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 5)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 97)]));
            conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 6)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 97)]));
            conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 7)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 97)]));
            conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 1)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1633)]));
            conv2d_nchw[17] = (conv2d_nchw[17] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 2)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1633)]));
            conv2d_nchw[19] = (conv2d_nchw[19] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 3)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1633)]));
            conv2d_nchw[21] = (conv2d_nchw[21] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 4)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1633)]));
            conv2d_nchw[23] = (conv2d_nchw[23] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 5)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1633)]));
            conv2d_nchw[25] = (conv2d_nchw[25] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 6)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1633)]));
            conv2d_nchw[27] = (conv2d_nchw[27] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 7)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1633)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 2)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 98)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 3)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 98)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 4)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 98)]));
            conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 5)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 98)]));
            conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 6)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 98)]));
            conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 7)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 98)]));
            conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 8)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 98)]));
            conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 2)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1634)]));
            conv2d_nchw[17] = (conv2d_nchw[17] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 3)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1634)]));
            conv2d_nchw[19] = (conv2d_nchw[19] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 4)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1634)]));
            conv2d_nchw[21] = (conv2d_nchw[21] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 5)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1634)]));
            conv2d_nchw[23] = (conv2d_nchw[23] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 6)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1634)]));
            conv2d_nchw[25] = (conv2d_nchw[25] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 7)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1634)]));
            conv2d_nchw[27] = (conv2d_nchw[27] + (pad_temp_shared[(((rc_outer_inner * 63) + ((((int)threadIdx.x) % 7) * 9)) + 8)] * kernel_shared[((((((int)threadIdx.x) / 7) * 192) + (rc_outer_inner * 3)) + 1634)]));
          }
        }
      }
      for (int i1_inner = 0; i1_inner < 2; ++i1_inner) {
        compute[((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 7) * 98)) + (i1_inner * 49)) + ((((int)threadIdx.x) % 7) * 7))] = max((conv2d_nchw[i1_inner] + bias[(((((int)blockIdx.x) * 32) + ((((int)threadIdx.x) / 7) * 2)) + i1_inner)]), 0.000000e+00f);
        compute[(((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 7) * 98)) + (i1_inner * 49)) + ((((int)threadIdx.x) % 7) * 7)) + 1)] = max((conv2d_nchw[(i1_inner + 2)] + bias[(((((int)blockIdx.x) * 32) + ((((int)threadIdx.x) / 7) * 2)) + i1_inner)]), 0.000000e+00f);
        compute[(((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 7) * 98)) + (i1_inner * 49)) + ((((int)threadIdx.x) % 7) * 7)) + 2)] = max((conv2d_nchw[(i1_inner + 4)] + bias[(((((int)blockIdx.x) * 32) + ((((int)threadIdx.x) / 7) * 2)) + i1_inner)]), 0.000000e+00f);
        compute[(((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 7) * 98)) + (i1_inner * 49)) + ((((int)threadIdx.x) % 7) * 7)) + 3)] = max((conv2d_nchw[(i1_inner + 6)] + bias[(((((int)blockIdx.x) * 32) + ((((int)threadIdx.x) / 7) * 2)) + i1_inner)]), 0.000000e+00f);
        compute[(((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 7) * 98)) + (i1_inner * 49)) + ((((int)threadIdx.x) % 7) * 7)) + 4)] = max((conv2d_nchw[(i1_inner + 8)] + bias[(((((int)blockIdx.x) * 32) + ((((int)threadIdx.x) / 7) * 2)) + i1_inner)]), 0.000000e+00f);
        compute[(((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 7) * 98)) + (i1_inner * 49)) + ((((int)threadIdx.x) % 7) * 7)) + 5)] = max((conv2d_nchw[(i1_inner + 10)] + bias[(((((int)blockIdx.x) * 32) + ((((int)threadIdx.x) / 7) * 2)) + i1_inner)]), 0.000000e+00f);
        compute[(((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 7) * 98)) + (i1_inner * 49)) + ((((int)threadIdx.x) % 7) * 7)) + 6)] = max((conv2d_nchw[(i1_inner + 12)] + bias[(((((int)blockIdx.x) * 32) + ((((int)threadIdx.x) / 7) * 2)) + i1_inner)]), 0.000000e+00f);
        compute[(((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 7) * 98)) + (i1_inner * 49)) + ((((int)threadIdx.x) % 7) * 7)) + 784)] = max((conv2d_nchw[(i1_inner + 14)] + bias[((((((int)blockIdx.x) * 32) + ((((int)threadIdx.x) / 7) * 2)) + i1_inner) + 16)]), 0.000000e+00f);
        compute[(((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 7) * 98)) + (i1_inner * 49)) + ((((int)threadIdx.x) % 7) * 7)) + 785)] = max((conv2d_nchw[(i1_inner + 16)] + bias[((((((int)blockIdx.x) * 32) + ((((int)threadIdx.x) / 7) * 2)) + i1_inner) + 16)]), 0.000000e+00f);
        compute[(((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 7) * 98)) + (i1_inner * 49)) + ((((int)threadIdx.x) % 7) * 7)) + 786)] = max((conv2d_nchw[(i1_inner + 18)] + bias[((((((int)blockIdx.x) * 32) + ((((int)threadIdx.x) / 7) * 2)) + i1_inner) + 16)]), 0.000000e+00f);
        compute[(((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 7) * 98)) + (i1_inner * 49)) + ((((int)threadIdx.x) % 7) * 7)) + 787)] = max((conv2d_nchw[(i1_inner + 20)] + bias[((((((int)blockIdx.x) * 32) + ((((int)threadIdx.x) / 7) * 2)) + i1_inner) + 16)]), 0.000000e+00f);
        compute[(((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 7) * 98)) + (i1_inner * 49)) + ((((int)threadIdx.x) % 7) * 7)) + 788)] = max((conv2d_nchw[(i1_inner + 22)] + bias[((((((int)blockIdx.x) * 32) + ((((int)threadIdx.x) / 7) * 2)) + i1_inner) + 16)]), 0.000000e+00f);
        compute[(((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 7) * 98)) + (i1_inner * 49)) + ((((int)threadIdx.x) % 7) * 7)) + 789)] = max((conv2d_nchw[(i1_inner + 24)] + bias[((((((int)blockIdx.x) * 32) + ((((int)threadIdx.x) / 7) * 2)) + i1_inner) + 16)]), 0.000000e+00f);
        compute[(((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 7) * 98)) + (i1_inner * 49)) + ((((int)threadIdx.x) % 7) * 7)) + 790)] = max((conv2d_nchw[(i1_inner + 26)] + bias[((((((int)blockIdx.x) * 32) + ((((int)threadIdx.x) / 7) * 2)) + i1_inner) + 16)]), 0.000000e+00f);
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 187-191

A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.

.. GENERATED FROM PYTHON SOURCE LINES 191-213

.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resume search:
    /venv/apache-tvm-py3.7/lib/python3.7/site-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  42.968 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
