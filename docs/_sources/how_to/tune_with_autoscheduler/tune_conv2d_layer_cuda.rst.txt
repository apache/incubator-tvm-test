
.. DO NOT EDIT. THIS FILE WAS AUTOMATICALLY GENERATED BY
.. TVM'S MONKEY-PATCHED VERSION OF SPHINX-GALLERY. TO MAKE
.. CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.py"

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        This tutorial can be used interactively with Google Colab! You can also click
        :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>` to run the Jupyter notebook locally.

        .. image:: https://raw.githubusercontent.com/tlc-pack/web-data/main/images/utilities/colab_button.svg
            :align: center
            :target: https://colab.research.google.com/github/apache/tvm-site/blob/asf-site/docs/_downloads/5f1f7bd7d90710fd404f7bcdc4965622/tune_conv2d_layer_cuda.ipynb
            :width: 300px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.

.. GENERATED FROM PYTHON SOURCE LINES 39-47

.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python








.. GENERATED FROM PYTHON SOURCE LINES 51-56

Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.

.. GENERATED FROM PYTHON SOURCE LINES 56-68

.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]









.. GENERATED FROM PYTHON SOURCE LINES 69-72

Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.

.. GENERATED FROM PYTHON SOURCE LINES 72-85

.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)





.. GENERATED FROM PYTHON SOURCE LINES 86-103

Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the main process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.

.. GENERATED FROM PYTHON SOURCE LINES 103-113

.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Get devices for measurement successfully!




.. GENERATED FROM PYTHON SOURCE LINES 114-120

Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.

.. GENERATED FROM PYTHON SOURCE LINES 120-129

.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx








.. GENERATED FROM PYTHON SOURCE LINES 130-133

We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.

.. GENERATED FROM PYTHON SOURCE LINES 133-137

.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Lowered TIR:
    # from tvm.script import ir as I
    # from tvm.script import tir as T

    @I.ir_module
    class Module:
        @T.prim_func
        def main(data: T.Buffer((1, 512, 7, 7), "float32"), kernel: T.Buffer((512, 512, 3, 3), "float32"), bias: T.Buffer((1, 512, 1, 1), "float32"), compute: T.Buffer((1, 512, 7, 7), "float32")):
            T.func_attr({"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True})
            blockIdx_x = T.env_thread("blockIdx.x")
            T.launch_thread(blockIdx_x, 32)
            conv2d_nchw = T.allocate([1], "float32", "local")
            pad_temp_shared = T.allocate([1568], "float32", "shared")
            kernel_shared = T.allocate([512], "float32", "shared")
            threadIdx_x = T.env_thread("threadIdx.x")
            T.launch_thread(threadIdx_x, 784)
            conv2d_nchw_1 = T.Buffer((1,), data=conv2d_nchw, scope="local", align=4)
            conv2d_nchw_1[0] = T.float32(0)
            for rc_outer_outer in range(16):
                threadIdx_x_1 = T.env_thread("threadIdx.x")
                pad_temp_shared_1 = T.Buffer((1568,), data=pad_temp_shared, scope="shared")
                data_1 = T.Buffer((25088,), data=data.data)
                with T.launch_thread(threadIdx_x_1, 784):
                    pad_temp_shared_1[threadIdx_x_1] = T.if_then_else(7 <= threadIdx_x_1 % 49 and 1 <= threadIdx_x_1 % 7, data_1[rc_outer_outer * 1568 + threadIdx_x_1 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 784):
                    pad_temp_shared_1[threadIdx_x_1 + 784] = T.if_then_else(7 <= threadIdx_x_1 % 49 and 1 <= threadIdx_x_1 % 7, data_1[rc_outer_outer * 1568 + threadIdx_x_1 + 776], T.float32(0))
                threadIdx_x_2 = T.env_thread("threadIdx.x")
                kernel_shared_1 = T.Buffer((512,), data=kernel_shared, scope="shared")
                kernel_1 = T.Buffer((2359296,), data=kernel.data)
                with T.launch_thread(threadIdx_x_2, 784):
                    if T.likely(threadIdx_x_2 < 512):
                        kernel_shared_1[threadIdx_x_2] = kernel_1[blockIdx_x * 73728 + threadIdx_x_2 // 32 * 4608 + rc_outer_outer * 288 + threadIdx_x_2 % 32 * 9]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49] * kernel_shared_1[threadIdx_x // 49 * 32]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 49] * kernel_shared_1[threadIdx_x // 49 * 32 + 1]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 98] * kernel_shared_1[threadIdx_x // 49 * 32 + 2]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 147] * kernel_shared_1[threadIdx_x // 49 * 32 + 3]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 196] * kernel_shared_1[threadIdx_x // 49 * 32 + 4]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 245] * kernel_shared_1[threadIdx_x // 49 * 32 + 5]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 294] * kernel_shared_1[threadIdx_x // 49 * 32 + 6]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 343] * kernel_shared_1[threadIdx_x // 49 * 32 + 7]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 392] * kernel_shared_1[threadIdx_x // 49 * 32 + 8]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 441] * kernel_shared_1[threadIdx_x // 49 * 32 + 9]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 490] * kernel_shared_1[threadIdx_x // 49 * 32 + 10]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 539] * kernel_shared_1[threadIdx_x // 49 * 32 + 11]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 588] * kernel_shared_1[threadIdx_x // 49 * 32 + 12]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 637] * kernel_shared_1[threadIdx_x // 49 * 32 + 13]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 686] * kernel_shared_1[threadIdx_x // 49 * 32 + 14]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 735] * kernel_shared_1[threadIdx_x // 49 * 32 + 15]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 784] * kernel_shared_1[threadIdx_x // 49 * 32 + 16]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 833] * kernel_shared_1[threadIdx_x // 49 * 32 + 17]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 882] * kernel_shared_1[threadIdx_x // 49 * 32 + 18]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 931] * kernel_shared_1[threadIdx_x // 49 * 32 + 19]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 980] * kernel_shared_1[threadIdx_x // 49 * 32 + 20]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1029] * kernel_shared_1[threadIdx_x // 49 * 32 + 21]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1078] * kernel_shared_1[threadIdx_x // 49 * 32 + 22]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1127] * kernel_shared_1[threadIdx_x // 49 * 32 + 23]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1176] * kernel_shared_1[threadIdx_x // 49 * 32 + 24]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1225] * kernel_shared_1[threadIdx_x // 49 * 32 + 25]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1274] * kernel_shared_1[threadIdx_x // 49 * 32 + 26]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1323] * kernel_shared_1[threadIdx_x // 49 * 32 + 27]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1372] * kernel_shared_1[threadIdx_x // 49 * 32 + 28]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1421] * kernel_shared_1[threadIdx_x // 49 * 32 + 29]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1470] * kernel_shared_1[threadIdx_x // 49 * 32 + 30]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1519] * kernel_shared_1[threadIdx_x // 49 * 32 + 31]
                with T.launch_thread(threadIdx_x_1, 784):
                    pad_temp_shared_1[threadIdx_x_1] = T.if_then_else(7 <= threadIdx_x_1 % 49, data_1[rc_outer_outer * 1568 + threadIdx_x_1 - 7], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 784):
                    pad_temp_shared_1[threadIdx_x_1 + 784] = T.if_then_else(7 <= threadIdx_x_1 % 49, data_1[rc_outer_outer * 1568 + threadIdx_x_1 + 777], T.float32(0))
                with T.launch_thread(threadIdx_x_2, 784):
                    if T.likely(threadIdx_x_2 < 512):
                        kernel_shared_1[threadIdx_x_2] = kernel_1[blockIdx_x * 73728 + threadIdx_x_2 // 32 * 4608 + rc_outer_outer * 288 + threadIdx_x_2 % 32 * 9 + 1]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49] * kernel_shared_1[threadIdx_x // 49 * 32]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 49] * kernel_shared_1[threadIdx_x // 49 * 32 + 1]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 98] * kernel_shared_1[threadIdx_x // 49 * 32 + 2]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 147] * kernel_shared_1[threadIdx_x // 49 * 32 + 3]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 196] * kernel_shared_1[threadIdx_x // 49 * 32 + 4]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 245] * kernel_shared_1[threadIdx_x // 49 * 32 + 5]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 294] * kernel_shared_1[threadIdx_x // 49 * 32 + 6]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 343] * kernel_shared_1[threadIdx_x // 49 * 32 + 7]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 392] * kernel_shared_1[threadIdx_x // 49 * 32 + 8]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 441] * kernel_shared_1[threadIdx_x // 49 * 32 + 9]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 490] * kernel_shared_1[threadIdx_x // 49 * 32 + 10]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 539] * kernel_shared_1[threadIdx_x // 49 * 32 + 11]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 588] * kernel_shared_1[threadIdx_x // 49 * 32 + 12]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 637] * kernel_shared_1[threadIdx_x // 49 * 32 + 13]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 686] * kernel_shared_1[threadIdx_x // 49 * 32 + 14]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 735] * kernel_shared_1[threadIdx_x // 49 * 32 + 15]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 784] * kernel_shared_1[threadIdx_x // 49 * 32 + 16]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 833] * kernel_shared_1[threadIdx_x // 49 * 32 + 17]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 882] * kernel_shared_1[threadIdx_x // 49 * 32 + 18]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 931] * kernel_shared_1[threadIdx_x // 49 * 32 + 19]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 980] * kernel_shared_1[threadIdx_x // 49 * 32 + 20]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1029] * kernel_shared_1[threadIdx_x // 49 * 32 + 21]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1078] * kernel_shared_1[threadIdx_x // 49 * 32 + 22]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1127] * kernel_shared_1[threadIdx_x // 49 * 32 + 23]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1176] * kernel_shared_1[threadIdx_x // 49 * 32 + 24]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1225] * kernel_shared_1[threadIdx_x // 49 * 32 + 25]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1274] * kernel_shared_1[threadIdx_x // 49 * 32 + 26]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1323] * kernel_shared_1[threadIdx_x // 49 * 32 + 27]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1372] * kernel_shared_1[threadIdx_x // 49 * 32 + 28]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1421] * kernel_shared_1[threadIdx_x // 49 * 32 + 29]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1470] * kernel_shared_1[threadIdx_x // 49 * 32 + 30]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1519] * kernel_shared_1[threadIdx_x // 49 * 32 + 31]
                with T.launch_thread(threadIdx_x_1, 784):
                    pad_temp_shared_1[threadIdx_x_1] = T.if_then_else(7 <= threadIdx_x_1 % 49 and threadIdx_x_1 % 7 < 6, data_1[rc_outer_outer * 1568 + threadIdx_x_1 - 6], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 784):
                    pad_temp_shared_1[threadIdx_x_1 + 784] = T.if_then_else(7 <= threadIdx_x_1 % 49 and threadIdx_x_1 % 7 < 6, data_1[rc_outer_outer * 1568 + threadIdx_x_1 + 778], T.float32(0))
                with T.launch_thread(threadIdx_x_2, 784):
                    if T.likely(threadIdx_x_2 < 512):
                        kernel_shared_1[threadIdx_x_2] = kernel_1[blockIdx_x * 73728 + threadIdx_x_2 // 32 * 4608 + rc_outer_outer * 288 + threadIdx_x_2 % 32 * 9 + 2]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49] * kernel_shared_1[threadIdx_x // 49 * 32]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 49] * kernel_shared_1[threadIdx_x // 49 * 32 + 1]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 98] * kernel_shared_1[threadIdx_x // 49 * 32 + 2]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 147] * kernel_shared_1[threadIdx_x // 49 * 32 + 3]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 196] * kernel_shared_1[threadIdx_x // 49 * 32 + 4]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 245] * kernel_shared_1[threadIdx_x // 49 * 32 + 5]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 294] * kernel_shared_1[threadIdx_x // 49 * 32 + 6]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 343] * kernel_shared_1[threadIdx_x // 49 * 32 + 7]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 392] * kernel_shared_1[threadIdx_x // 49 * 32 + 8]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 441] * kernel_shared_1[threadIdx_x // 49 * 32 + 9]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 490] * kernel_shared_1[threadIdx_x // 49 * 32 + 10]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 539] * kernel_shared_1[threadIdx_x // 49 * 32 + 11]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 588] * kernel_shared_1[threadIdx_x // 49 * 32 + 12]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 637] * kernel_shared_1[threadIdx_x // 49 * 32 + 13]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 686] * kernel_shared_1[threadIdx_x // 49 * 32 + 14]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 735] * kernel_shared_1[threadIdx_x // 49 * 32 + 15]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 784] * kernel_shared_1[threadIdx_x // 49 * 32 + 16]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 833] * kernel_shared_1[threadIdx_x // 49 * 32 + 17]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 882] * kernel_shared_1[threadIdx_x // 49 * 32 + 18]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 931] * kernel_shared_1[threadIdx_x // 49 * 32 + 19]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 980] * kernel_shared_1[threadIdx_x // 49 * 32 + 20]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1029] * kernel_shared_1[threadIdx_x // 49 * 32 + 21]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1078] * kernel_shared_1[threadIdx_x // 49 * 32 + 22]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1127] * kernel_shared_1[threadIdx_x // 49 * 32 + 23]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1176] * kernel_shared_1[threadIdx_x // 49 * 32 + 24]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1225] * kernel_shared_1[threadIdx_x // 49 * 32 + 25]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1274] * kernel_shared_1[threadIdx_x // 49 * 32 + 26]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1323] * kernel_shared_1[threadIdx_x // 49 * 32 + 27]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1372] * kernel_shared_1[threadIdx_x // 49 * 32 + 28]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1421] * kernel_shared_1[threadIdx_x // 49 * 32 + 29]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1470] * kernel_shared_1[threadIdx_x // 49 * 32 + 30]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1519] * kernel_shared_1[threadIdx_x // 49 * 32 + 31]
                with T.launch_thread(threadIdx_x_1, 784):
                    pad_temp_shared_1[threadIdx_x_1] = T.if_then_else(1 <= threadIdx_x_1 % 7, data_1[rc_outer_outer * 1568 + threadIdx_x_1 - 1], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 784):
                    pad_temp_shared_1[threadIdx_x_1 + 784] = T.if_then_else(1 <= threadIdx_x_1 % 7, data_1[rc_outer_outer * 1568 + threadIdx_x_1 + 783], T.float32(0))
                with T.launch_thread(threadIdx_x_2, 784):
                    if T.likely(threadIdx_x_2 < 512):
                        kernel_shared_1[threadIdx_x_2] = kernel_1[blockIdx_x * 73728 + threadIdx_x_2 // 32 * 4608 + rc_outer_outer * 288 + threadIdx_x_2 % 32 * 9 + 3]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49] * kernel_shared_1[threadIdx_x // 49 * 32]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 49] * kernel_shared_1[threadIdx_x // 49 * 32 + 1]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 98] * kernel_shared_1[threadIdx_x // 49 * 32 + 2]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 147] * kernel_shared_1[threadIdx_x // 49 * 32 + 3]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 196] * kernel_shared_1[threadIdx_x // 49 * 32 + 4]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 245] * kernel_shared_1[threadIdx_x // 49 * 32 + 5]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 294] * kernel_shared_1[threadIdx_x // 49 * 32 + 6]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 343] * kernel_shared_1[threadIdx_x // 49 * 32 + 7]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 392] * kernel_shared_1[threadIdx_x // 49 * 32 + 8]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 441] * kernel_shared_1[threadIdx_x // 49 * 32 + 9]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 490] * kernel_shared_1[threadIdx_x // 49 * 32 + 10]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 539] * kernel_shared_1[threadIdx_x // 49 * 32 + 11]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 588] * kernel_shared_1[threadIdx_x // 49 * 32 + 12]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 637] * kernel_shared_1[threadIdx_x // 49 * 32 + 13]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 686] * kernel_shared_1[threadIdx_x // 49 * 32 + 14]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 735] * kernel_shared_1[threadIdx_x // 49 * 32 + 15]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 784] * kernel_shared_1[threadIdx_x // 49 * 32 + 16]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 833] * kernel_shared_1[threadIdx_x // 49 * 32 + 17]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 882] * kernel_shared_1[threadIdx_x // 49 * 32 + 18]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 931] * kernel_shared_1[threadIdx_x // 49 * 32 + 19]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 980] * kernel_shared_1[threadIdx_x // 49 * 32 + 20]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1029] * kernel_shared_1[threadIdx_x // 49 * 32 + 21]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1078] * kernel_shared_1[threadIdx_x // 49 * 32 + 22]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1127] * kernel_shared_1[threadIdx_x // 49 * 32 + 23]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1176] * kernel_shared_1[threadIdx_x // 49 * 32 + 24]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1225] * kernel_shared_1[threadIdx_x // 49 * 32 + 25]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1274] * kernel_shared_1[threadIdx_x // 49 * 32 + 26]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1323] * kernel_shared_1[threadIdx_x // 49 * 32 + 27]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1372] * kernel_shared_1[threadIdx_x // 49 * 32 + 28]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1421] * kernel_shared_1[threadIdx_x // 49 * 32 + 29]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1470] * kernel_shared_1[threadIdx_x // 49 * 32 + 30]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1519] * kernel_shared_1[threadIdx_x // 49 * 32 + 31]
                with T.launch_thread(threadIdx_x_1, 784):
                    pad_temp_shared_1[threadIdx_x_1] = data_1[rc_outer_outer * 1568 + threadIdx_x_1]
                with T.launch_thread(threadIdx_x_1, 784):
                    pad_temp_shared_1[threadIdx_x_1 + 784] = data_1[rc_outer_outer * 1568 + threadIdx_x_1 + 784]
                with T.launch_thread(threadIdx_x_2, 784):
                    if T.likely(threadIdx_x_2 < 512):
                        kernel_shared_1[threadIdx_x_2] = kernel_1[blockIdx_x * 73728 + threadIdx_x_2 // 32 * 4608 + rc_outer_outer * 288 + threadIdx_x_2 % 32 * 9 + 4]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49] * kernel_shared_1[threadIdx_x // 49 * 32]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 49] * kernel_shared_1[threadIdx_x // 49 * 32 + 1]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 98] * kernel_shared_1[threadIdx_x // 49 * 32 + 2]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 147] * kernel_shared_1[threadIdx_x // 49 * 32 + 3]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 196] * kernel_shared_1[threadIdx_x // 49 * 32 + 4]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 245] * kernel_shared_1[threadIdx_x // 49 * 32 + 5]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 294] * kernel_shared_1[threadIdx_x // 49 * 32 + 6]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 343] * kernel_shared_1[threadIdx_x // 49 * 32 + 7]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 392] * kernel_shared_1[threadIdx_x // 49 * 32 + 8]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 441] * kernel_shared_1[threadIdx_x // 49 * 32 + 9]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 490] * kernel_shared_1[threadIdx_x // 49 * 32 + 10]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 539] * kernel_shared_1[threadIdx_x // 49 * 32 + 11]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 588] * kernel_shared_1[threadIdx_x // 49 * 32 + 12]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 637] * kernel_shared_1[threadIdx_x // 49 * 32 + 13]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 686] * kernel_shared_1[threadIdx_x // 49 * 32 + 14]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 735] * kernel_shared_1[threadIdx_x // 49 * 32 + 15]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 784] * kernel_shared_1[threadIdx_x // 49 * 32 + 16]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 833] * kernel_shared_1[threadIdx_x // 49 * 32 + 17]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 882] * kernel_shared_1[threadIdx_x // 49 * 32 + 18]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 931] * kernel_shared_1[threadIdx_x // 49 * 32 + 19]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 980] * kernel_shared_1[threadIdx_x // 49 * 32 + 20]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1029] * kernel_shared_1[threadIdx_x // 49 * 32 + 21]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1078] * kernel_shared_1[threadIdx_x // 49 * 32 + 22]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1127] * kernel_shared_1[threadIdx_x // 49 * 32 + 23]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1176] * kernel_shared_1[threadIdx_x // 49 * 32 + 24]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1225] * kernel_shared_1[threadIdx_x // 49 * 32 + 25]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1274] * kernel_shared_1[threadIdx_x // 49 * 32 + 26]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1323] * kernel_shared_1[threadIdx_x // 49 * 32 + 27]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1372] * kernel_shared_1[threadIdx_x // 49 * 32 + 28]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1421] * kernel_shared_1[threadIdx_x // 49 * 32 + 29]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1470] * kernel_shared_1[threadIdx_x // 49 * 32 + 30]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1519] * kernel_shared_1[threadIdx_x // 49 * 32 + 31]
                with T.launch_thread(threadIdx_x_1, 784):
                    pad_temp_shared_1[threadIdx_x_1] = T.if_then_else(threadIdx_x_1 % 7 < 6, data_1[rc_outer_outer * 1568 + threadIdx_x_1 + 1], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 784):
                    pad_temp_shared_1[threadIdx_x_1 + 784] = T.if_then_else(threadIdx_x_1 % 7 < 6, data_1[rc_outer_outer * 1568 + threadIdx_x_1 + 785], T.float32(0))
                with T.launch_thread(threadIdx_x_2, 784):
                    if T.likely(threadIdx_x_2 < 512):
                        kernel_shared_1[threadIdx_x_2] = kernel_1[blockIdx_x * 73728 + threadIdx_x_2 // 32 * 4608 + rc_outer_outer * 288 + threadIdx_x_2 % 32 * 9 + 5]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49] * kernel_shared_1[threadIdx_x // 49 * 32]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 49] * kernel_shared_1[threadIdx_x // 49 * 32 + 1]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 98] * kernel_shared_1[threadIdx_x // 49 * 32 + 2]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 147] * kernel_shared_1[threadIdx_x // 49 * 32 + 3]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 196] * kernel_shared_1[threadIdx_x // 49 * 32 + 4]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 245] * kernel_shared_1[threadIdx_x // 49 * 32 + 5]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 294] * kernel_shared_1[threadIdx_x // 49 * 32 + 6]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 343] * kernel_shared_1[threadIdx_x // 49 * 32 + 7]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 392] * kernel_shared_1[threadIdx_x // 49 * 32 + 8]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 441] * kernel_shared_1[threadIdx_x // 49 * 32 + 9]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 490] * kernel_shared_1[threadIdx_x // 49 * 32 + 10]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 539] * kernel_shared_1[threadIdx_x // 49 * 32 + 11]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 588] * kernel_shared_1[threadIdx_x // 49 * 32 + 12]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 637] * kernel_shared_1[threadIdx_x // 49 * 32 + 13]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 686] * kernel_shared_1[threadIdx_x // 49 * 32 + 14]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 735] * kernel_shared_1[threadIdx_x // 49 * 32 + 15]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 784] * kernel_shared_1[threadIdx_x // 49 * 32 + 16]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 833] * kernel_shared_1[threadIdx_x // 49 * 32 + 17]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 882] * kernel_shared_1[threadIdx_x // 49 * 32 + 18]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 931] * kernel_shared_1[threadIdx_x // 49 * 32 + 19]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 980] * kernel_shared_1[threadIdx_x // 49 * 32 + 20]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1029] * kernel_shared_1[threadIdx_x // 49 * 32 + 21]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1078] * kernel_shared_1[threadIdx_x // 49 * 32 + 22]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1127] * kernel_shared_1[threadIdx_x // 49 * 32 + 23]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1176] * kernel_shared_1[threadIdx_x // 49 * 32 + 24]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1225] * kernel_shared_1[threadIdx_x // 49 * 32 + 25]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1274] * kernel_shared_1[threadIdx_x // 49 * 32 + 26]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1323] * kernel_shared_1[threadIdx_x // 49 * 32 + 27]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1372] * kernel_shared_1[threadIdx_x // 49 * 32 + 28]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1421] * kernel_shared_1[threadIdx_x // 49 * 32 + 29]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1470] * kernel_shared_1[threadIdx_x // 49 * 32 + 30]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1519] * kernel_shared_1[threadIdx_x // 49 * 32 + 31]
                with T.launch_thread(threadIdx_x_1, 784):
                    pad_temp_shared_1[threadIdx_x_1] = T.if_then_else(threadIdx_x_1 % 49 < 42 and 1 <= threadIdx_x_1 % 7, data_1[rc_outer_outer * 1568 + threadIdx_x_1 + 6], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 784):
                    pad_temp_shared_1[threadIdx_x_1 + 784] = T.if_then_else(threadIdx_x_1 % 49 < 42 and 1 <= threadIdx_x_1 % 7, data_1[rc_outer_outer * 1568 + threadIdx_x_1 + 790], T.float32(0))
                with T.launch_thread(threadIdx_x_2, 784):
                    if T.likely(threadIdx_x_2 < 512):
                        kernel_shared_1[threadIdx_x_2] = kernel_1[blockIdx_x * 73728 + threadIdx_x_2 // 32 * 4608 + rc_outer_outer * 288 + threadIdx_x_2 % 32 * 9 + 6]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49] * kernel_shared_1[threadIdx_x // 49 * 32]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 49] * kernel_shared_1[threadIdx_x // 49 * 32 + 1]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 98] * kernel_shared_1[threadIdx_x // 49 * 32 + 2]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 147] * kernel_shared_1[threadIdx_x // 49 * 32 + 3]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 196] * kernel_shared_1[threadIdx_x // 49 * 32 + 4]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 245] * kernel_shared_1[threadIdx_x // 49 * 32 + 5]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 294] * kernel_shared_1[threadIdx_x // 49 * 32 + 6]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 343] * kernel_shared_1[threadIdx_x // 49 * 32 + 7]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 392] * kernel_shared_1[threadIdx_x // 49 * 32 + 8]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 441] * kernel_shared_1[threadIdx_x // 49 * 32 + 9]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 490] * kernel_shared_1[threadIdx_x // 49 * 32 + 10]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 539] * kernel_shared_1[threadIdx_x // 49 * 32 + 11]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 588] * kernel_shared_1[threadIdx_x // 49 * 32 + 12]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 637] * kernel_shared_1[threadIdx_x // 49 * 32 + 13]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 686] * kernel_shared_1[threadIdx_x // 49 * 32 + 14]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 735] * kernel_shared_1[threadIdx_x // 49 * 32 + 15]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 784] * kernel_shared_1[threadIdx_x // 49 * 32 + 16]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 833] * kernel_shared_1[threadIdx_x // 49 * 32 + 17]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 882] * kernel_shared_1[threadIdx_x // 49 * 32 + 18]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 931] * kernel_shared_1[threadIdx_x // 49 * 32 + 19]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 980] * kernel_shared_1[threadIdx_x // 49 * 32 + 20]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1029] * kernel_shared_1[threadIdx_x // 49 * 32 + 21]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1078] * kernel_shared_1[threadIdx_x // 49 * 32 + 22]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1127] * kernel_shared_1[threadIdx_x // 49 * 32 + 23]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1176] * kernel_shared_1[threadIdx_x // 49 * 32 + 24]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1225] * kernel_shared_1[threadIdx_x // 49 * 32 + 25]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1274] * kernel_shared_1[threadIdx_x // 49 * 32 + 26]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1323] * kernel_shared_1[threadIdx_x // 49 * 32 + 27]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1372] * kernel_shared_1[threadIdx_x // 49 * 32 + 28]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1421] * kernel_shared_1[threadIdx_x // 49 * 32 + 29]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1470] * kernel_shared_1[threadIdx_x // 49 * 32 + 30]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1519] * kernel_shared_1[threadIdx_x // 49 * 32 + 31]
                with T.launch_thread(threadIdx_x_1, 784):
                    pad_temp_shared_1[threadIdx_x_1] = T.if_then_else(threadIdx_x_1 % 49 < 42, data_1[rc_outer_outer * 1568 + threadIdx_x_1 + 7], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 784):
                    pad_temp_shared_1[threadIdx_x_1 + 784] = T.if_then_else(threadIdx_x_1 % 49 < 42, data_1[rc_outer_outer * 1568 + threadIdx_x_1 + 791], T.float32(0))
                with T.launch_thread(threadIdx_x_2, 784):
                    if T.likely(threadIdx_x_2 < 512):
                        kernel_shared_1[threadIdx_x_2] = kernel_1[blockIdx_x * 73728 + threadIdx_x_2 // 32 * 4608 + rc_outer_outer * 288 + threadIdx_x_2 % 32 * 9 + 7]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49] * kernel_shared_1[threadIdx_x // 49 * 32]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 49] * kernel_shared_1[threadIdx_x // 49 * 32 + 1]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 98] * kernel_shared_1[threadIdx_x // 49 * 32 + 2]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 147] * kernel_shared_1[threadIdx_x // 49 * 32 + 3]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 196] * kernel_shared_1[threadIdx_x // 49 * 32 + 4]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 245] * kernel_shared_1[threadIdx_x // 49 * 32 + 5]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 294] * kernel_shared_1[threadIdx_x // 49 * 32 + 6]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 343] * kernel_shared_1[threadIdx_x // 49 * 32 + 7]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 392] * kernel_shared_1[threadIdx_x // 49 * 32 + 8]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 441] * kernel_shared_1[threadIdx_x // 49 * 32 + 9]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 490] * kernel_shared_1[threadIdx_x // 49 * 32 + 10]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 539] * kernel_shared_1[threadIdx_x // 49 * 32 + 11]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 588] * kernel_shared_1[threadIdx_x // 49 * 32 + 12]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 637] * kernel_shared_1[threadIdx_x // 49 * 32 + 13]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 686] * kernel_shared_1[threadIdx_x // 49 * 32 + 14]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 735] * kernel_shared_1[threadIdx_x // 49 * 32 + 15]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 784] * kernel_shared_1[threadIdx_x // 49 * 32 + 16]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 833] * kernel_shared_1[threadIdx_x // 49 * 32 + 17]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 882] * kernel_shared_1[threadIdx_x // 49 * 32 + 18]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 931] * kernel_shared_1[threadIdx_x // 49 * 32 + 19]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 980] * kernel_shared_1[threadIdx_x // 49 * 32 + 20]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1029] * kernel_shared_1[threadIdx_x // 49 * 32 + 21]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1078] * kernel_shared_1[threadIdx_x // 49 * 32 + 22]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1127] * kernel_shared_1[threadIdx_x // 49 * 32 + 23]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1176] * kernel_shared_1[threadIdx_x // 49 * 32 + 24]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1225] * kernel_shared_1[threadIdx_x // 49 * 32 + 25]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1274] * kernel_shared_1[threadIdx_x // 49 * 32 + 26]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1323] * kernel_shared_1[threadIdx_x // 49 * 32 + 27]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1372] * kernel_shared_1[threadIdx_x // 49 * 32 + 28]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1421] * kernel_shared_1[threadIdx_x // 49 * 32 + 29]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1470] * kernel_shared_1[threadIdx_x // 49 * 32 + 30]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1519] * kernel_shared_1[threadIdx_x // 49 * 32 + 31]
                with T.launch_thread(threadIdx_x_1, 784):
                    pad_temp_shared_1[threadIdx_x_1] = T.if_then_else(threadIdx_x_1 % 49 < 42 and threadIdx_x_1 % 7 < 6, data_1[rc_outer_outer * 1568 + threadIdx_x_1 + 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 784):
                    pad_temp_shared_1[threadIdx_x_1 + 784] = T.if_then_else(threadIdx_x_1 % 49 < 42 and threadIdx_x_1 % 7 < 6, data_1[rc_outer_outer * 1568 + threadIdx_x_1 + 792], T.float32(0))
                with T.launch_thread(threadIdx_x_2, 784):
                    if T.likely(threadIdx_x_2 < 512):
                        kernel_shared_1[threadIdx_x_2] = kernel_1[blockIdx_x * 73728 + threadIdx_x_2 // 32 * 4608 + rc_outer_outer * 288 + threadIdx_x_2 % 32 * 9 + 8]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49] * kernel_shared_1[threadIdx_x // 49 * 32]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 49] * kernel_shared_1[threadIdx_x // 49 * 32 + 1]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 98] * kernel_shared_1[threadIdx_x // 49 * 32 + 2]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 147] * kernel_shared_1[threadIdx_x // 49 * 32 + 3]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 196] * kernel_shared_1[threadIdx_x // 49 * 32 + 4]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 245] * kernel_shared_1[threadIdx_x // 49 * 32 + 5]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 294] * kernel_shared_1[threadIdx_x // 49 * 32 + 6]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 343] * kernel_shared_1[threadIdx_x // 49 * 32 + 7]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 392] * kernel_shared_1[threadIdx_x // 49 * 32 + 8]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 441] * kernel_shared_1[threadIdx_x // 49 * 32 + 9]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 490] * kernel_shared_1[threadIdx_x // 49 * 32 + 10]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 539] * kernel_shared_1[threadIdx_x // 49 * 32 + 11]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 588] * kernel_shared_1[threadIdx_x // 49 * 32 + 12]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 637] * kernel_shared_1[threadIdx_x // 49 * 32 + 13]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 686] * kernel_shared_1[threadIdx_x // 49 * 32 + 14]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 735] * kernel_shared_1[threadIdx_x // 49 * 32 + 15]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 784] * kernel_shared_1[threadIdx_x // 49 * 32 + 16]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 833] * kernel_shared_1[threadIdx_x // 49 * 32 + 17]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 882] * kernel_shared_1[threadIdx_x // 49 * 32 + 18]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 931] * kernel_shared_1[threadIdx_x // 49 * 32 + 19]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 980] * kernel_shared_1[threadIdx_x // 49 * 32 + 20]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1029] * kernel_shared_1[threadIdx_x // 49 * 32 + 21]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1078] * kernel_shared_1[threadIdx_x // 49 * 32 + 22]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1127] * kernel_shared_1[threadIdx_x // 49 * 32 + 23]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1176] * kernel_shared_1[threadIdx_x // 49 * 32 + 24]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1225] * kernel_shared_1[threadIdx_x // 49 * 32 + 25]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1274] * kernel_shared_1[threadIdx_x // 49 * 32 + 26]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1323] * kernel_shared_1[threadIdx_x // 49 * 32 + 27]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1372] * kernel_shared_1[threadIdx_x // 49 * 32 + 28]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1421] * kernel_shared_1[threadIdx_x // 49 * 32 + 29]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1470] * kernel_shared_1[threadIdx_x // 49 * 32 + 30]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[threadIdx_x % 49 + 1519] * kernel_shared_1[threadIdx_x // 49 * 32 + 31]
            compute_1 = T.Buffer((25088,), data=compute.data)
            bias_1 = T.Buffer((512,), data=bias.data)
            compute_1[blockIdx_x * 784 + threadIdx_x] = T.max(conv2d_nchw_1[0] + bias_1[blockIdx_x * 16 + threadIdx_x // 49], T.float32(0))




.. GENERATED FROM PYTHON SOURCE LINES 138-141

Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.

.. GENERATED FROM PYTHON SOURCE LINES 141-168

.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Execution time of this operator: 0.393 ms




.. GENERATED FROM PYTHON SOURCE LINES 169-174

Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

.. GENERATED FROM PYTHON SOURCE LINES 176-179

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.

.. GENERATED FROM PYTHON SOURCE LINES 179-186

.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=1)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=16)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=1)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=7)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=7)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=32)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=1)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=1)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=1)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=1)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=1)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=1)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=16)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=7)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=7)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=784)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=784)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 512)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(784) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[1];
      __shared__ float pad_temp_shared[1568];
      __shared__ float kernel_shared[512];
      conv2d_nchw[0] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 16; ++rc_outer_outer) {
        __syncthreads();
        pad_temp_shared[((int)threadIdx.x)] = (((7 <= (((int)threadIdx.x) % 49)) && (1 <= (((int)threadIdx.x) % 7))) ? data[(((rc_outer_outer * 1568) + ((int)threadIdx.x)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 784)] = (((7 <= (((int)threadIdx.x) % 49)) && (1 <= (((int)threadIdx.x) % 7))) ? data[(((rc_outer_outer * 1568) + ((int)threadIdx.x)) + 776)] : 0.000000e+00f);
        if (((int)threadIdx.x) < 512) {
          kernel_shared[((int)threadIdx.x)] = kernel[((((((int)blockIdx.x) * 73728) + ((((int)threadIdx.x) >> 5) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) & 31) * 9))];
        }
        __syncthreads();
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((int)threadIdx.x) % 49)] * kernel_shared[((((int)threadIdx.x) / 49) * 32)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 49)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 1)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 98)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 2)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 147)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 3)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 196)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 4)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 245)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 5)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 294)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 6)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 343)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 7)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 392)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 8)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 441)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 9)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 490)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 10)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 539)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 11)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 588)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 12)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 637)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 13)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 686)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 14)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 735)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 15)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 784)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 16)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 833)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 17)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 882)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 18)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 931)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 19)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 980)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 20)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1029)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 21)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1078)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 22)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1127)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 23)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1176)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 24)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1225)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 25)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1274)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 26)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1323)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 27)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1372)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 28)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1421)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 29)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1470)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 30)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1519)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 31)]));
        __syncthreads();
        pad_temp_shared[((int)threadIdx.x)] = ((7 <= (((int)threadIdx.x) % 49)) ? data[(((rc_outer_outer * 1568) + ((int)threadIdx.x)) - 7)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 784)] = ((7 <= (((int)threadIdx.x) % 49)) ? data[(((rc_outer_outer * 1568) + ((int)threadIdx.x)) + 777)] : 0.000000e+00f);
        if (((int)threadIdx.x) < 512) {
          kernel_shared[((int)threadIdx.x)] = kernel[(((((((int)blockIdx.x) * 73728) + ((((int)threadIdx.x) >> 5) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) & 31) * 9)) + 1)];
        }
        __syncthreads();
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((int)threadIdx.x) % 49)] * kernel_shared[((((int)threadIdx.x) / 49) * 32)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 49)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 1)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 98)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 2)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 147)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 3)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 196)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 4)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 245)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 5)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 294)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 6)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 343)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 7)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 392)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 8)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 441)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 9)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 490)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 10)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 539)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 11)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 588)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 12)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 637)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 13)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 686)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 14)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 735)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 15)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 784)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 16)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 833)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 17)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 882)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 18)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 931)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 19)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 980)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 20)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1029)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 21)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1078)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 22)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1127)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 23)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1176)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 24)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1225)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 25)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1274)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 26)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1323)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 27)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1372)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 28)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1421)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 29)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1470)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 30)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1519)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 31)]));
        __syncthreads();
        pad_temp_shared[((int)threadIdx.x)] = (((7 <= (((int)threadIdx.x) % 49)) && ((((int)threadIdx.x) % 7) < 6)) ? data[(((rc_outer_outer * 1568) + ((int)threadIdx.x)) - 6)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 784)] = (((7 <= (((int)threadIdx.x) % 49)) && ((((int)threadIdx.x) % 7) < 6)) ? data[(((rc_outer_outer * 1568) + ((int)threadIdx.x)) + 778)] : 0.000000e+00f);
        if (((int)threadIdx.x) < 512) {
          kernel_shared[((int)threadIdx.x)] = kernel[(((((((int)blockIdx.x) * 73728) + ((((int)threadIdx.x) >> 5) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) & 31) * 9)) + 2)];
        }
        __syncthreads();
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((int)threadIdx.x) % 49)] * kernel_shared[((((int)threadIdx.x) / 49) * 32)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 49)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 1)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 98)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 2)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 147)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 3)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 196)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 4)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 245)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 5)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 294)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 6)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 343)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 7)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 392)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 8)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 441)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 9)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 490)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 10)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 539)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 11)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 588)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 12)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 637)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 13)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 686)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 14)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 735)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 15)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 784)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 16)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 833)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 17)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 882)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 18)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 931)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 19)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 980)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 20)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1029)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 21)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1078)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 22)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1127)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 23)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1176)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 24)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1225)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 25)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1274)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 26)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1323)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 27)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1372)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 28)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1421)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 29)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1470)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 30)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1519)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 31)]));
        __syncthreads();
        pad_temp_shared[((int)threadIdx.x)] = ((1 <= (((int)threadIdx.x) % 7)) ? data[(((rc_outer_outer * 1568) + ((int)threadIdx.x)) - 1)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 784)] = ((1 <= (((int)threadIdx.x) % 7)) ? data[(((rc_outer_outer * 1568) + ((int)threadIdx.x)) + 783)] : 0.000000e+00f);
        if (((int)threadIdx.x) < 512) {
          kernel_shared[((int)threadIdx.x)] = kernel[(((((((int)blockIdx.x) * 73728) + ((((int)threadIdx.x) >> 5) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) & 31) * 9)) + 3)];
        }
        __syncthreads();
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((int)threadIdx.x) % 49)] * kernel_shared[((((int)threadIdx.x) / 49) * 32)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 49)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 1)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 98)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 2)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 147)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 3)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 196)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 4)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 245)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 5)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 294)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 6)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 343)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 7)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 392)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 8)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 441)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 9)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 490)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 10)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 539)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 11)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 588)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 12)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 637)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 13)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 686)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 14)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 735)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 15)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 784)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 16)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 833)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 17)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 882)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 18)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 931)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 19)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 980)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 20)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1029)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 21)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1078)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 22)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1127)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 23)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1176)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 24)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1225)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 25)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1274)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 26)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1323)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 27)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1372)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 28)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1421)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 29)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1470)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 30)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1519)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 31)]));
        __syncthreads();
        pad_temp_shared[((int)threadIdx.x)] = data[((rc_outer_outer * 1568) + ((int)threadIdx.x))];
        pad_temp_shared[(((int)threadIdx.x) + 784)] = data[(((rc_outer_outer * 1568) + ((int)threadIdx.x)) + 784)];
        if (((int)threadIdx.x) < 512) {
          kernel_shared[((int)threadIdx.x)] = kernel[(((((((int)blockIdx.x) * 73728) + ((((int)threadIdx.x) >> 5) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) & 31) * 9)) + 4)];
        }
        __syncthreads();
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((int)threadIdx.x) % 49)] * kernel_shared[((((int)threadIdx.x) / 49) * 32)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 49)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 1)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 98)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 2)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 147)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 3)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 196)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 4)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 245)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 5)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 294)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 6)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 343)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 7)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 392)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 8)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 441)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 9)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 490)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 10)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 539)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 11)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 588)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 12)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 637)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 13)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 686)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 14)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 735)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 15)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 784)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 16)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 833)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 17)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 882)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 18)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 931)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 19)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 980)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 20)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1029)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 21)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1078)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 22)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1127)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 23)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1176)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 24)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1225)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 25)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1274)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 26)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1323)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 27)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1372)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 28)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1421)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 29)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1470)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 30)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1519)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 31)]));
        __syncthreads();
        pad_temp_shared[((int)threadIdx.x)] = (((((int)threadIdx.x) % 7) < 6) ? data[(((rc_outer_outer * 1568) + ((int)threadIdx.x)) + 1)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 784)] = (((((int)threadIdx.x) % 7) < 6) ? data[(((rc_outer_outer * 1568) + ((int)threadIdx.x)) + 785)] : 0.000000e+00f);
        if (((int)threadIdx.x) < 512) {
          kernel_shared[((int)threadIdx.x)] = kernel[(((((((int)blockIdx.x) * 73728) + ((((int)threadIdx.x) >> 5) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) & 31) * 9)) + 5)];
        }
        __syncthreads();
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((int)threadIdx.x) % 49)] * kernel_shared[((((int)threadIdx.x) / 49) * 32)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 49)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 1)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 98)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 2)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 147)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 3)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 196)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 4)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 245)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 5)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 294)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 6)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 343)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 7)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 392)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 8)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 441)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 9)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 490)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 10)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 539)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 11)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 588)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 12)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 637)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 13)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 686)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 14)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 735)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 15)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 784)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 16)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 833)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 17)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 882)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 18)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 931)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 19)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 980)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 20)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1029)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 21)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1078)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 22)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1127)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 23)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1176)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 24)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1225)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 25)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1274)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 26)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1323)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 27)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1372)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 28)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1421)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 29)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1470)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 30)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1519)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 31)]));
        __syncthreads();
        pad_temp_shared[((int)threadIdx.x)] = ((((((int)threadIdx.x) % 49) < 42) && (1 <= (((int)threadIdx.x) % 7))) ? data[(((rc_outer_outer * 1568) + ((int)threadIdx.x)) + 6)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 784)] = ((((((int)threadIdx.x) % 49) < 42) && (1 <= (((int)threadIdx.x) % 7))) ? data[(((rc_outer_outer * 1568) + ((int)threadIdx.x)) + 790)] : 0.000000e+00f);
        if (((int)threadIdx.x) < 512) {
          kernel_shared[((int)threadIdx.x)] = kernel[(((((((int)blockIdx.x) * 73728) + ((((int)threadIdx.x) >> 5) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) & 31) * 9)) + 6)];
        }
        __syncthreads();
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((int)threadIdx.x) % 49)] * kernel_shared[((((int)threadIdx.x) / 49) * 32)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 49)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 1)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 98)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 2)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 147)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 3)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 196)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 4)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 245)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 5)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 294)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 6)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 343)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 7)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 392)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 8)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 441)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 9)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 490)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 10)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 539)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 11)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 588)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 12)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 637)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 13)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 686)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 14)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 735)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 15)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 784)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 16)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 833)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 17)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 882)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 18)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 931)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 19)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 980)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 20)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1029)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 21)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1078)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 22)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1127)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 23)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1176)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 24)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1225)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 25)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1274)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 26)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1323)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 27)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1372)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 28)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1421)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 29)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1470)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 30)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1519)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 31)]));
        __syncthreads();
        pad_temp_shared[((int)threadIdx.x)] = (((((int)threadIdx.x) % 49) < 42) ? data[(((rc_outer_outer * 1568) + ((int)threadIdx.x)) + 7)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 784)] = (((((int)threadIdx.x) % 49) < 42) ? data[(((rc_outer_outer * 1568) + ((int)threadIdx.x)) + 791)] : 0.000000e+00f);
        if (((int)threadIdx.x) < 512) {
          kernel_shared[((int)threadIdx.x)] = kernel[(((((((int)blockIdx.x) * 73728) + ((((int)threadIdx.x) >> 5) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) & 31) * 9)) + 7)];
        }
        __syncthreads();
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((int)threadIdx.x) % 49)] * kernel_shared[((((int)threadIdx.x) / 49) * 32)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 49)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 1)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 98)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 2)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 147)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 3)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 196)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 4)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 245)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 5)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 294)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 6)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 343)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 7)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 392)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 8)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 441)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 9)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 490)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 10)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 539)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 11)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 588)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 12)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 637)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 13)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 686)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 14)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 735)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 15)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 784)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 16)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 833)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 17)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 882)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 18)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 931)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 19)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 980)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 20)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1029)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 21)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1078)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 22)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1127)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 23)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1176)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 24)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1225)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 25)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1274)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 26)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1323)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 27)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1372)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 28)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1421)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 29)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1470)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 30)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1519)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 31)]));
        __syncthreads();
        pad_temp_shared[((int)threadIdx.x)] = ((((((int)threadIdx.x) % 49) < 42) && ((((int)threadIdx.x) % 7) < 6)) ? data[(((rc_outer_outer * 1568) + ((int)threadIdx.x)) + 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 784)] = ((((((int)threadIdx.x) % 49) < 42) && ((((int)threadIdx.x) % 7) < 6)) ? data[(((rc_outer_outer * 1568) + ((int)threadIdx.x)) + 792)] : 0.000000e+00f);
        if (((int)threadIdx.x) < 512) {
          kernel_shared[((int)threadIdx.x)] = kernel[(((((((int)blockIdx.x) * 73728) + ((((int)threadIdx.x) >> 5) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) & 31) * 9)) + 8)];
        }
        __syncthreads();
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((int)threadIdx.x) % 49)] * kernel_shared[((((int)threadIdx.x) / 49) * 32)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 49)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 1)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 98)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 2)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 147)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 3)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 196)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 4)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 245)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 5)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 294)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 6)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 343)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 7)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 392)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 8)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 441)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 9)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 490)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 10)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 539)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 11)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 588)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 12)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 637)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 13)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 686)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 14)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 735)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 15)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 784)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 16)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 833)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 17)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 882)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 18)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 931)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 19)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 980)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 20)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1029)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 21)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1078)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 22)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1127)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 23)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1176)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 24)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1225)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 25)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1274)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 26)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1323)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 27)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1372)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 28)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1421)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 29)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1470)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 30)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1519)] * kernel_shared[(((((int)threadIdx.x) / 49) * 32) + 31)]));
      }
      compute[((((int)blockIdx.x) * 784) + ((int)threadIdx.x))] = max((conv2d_nchw[0] + bias[((((int)blockIdx.x) * 16) + (((int)threadIdx.x) / 49))]), 0.000000e+00f);
    }






.. GENERATED FROM PYTHON SOURCE LINES 187-191

A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.

.. GENERATED FROM PYTHON SOURCE LINES 191-213

.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resume search:
    /venv/apache-tvm-py3.7/lib/python3.7/site-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  58.924 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
