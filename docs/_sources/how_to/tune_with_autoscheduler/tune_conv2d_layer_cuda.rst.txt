
.. DO NOT EDIT. THIS FILE WAS AUTOMATICALLY GENERATED BY
.. TVM'S MONKEY-PATCHED VERSION OF SPHINX-GALLERY. TO MAKE
.. CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.py"

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        This tutorial can be used interactively with Google Colab! You can also click
        :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>` to run the Jupyter notebook locally.

        .. image:: https://raw.githubusercontent.com/tlc-pack/web-data/main/images/utilities/colab_button.svg
            :align: center
            :target: https://colab.research.google.com/github/apache/tvm-site/blob/asf-site/docs/_downloads/5f1f7bd7d90710fd404f7bcdc4965622/tune_conv2d_layer_cuda.ipynb
            :width: 300px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.

.. GENERATED FROM PYTHON SOURCE LINES 39-47

.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python








.. GENERATED FROM PYTHON SOURCE LINES 51-56

Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.

.. GENERATED FROM PYTHON SOURCE LINES 56-68

.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]









.. GENERATED FROM PYTHON SOURCE LINES 69-72

Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.

.. GENERATED FROM PYTHON SOURCE LINES 72-85

.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)





.. GENERATED FROM PYTHON SOURCE LINES 86-103

Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the main process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.

.. GENERATED FROM PYTHON SOURCE LINES 103-113

.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Get devices for measurement successfully!




.. GENERATED FROM PYTHON SOURCE LINES 114-120

Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.

.. GENERATED FROM PYTHON SOURCE LINES 120-129

.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx








.. GENERATED FROM PYTHON SOURCE LINES 130-133

We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.

.. GENERATED FROM PYTHON SOURCE LINES 133-137

.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Lowered TIR:
    # from tvm.script import ir as I
    # from tvm.script import tir as T

    @I.ir_module
    class Module:
        @T.prim_func
        def main(data: T.Buffer((1, 512, 7, 7), "float32"), kernel: T.Buffer((512, 512, 3, 3), "float32"), bias: T.Buffer((1, 512, 1, 1), "float32"), compute: T.Buffer((1, 512, 7, 7), "float32")):
            T.func_attr({"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True})
            blockIdx_x = T.launch_thread("blockIdx.x", 56)
            conv2d_nchw = T.allocate([7], "float32", "local")
            pad_temp_shared = T.allocate([336], "float32", "shared")
            kernel_shared = T.allocate([3072], "float32", "shared")
            threadIdx_x = T.launch_thread("threadIdx.x", 64)
            conv2d_nchw_1 = T.Buffer((7,), data=conv2d_nchw, scope="local", align=16)
            conv2d_nchw_1[0] = T.float32(0)
            conv2d_nchw_1[1] = T.float32(0)
            conv2d_nchw_1[2] = T.float32(0)
            conv2d_nchw_1[3] = T.float32(0)
            conv2d_nchw_1[4] = T.float32(0)
            conv2d_nchw_1[5] = T.float32(0)
            conv2d_nchw_1[6] = T.float32(0)
            for rc_outer_outer, ry_outer_outer in T.grid(32, 3):
                cse_var_4: T.int32 = rc_outer_outer * 784
                cse_var_3: T.int32 = ry_outer_outer * 7
                cse_var_2: T.int32 = rc_outer_outer * 144
                cse_var_1: T.int32 = ry_outer_outer * 3
                threadIdx_x_1 = T.env_thread("threadIdx.x")
                pad_temp_shared_1 = T.Buffer((336,), data=pad_temp_shared, scope="shared")
                data_1 = T.Buffer((25088,), data=data.data)
                with T.launch_thread(threadIdx_x_1, 64):
                    pad_temp_shared_1[threadIdx_x_1] = T.if_then_else(1 <= threadIdx_x_1 % 21 // 3 + ry_outer_outer and threadIdx_x_1 % 21 // 3 + ry_outer_outer < 8 and 1 <= blockIdx_x % 7 + threadIdx_x_1 % 3 and blockIdx_x % 7 + threadIdx_x_1 % 3 < 8, data_1[cse_var_4 + threadIdx_x_1 // 3 * 7 + cse_var_3 + blockIdx_x % 7 + threadIdx_x_1 % 3 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 64):
                    pad_temp_shared_1[threadIdx_x_1 + 64] = T.if_then_else(1 <= (threadIdx_x_1 + 1) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 + 1) % 21 // 3 + ry_outer_outer < 8 and 1 <= blockIdx_x % 7 + (threadIdx_x_1 + 1) % 3 and blockIdx_x % 7 + (threadIdx_x_1 + 1) % 3 < 8, data_1[cse_var_4 + (threadIdx_x_1 + 64) // 3 * 7 + cse_var_3 + blockIdx_x % 7 + (threadIdx_x_1 + 1) % 3 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 64):
                    pad_temp_shared_1[threadIdx_x_1 + 128] = T.if_then_else(1 <= (threadIdx_x_1 + 2) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 + 2) % 21 // 3 + ry_outer_outer < 8 and 1 <= blockIdx_x % 7 + (threadIdx_x_1 + 2) % 3 and blockIdx_x % 7 + (threadIdx_x_1 + 2) % 3 < 8, data_1[cse_var_4 + (threadIdx_x_1 + 128) // 3 * 7 + cse_var_3 + blockIdx_x % 7 + (threadIdx_x_1 + 2) % 3 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 64):
                    pad_temp_shared_1[threadIdx_x_1 + 192] = T.if_then_else(1 <= ry_outer_outer + (threadIdx_x_1 // 3 + 1) % 7 and ry_outer_outer + (threadIdx_x_1 // 3 + 1) % 7 < 8 and 1 <= blockIdx_x % 7 + threadIdx_x_1 % 3 and blockIdx_x % 7 + threadIdx_x_1 % 3 < 8, data_1[cse_var_4 + threadIdx_x_1 // 3 * 7 + cse_var_3 + blockIdx_x % 7 + threadIdx_x_1 % 3 + 440], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 64):
                    pad_temp_shared_1[threadIdx_x_1 + 256] = T.if_then_else(1 <= (threadIdx_x_1 + 4) % 21 // 3 + ry_outer_outer and (threadIdx_x_1 + 4) % 21 // 3 + ry_outer_outer < 8 and 1 <= blockIdx_x % 7 + (threadIdx_x_1 + 1) % 3 and blockIdx_x % 7 + (threadIdx_x_1 + 1) % 3 < 8, data_1[cse_var_4 + (threadIdx_x_1 + 256) // 3 * 7 + cse_var_3 + blockIdx_x % 7 + (threadIdx_x_1 + 1) % 3 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 64):
                    if T.likely(threadIdx_x_1 < 16):
                        pad_temp_shared_1[threadIdx_x_1 + 320] = T.if_then_else((threadIdx_x_1 + 5) // 3 + ry_outer_outer < 8 and 1 <= blockIdx_x % 7 + (threadIdx_x_1 + 2) % 3 and blockIdx_x % 7 + (threadIdx_x_1 + 2) % 3 < 8, data_1[cse_var_4 + (threadIdx_x_1 + 320) // 3 * 7 + cse_var_3 + blockIdx_x % 7 + (threadIdx_x_1 + 2) % 3 - 8], T.float32(0))
                threadIdx_x_2 = T.env_thread("threadIdx.x")
                kernel_shared_1 = T.Buffer((3072,), data=kernel_shared, scope="shared")
                kernel_1 = T.Buffer((2359296,), data=kernel.data)
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[threadIdx_x_2] = kernel_1[blockIdx_x // 7 * 294912 + threadIdx_x_2 // 48 * 4608 + cse_var_2 + threadIdx_x_2 % 48 // 3 * 9 + cse_var_1 + threadIdx_x_2 % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 64) // 48 * 48 + (threadIdx_x_2 + 16) % 48 // 3 * 3 + (threadIdx_x_2 + 1) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 64) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 16) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 128) // 48 * 48 + (threadIdx_x_2 + 32) % 48 // 3 * 3 + (threadIdx_x_2 + 2) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 128) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 32) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[threadIdx_x_2 + 192] = kernel_1[blockIdx_x // 7 * 294912 + threadIdx_x_2 // 48 * 4608 + cse_var_2 + threadIdx_x_2 % 48 // 3 * 9 + cse_var_1 + threadIdx_x_2 % 3 + 18432]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 256) // 48 * 48 + (threadIdx_x_2 + 16) % 48 // 3 * 3 + (threadIdx_x_2 + 1) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 256) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 16) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 320) // 48 * 48 + (threadIdx_x_2 + 32) % 48 // 3 * 3 + (threadIdx_x_2 + 2) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 320) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 32) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[threadIdx_x_2 + 384] = kernel_1[blockIdx_x // 7 * 294912 + threadIdx_x_2 // 48 * 4608 + cse_var_2 + threadIdx_x_2 % 48 // 3 * 9 + cse_var_1 + threadIdx_x_2 % 3 + 36864]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 448) // 48 * 48 + (threadIdx_x_2 + 16) % 48 // 3 * 3 + (threadIdx_x_2 + 1) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 448) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 16) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 512) // 48 * 48 + (threadIdx_x_2 + 32) % 48 // 3 * 3 + (threadIdx_x_2 + 2) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 512) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 32) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[threadIdx_x_2 + 576] = kernel_1[blockIdx_x // 7 * 294912 + threadIdx_x_2 // 48 * 4608 + cse_var_2 + threadIdx_x_2 % 48 // 3 * 9 + cse_var_1 + threadIdx_x_2 % 3 + 55296]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 640) // 48 * 48 + (threadIdx_x_2 + 16) % 48 // 3 * 3 + (threadIdx_x_2 + 1) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 640) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 16) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 704) // 48 * 48 + (threadIdx_x_2 + 32) % 48 // 3 * 3 + (threadIdx_x_2 + 2) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 704) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 32) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[threadIdx_x_2 + 768] = kernel_1[blockIdx_x // 7 * 294912 + threadIdx_x_2 // 48 * 4608 + cse_var_2 + threadIdx_x_2 % 48 // 3 * 9 + cse_var_1 + threadIdx_x_2 % 3 + 73728]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 832) // 48 * 48 + (threadIdx_x_2 + 16) % 48 // 3 * 3 + (threadIdx_x_2 + 1) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 832) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 16) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 896) // 48 * 48 + (threadIdx_x_2 + 32) % 48 // 3 * 3 + (threadIdx_x_2 + 2) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 896) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 32) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[threadIdx_x_2 + 960] = kernel_1[blockIdx_x // 7 * 294912 + threadIdx_x_2 // 48 * 4608 + cse_var_2 + threadIdx_x_2 % 48 // 3 * 9 + cse_var_1 + threadIdx_x_2 % 3 + 92160]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 1024) // 48 * 48 + (threadIdx_x_2 + 16) % 48 // 3 * 3 + (threadIdx_x_2 + 1) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 1024) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 16) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 1088) // 48 * 48 + (threadIdx_x_2 + 32) % 48 // 3 * 3 + (threadIdx_x_2 + 2) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 1088) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 32) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[threadIdx_x_2 + 1152] = kernel_1[blockIdx_x // 7 * 294912 + threadIdx_x_2 // 48 * 4608 + cse_var_2 + threadIdx_x_2 % 48 // 3 * 9 + cse_var_1 + threadIdx_x_2 % 3 + 110592]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 1216) // 48 * 48 + (threadIdx_x_2 + 16) % 48 // 3 * 3 + (threadIdx_x_2 + 1) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 1216) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 16) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 1280) // 48 * 48 + (threadIdx_x_2 + 32) % 48 // 3 * 3 + (threadIdx_x_2 + 2) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 1280) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 32) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[threadIdx_x_2 + 1344] = kernel_1[blockIdx_x // 7 * 294912 + threadIdx_x_2 // 48 * 4608 + cse_var_2 + threadIdx_x_2 % 48 // 3 * 9 + cse_var_1 + threadIdx_x_2 % 3 + 129024]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 1408) // 48 * 48 + (threadIdx_x_2 + 16) % 48 // 3 * 3 + (threadIdx_x_2 + 1) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 1408) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 16) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 1472) // 48 * 48 + (threadIdx_x_2 + 32) % 48 // 3 * 3 + (threadIdx_x_2 + 2) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 1472) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 32) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[threadIdx_x_2 + 1536] = kernel_1[blockIdx_x // 7 * 294912 + threadIdx_x_2 // 48 * 4608 + cse_var_2 + threadIdx_x_2 % 48 // 3 * 9 + cse_var_1 + threadIdx_x_2 % 3 + 147456]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 1600) // 48 * 48 + (threadIdx_x_2 + 16) % 48 // 3 * 3 + (threadIdx_x_2 + 1) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 1600) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 16) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 1664) // 48 * 48 + (threadIdx_x_2 + 32) % 48 // 3 * 3 + (threadIdx_x_2 + 2) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 1664) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 32) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[threadIdx_x_2 + 1728] = kernel_1[blockIdx_x // 7 * 294912 + threadIdx_x_2 // 48 * 4608 + cse_var_2 + threadIdx_x_2 % 48 // 3 * 9 + cse_var_1 + threadIdx_x_2 % 3 + 165888]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 1792) // 48 * 48 + (threadIdx_x_2 + 16) % 48 // 3 * 3 + (threadIdx_x_2 + 1) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 1792) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 16) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 1856) // 48 * 48 + (threadIdx_x_2 + 32) % 48 // 3 * 3 + (threadIdx_x_2 + 2) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 1856) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 32) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[threadIdx_x_2 + 1920] = kernel_1[blockIdx_x // 7 * 294912 + threadIdx_x_2 // 48 * 4608 + cse_var_2 + threadIdx_x_2 % 48 // 3 * 9 + cse_var_1 + threadIdx_x_2 % 3 + 184320]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 1984) // 48 * 48 + (threadIdx_x_2 + 16) % 48 // 3 * 3 + (threadIdx_x_2 + 1) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 1984) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 16) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 2048) // 48 * 48 + (threadIdx_x_2 + 32) % 48 // 3 * 3 + (threadIdx_x_2 + 2) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 2048) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 32) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[threadIdx_x_2 + 2112] = kernel_1[blockIdx_x // 7 * 294912 + threadIdx_x_2 // 48 * 4608 + cse_var_2 + threadIdx_x_2 % 48 // 3 * 9 + cse_var_1 + threadIdx_x_2 % 3 + 202752]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 2176) // 48 * 48 + (threadIdx_x_2 + 16) % 48 // 3 * 3 + (threadIdx_x_2 + 1) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 2176) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 16) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 2240) // 48 * 48 + (threadIdx_x_2 + 32) % 48 // 3 * 3 + (threadIdx_x_2 + 2) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 2240) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 32) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[threadIdx_x_2 + 2304] = kernel_1[blockIdx_x // 7 * 294912 + threadIdx_x_2 // 48 * 4608 + cse_var_2 + threadIdx_x_2 % 48 // 3 * 9 + cse_var_1 + threadIdx_x_2 % 3 + 221184]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 2368) // 48 * 48 + (threadIdx_x_2 + 16) % 48 // 3 * 3 + (threadIdx_x_2 + 1) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 2368) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 16) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 2432) // 48 * 48 + (threadIdx_x_2 + 32) % 48 // 3 * 3 + (threadIdx_x_2 + 2) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 2432) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 32) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[threadIdx_x_2 + 2496] = kernel_1[blockIdx_x // 7 * 294912 + threadIdx_x_2 // 48 * 4608 + cse_var_2 + threadIdx_x_2 % 48 // 3 * 9 + cse_var_1 + threadIdx_x_2 % 3 + 239616]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 2560) // 48 * 48 + (threadIdx_x_2 + 16) % 48 // 3 * 3 + (threadIdx_x_2 + 1) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 2560) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 16) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 2624) // 48 * 48 + (threadIdx_x_2 + 32) % 48 // 3 * 3 + (threadIdx_x_2 + 2) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 2624) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 32) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[threadIdx_x_2 + 2688] = kernel_1[blockIdx_x // 7 * 294912 + threadIdx_x_2 // 48 * 4608 + cse_var_2 + threadIdx_x_2 % 48 // 3 * 9 + cse_var_1 + threadIdx_x_2 % 3 + 258048]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 2752) // 48 * 48 + (threadIdx_x_2 + 16) % 48 // 3 * 3 + (threadIdx_x_2 + 1) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 2752) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 16) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 2816) // 48 * 48 + (threadIdx_x_2 + 32) % 48 // 3 * 3 + (threadIdx_x_2 + 2) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 2816) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 32) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[threadIdx_x_2 + 2880] = kernel_1[blockIdx_x // 7 * 294912 + threadIdx_x_2 // 48 * 4608 + cse_var_2 + threadIdx_x_2 % 48 // 3 * 9 + cse_var_1 + threadIdx_x_2 % 3 + 276480]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 2944) // 48 * 48 + (threadIdx_x_2 + 16) % 48 // 3 * 3 + (threadIdx_x_2 + 1) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 2944) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 16) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 1) % 3]
                with T.launch_thread(threadIdx_x_2, 64):
                    kernel_shared_1[(threadIdx_x_2 + 3008) // 48 * 48 + (threadIdx_x_2 + 32) % 48 // 3 * 3 + (threadIdx_x_2 + 2) % 3] = kernel_1[blockIdx_x // 7 * 294912 + (threadIdx_x_2 + 3008) // 48 * 4608 + cse_var_2 + (threadIdx_x_2 + 32) % 48 // 3 * 9 + cse_var_1 + (threadIdx_x_2 + 2) % 3]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[0] * kernel_shared_1[threadIdx_x * 48]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[21] * kernel_shared_1[threadIdx_x * 48 + 3]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[42] * kernel_shared_1[threadIdx_x * 48 + 6]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[63] * kernel_shared_1[threadIdx_x * 48 + 9]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[3] * kernel_shared_1[threadIdx_x * 48]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[24] * kernel_shared_1[threadIdx_x * 48 + 3]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[45] * kernel_shared_1[threadIdx_x * 48 + 6]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[66] * kernel_shared_1[threadIdx_x * 48 + 9]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[6] * kernel_shared_1[threadIdx_x * 48]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[27] * kernel_shared_1[threadIdx_x * 48 + 3]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[48] * kernel_shared_1[threadIdx_x * 48 + 6]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[69] * kernel_shared_1[threadIdx_x * 48 + 9]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[9] * kernel_shared_1[threadIdx_x * 48]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[30] * kernel_shared_1[threadIdx_x * 48 + 3]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[51] * kernel_shared_1[threadIdx_x * 48 + 6]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[72] * kernel_shared_1[threadIdx_x * 48 + 9]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[12] * kernel_shared_1[threadIdx_x * 48]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[33] * kernel_shared_1[threadIdx_x * 48 + 3]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[54] * kernel_shared_1[threadIdx_x * 48 + 6]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[75] * kernel_shared_1[threadIdx_x * 48 + 9]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[15] * kernel_shared_1[threadIdx_x * 48]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[36] * kernel_shared_1[threadIdx_x * 48 + 3]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[57] * kernel_shared_1[threadIdx_x * 48 + 6]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[78] * kernel_shared_1[threadIdx_x * 48 + 9]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[18] * kernel_shared_1[threadIdx_x * 48]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[39] * kernel_shared_1[threadIdx_x * 48 + 3]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[60] * kernel_shared_1[threadIdx_x * 48 + 6]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[81] * kernel_shared_1[threadIdx_x * 48 + 9]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[1] * kernel_shared_1[threadIdx_x * 48 + 1]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[22] * kernel_shared_1[threadIdx_x * 48 + 4]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[43] * kernel_shared_1[threadIdx_x * 48 + 7]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[64] * kernel_shared_1[threadIdx_x * 48 + 10]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[4] * kernel_shared_1[threadIdx_x * 48 + 1]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[25] * kernel_shared_1[threadIdx_x * 48 + 4]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[46] * kernel_shared_1[threadIdx_x * 48 + 7]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[67] * kernel_shared_1[threadIdx_x * 48 + 10]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[7] * kernel_shared_1[threadIdx_x * 48 + 1]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[28] * kernel_shared_1[threadIdx_x * 48 + 4]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[49] * kernel_shared_1[threadIdx_x * 48 + 7]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[70] * kernel_shared_1[threadIdx_x * 48 + 10]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[10] * kernel_shared_1[threadIdx_x * 48 + 1]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[31] * kernel_shared_1[threadIdx_x * 48 + 4]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[52] * kernel_shared_1[threadIdx_x * 48 + 7]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[73] * kernel_shared_1[threadIdx_x * 48 + 10]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[13] * kernel_shared_1[threadIdx_x * 48 + 1]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[34] * kernel_shared_1[threadIdx_x * 48 + 4]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[55] * kernel_shared_1[threadIdx_x * 48 + 7]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[76] * kernel_shared_1[threadIdx_x * 48 + 10]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[16] * kernel_shared_1[threadIdx_x * 48 + 1]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[37] * kernel_shared_1[threadIdx_x * 48 + 4]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[58] * kernel_shared_1[threadIdx_x * 48 + 7]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[79] * kernel_shared_1[threadIdx_x * 48 + 10]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[19] * kernel_shared_1[threadIdx_x * 48 + 1]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[40] * kernel_shared_1[threadIdx_x * 48 + 4]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[61] * kernel_shared_1[threadIdx_x * 48 + 7]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[82] * kernel_shared_1[threadIdx_x * 48 + 10]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[2] * kernel_shared_1[threadIdx_x * 48 + 2]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[23] * kernel_shared_1[threadIdx_x * 48 + 5]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[44] * kernel_shared_1[threadIdx_x * 48 + 8]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[65] * kernel_shared_1[threadIdx_x * 48 + 11]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[5] * kernel_shared_1[threadIdx_x * 48 + 2]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[26] * kernel_shared_1[threadIdx_x * 48 + 5]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[47] * kernel_shared_1[threadIdx_x * 48 + 8]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[68] * kernel_shared_1[threadIdx_x * 48 + 11]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[8] * kernel_shared_1[threadIdx_x * 48 + 2]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[29] * kernel_shared_1[threadIdx_x * 48 + 5]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[50] * kernel_shared_1[threadIdx_x * 48 + 8]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[71] * kernel_shared_1[threadIdx_x * 48 + 11]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[11] * kernel_shared_1[threadIdx_x * 48 + 2]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[32] * kernel_shared_1[threadIdx_x * 48 + 5]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[53] * kernel_shared_1[threadIdx_x * 48 + 8]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[74] * kernel_shared_1[threadIdx_x * 48 + 11]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[14] * kernel_shared_1[threadIdx_x * 48 + 2]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[35] * kernel_shared_1[threadIdx_x * 48 + 5]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[56] * kernel_shared_1[threadIdx_x * 48 + 8]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[77] * kernel_shared_1[threadIdx_x * 48 + 11]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[17] * kernel_shared_1[threadIdx_x * 48 + 2]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[38] * kernel_shared_1[threadIdx_x * 48 + 5]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[59] * kernel_shared_1[threadIdx_x * 48 + 8]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[80] * kernel_shared_1[threadIdx_x * 48 + 11]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[20] * kernel_shared_1[threadIdx_x * 48 + 2]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[41] * kernel_shared_1[threadIdx_x * 48 + 5]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[62] * kernel_shared_1[threadIdx_x * 48 + 8]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[83] * kernel_shared_1[threadIdx_x * 48 + 11]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[84] * kernel_shared_1[threadIdx_x * 48 + 12]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[105] * kernel_shared_1[threadIdx_x * 48 + 15]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[126] * kernel_shared_1[threadIdx_x * 48 + 18]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[147] * kernel_shared_1[threadIdx_x * 48 + 21]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[87] * kernel_shared_1[threadIdx_x * 48 + 12]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[108] * kernel_shared_1[threadIdx_x * 48 + 15]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[129] * kernel_shared_1[threadIdx_x * 48 + 18]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[150] * kernel_shared_1[threadIdx_x * 48 + 21]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[90] * kernel_shared_1[threadIdx_x * 48 + 12]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[111] * kernel_shared_1[threadIdx_x * 48 + 15]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[132] * kernel_shared_1[threadIdx_x * 48 + 18]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[153] * kernel_shared_1[threadIdx_x * 48 + 21]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[93] * kernel_shared_1[threadIdx_x * 48 + 12]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[114] * kernel_shared_1[threadIdx_x * 48 + 15]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[135] * kernel_shared_1[threadIdx_x * 48 + 18]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[156] * kernel_shared_1[threadIdx_x * 48 + 21]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[96] * kernel_shared_1[threadIdx_x * 48 + 12]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[117] * kernel_shared_1[threadIdx_x * 48 + 15]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[138] * kernel_shared_1[threadIdx_x * 48 + 18]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[159] * kernel_shared_1[threadIdx_x * 48 + 21]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[99] * kernel_shared_1[threadIdx_x * 48 + 12]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[120] * kernel_shared_1[threadIdx_x * 48 + 15]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[141] * kernel_shared_1[threadIdx_x * 48 + 18]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[162] * kernel_shared_1[threadIdx_x * 48 + 21]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[102] * kernel_shared_1[threadIdx_x * 48 + 12]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[123] * kernel_shared_1[threadIdx_x * 48 + 15]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[144] * kernel_shared_1[threadIdx_x * 48 + 18]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[165] * kernel_shared_1[threadIdx_x * 48 + 21]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[85] * kernel_shared_1[threadIdx_x * 48 + 13]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[106] * kernel_shared_1[threadIdx_x * 48 + 16]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[127] * kernel_shared_1[threadIdx_x * 48 + 19]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[148] * kernel_shared_1[threadIdx_x * 48 + 22]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[88] * kernel_shared_1[threadIdx_x * 48 + 13]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[109] * kernel_shared_1[threadIdx_x * 48 + 16]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[130] * kernel_shared_1[threadIdx_x * 48 + 19]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[151] * kernel_shared_1[threadIdx_x * 48 + 22]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[91] * kernel_shared_1[threadIdx_x * 48 + 13]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[112] * kernel_shared_1[threadIdx_x * 48 + 16]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[133] * kernel_shared_1[threadIdx_x * 48 + 19]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[154] * kernel_shared_1[threadIdx_x * 48 + 22]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[94] * kernel_shared_1[threadIdx_x * 48 + 13]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[115] * kernel_shared_1[threadIdx_x * 48 + 16]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[136] * kernel_shared_1[threadIdx_x * 48 + 19]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[157] * kernel_shared_1[threadIdx_x * 48 + 22]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[97] * kernel_shared_1[threadIdx_x * 48 + 13]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[118] * kernel_shared_1[threadIdx_x * 48 + 16]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[139] * kernel_shared_1[threadIdx_x * 48 + 19]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[160] * kernel_shared_1[threadIdx_x * 48 + 22]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[100] * kernel_shared_1[threadIdx_x * 48 + 13]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[121] * kernel_shared_1[threadIdx_x * 48 + 16]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[142] * kernel_shared_1[threadIdx_x * 48 + 19]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[163] * kernel_shared_1[threadIdx_x * 48 + 22]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[103] * kernel_shared_1[threadIdx_x * 48 + 13]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[124] * kernel_shared_1[threadIdx_x * 48 + 16]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[145] * kernel_shared_1[threadIdx_x * 48 + 19]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[166] * kernel_shared_1[threadIdx_x * 48 + 22]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[86] * kernel_shared_1[threadIdx_x * 48 + 14]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[107] * kernel_shared_1[threadIdx_x * 48 + 17]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[128] * kernel_shared_1[threadIdx_x * 48 + 20]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[149] * kernel_shared_1[threadIdx_x * 48 + 23]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[89] * kernel_shared_1[threadIdx_x * 48 + 14]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[110] * kernel_shared_1[threadIdx_x * 48 + 17]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[131] * kernel_shared_1[threadIdx_x * 48 + 20]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[152] * kernel_shared_1[threadIdx_x * 48 + 23]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[92] * kernel_shared_1[threadIdx_x * 48 + 14]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[113] * kernel_shared_1[threadIdx_x * 48 + 17]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[134] * kernel_shared_1[threadIdx_x * 48 + 20]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[155] * kernel_shared_1[threadIdx_x * 48 + 23]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[95] * kernel_shared_1[threadIdx_x * 48 + 14]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[116] * kernel_shared_1[threadIdx_x * 48 + 17]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[137] * kernel_shared_1[threadIdx_x * 48 + 20]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[158] * kernel_shared_1[threadIdx_x * 48 + 23]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[98] * kernel_shared_1[threadIdx_x * 48 + 14]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[119] * kernel_shared_1[threadIdx_x * 48 + 17]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[140] * kernel_shared_1[threadIdx_x * 48 + 20]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[161] * kernel_shared_1[threadIdx_x * 48 + 23]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[101] * kernel_shared_1[threadIdx_x * 48 + 14]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[122] * kernel_shared_1[threadIdx_x * 48 + 17]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[143] * kernel_shared_1[threadIdx_x * 48 + 20]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[164] * kernel_shared_1[threadIdx_x * 48 + 23]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[104] * kernel_shared_1[threadIdx_x * 48 + 14]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[125] * kernel_shared_1[threadIdx_x * 48 + 17]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[146] * kernel_shared_1[threadIdx_x * 48 + 20]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[167] * kernel_shared_1[threadIdx_x * 48 + 23]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[168] * kernel_shared_1[threadIdx_x * 48 + 24]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[189] * kernel_shared_1[threadIdx_x * 48 + 27]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[210] * kernel_shared_1[threadIdx_x * 48 + 30]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[231] * kernel_shared_1[threadIdx_x * 48 + 33]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[171] * kernel_shared_1[threadIdx_x * 48 + 24]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[192] * kernel_shared_1[threadIdx_x * 48 + 27]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[213] * kernel_shared_1[threadIdx_x * 48 + 30]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[234] * kernel_shared_1[threadIdx_x * 48 + 33]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[174] * kernel_shared_1[threadIdx_x * 48 + 24]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[195] * kernel_shared_1[threadIdx_x * 48 + 27]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[216] * kernel_shared_1[threadIdx_x * 48 + 30]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[237] * kernel_shared_1[threadIdx_x * 48 + 33]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[177] * kernel_shared_1[threadIdx_x * 48 + 24]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[198] * kernel_shared_1[threadIdx_x * 48 + 27]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[219] * kernel_shared_1[threadIdx_x * 48 + 30]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[240] * kernel_shared_1[threadIdx_x * 48 + 33]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[180] * kernel_shared_1[threadIdx_x * 48 + 24]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[201] * kernel_shared_1[threadIdx_x * 48 + 27]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[222] * kernel_shared_1[threadIdx_x * 48 + 30]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[243] * kernel_shared_1[threadIdx_x * 48 + 33]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[183] * kernel_shared_1[threadIdx_x * 48 + 24]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[204] * kernel_shared_1[threadIdx_x * 48 + 27]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[225] * kernel_shared_1[threadIdx_x * 48 + 30]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[246] * kernel_shared_1[threadIdx_x * 48 + 33]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[186] * kernel_shared_1[threadIdx_x * 48 + 24]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[207] * kernel_shared_1[threadIdx_x * 48 + 27]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[228] * kernel_shared_1[threadIdx_x * 48 + 30]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[249] * kernel_shared_1[threadIdx_x * 48 + 33]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[169] * kernel_shared_1[threadIdx_x * 48 + 25]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[190] * kernel_shared_1[threadIdx_x * 48 + 28]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[211] * kernel_shared_1[threadIdx_x * 48 + 31]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[232] * kernel_shared_1[threadIdx_x * 48 + 34]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[172] * kernel_shared_1[threadIdx_x * 48 + 25]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[193] * kernel_shared_1[threadIdx_x * 48 + 28]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[214] * kernel_shared_1[threadIdx_x * 48 + 31]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[235] * kernel_shared_1[threadIdx_x * 48 + 34]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[175] * kernel_shared_1[threadIdx_x * 48 + 25]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[196] * kernel_shared_1[threadIdx_x * 48 + 28]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[217] * kernel_shared_1[threadIdx_x * 48 + 31]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[238] * kernel_shared_1[threadIdx_x * 48 + 34]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[178] * kernel_shared_1[threadIdx_x * 48 + 25]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[199] * kernel_shared_1[threadIdx_x * 48 + 28]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[220] * kernel_shared_1[threadIdx_x * 48 + 31]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[241] * kernel_shared_1[threadIdx_x * 48 + 34]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[181] * kernel_shared_1[threadIdx_x * 48 + 25]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[202] * kernel_shared_1[threadIdx_x * 48 + 28]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[223] * kernel_shared_1[threadIdx_x * 48 + 31]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[244] * kernel_shared_1[threadIdx_x * 48 + 34]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[184] * kernel_shared_1[threadIdx_x * 48 + 25]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[205] * kernel_shared_1[threadIdx_x * 48 + 28]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[226] * kernel_shared_1[threadIdx_x * 48 + 31]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[247] * kernel_shared_1[threadIdx_x * 48 + 34]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[187] * kernel_shared_1[threadIdx_x * 48 + 25]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[208] * kernel_shared_1[threadIdx_x * 48 + 28]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[229] * kernel_shared_1[threadIdx_x * 48 + 31]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[250] * kernel_shared_1[threadIdx_x * 48 + 34]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[170] * kernel_shared_1[threadIdx_x * 48 + 26]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[191] * kernel_shared_1[threadIdx_x * 48 + 29]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[212] * kernel_shared_1[threadIdx_x * 48 + 32]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[233] * kernel_shared_1[threadIdx_x * 48 + 35]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[173] * kernel_shared_1[threadIdx_x * 48 + 26]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[194] * kernel_shared_1[threadIdx_x * 48 + 29]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[215] * kernel_shared_1[threadIdx_x * 48 + 32]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[236] * kernel_shared_1[threadIdx_x * 48 + 35]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[176] * kernel_shared_1[threadIdx_x * 48 + 26]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[197] * kernel_shared_1[threadIdx_x * 48 + 29]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[218] * kernel_shared_1[threadIdx_x * 48 + 32]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[239] * kernel_shared_1[threadIdx_x * 48 + 35]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[179] * kernel_shared_1[threadIdx_x * 48 + 26]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[200] * kernel_shared_1[threadIdx_x * 48 + 29]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[221] * kernel_shared_1[threadIdx_x * 48 + 32]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[242] * kernel_shared_1[threadIdx_x * 48 + 35]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[182] * kernel_shared_1[threadIdx_x * 48 + 26]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[203] * kernel_shared_1[threadIdx_x * 48 + 29]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[224] * kernel_shared_1[threadIdx_x * 48 + 32]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[245] * kernel_shared_1[threadIdx_x * 48 + 35]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[185] * kernel_shared_1[threadIdx_x * 48 + 26]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[206] * kernel_shared_1[threadIdx_x * 48 + 29]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[227] * kernel_shared_1[threadIdx_x * 48 + 32]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[248] * kernel_shared_1[threadIdx_x * 48 + 35]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[188] * kernel_shared_1[threadIdx_x * 48 + 26]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[209] * kernel_shared_1[threadIdx_x * 48 + 29]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[230] * kernel_shared_1[threadIdx_x * 48 + 32]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[251] * kernel_shared_1[threadIdx_x * 48 + 35]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[252] * kernel_shared_1[threadIdx_x * 48 + 36]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[273] * kernel_shared_1[threadIdx_x * 48 + 39]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[294] * kernel_shared_1[threadIdx_x * 48 + 42]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[315] * kernel_shared_1[threadIdx_x * 48 + 45]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[255] * kernel_shared_1[threadIdx_x * 48 + 36]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[276] * kernel_shared_1[threadIdx_x * 48 + 39]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[297] * kernel_shared_1[threadIdx_x * 48 + 42]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[318] * kernel_shared_1[threadIdx_x * 48 + 45]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[258] * kernel_shared_1[threadIdx_x * 48 + 36]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[279] * kernel_shared_1[threadIdx_x * 48 + 39]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[300] * kernel_shared_1[threadIdx_x * 48 + 42]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[321] * kernel_shared_1[threadIdx_x * 48 + 45]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[261] * kernel_shared_1[threadIdx_x * 48 + 36]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[282] * kernel_shared_1[threadIdx_x * 48 + 39]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[303] * kernel_shared_1[threadIdx_x * 48 + 42]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[324] * kernel_shared_1[threadIdx_x * 48 + 45]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[264] * kernel_shared_1[threadIdx_x * 48 + 36]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[285] * kernel_shared_1[threadIdx_x * 48 + 39]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[306] * kernel_shared_1[threadIdx_x * 48 + 42]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[327] * kernel_shared_1[threadIdx_x * 48 + 45]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[267] * kernel_shared_1[threadIdx_x * 48 + 36]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[288] * kernel_shared_1[threadIdx_x * 48 + 39]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[309] * kernel_shared_1[threadIdx_x * 48 + 42]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[330] * kernel_shared_1[threadIdx_x * 48 + 45]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[270] * kernel_shared_1[threadIdx_x * 48 + 36]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[291] * kernel_shared_1[threadIdx_x * 48 + 39]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[312] * kernel_shared_1[threadIdx_x * 48 + 42]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[333] * kernel_shared_1[threadIdx_x * 48 + 45]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[253] * kernel_shared_1[threadIdx_x * 48 + 37]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[274] * kernel_shared_1[threadIdx_x * 48 + 40]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[295] * kernel_shared_1[threadIdx_x * 48 + 43]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[316] * kernel_shared_1[threadIdx_x * 48 + 46]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[256] * kernel_shared_1[threadIdx_x * 48 + 37]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[277] * kernel_shared_1[threadIdx_x * 48 + 40]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[298] * kernel_shared_1[threadIdx_x * 48 + 43]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[319] * kernel_shared_1[threadIdx_x * 48 + 46]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[259] * kernel_shared_1[threadIdx_x * 48 + 37]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[280] * kernel_shared_1[threadIdx_x * 48 + 40]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[301] * kernel_shared_1[threadIdx_x * 48 + 43]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[322] * kernel_shared_1[threadIdx_x * 48 + 46]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[262] * kernel_shared_1[threadIdx_x * 48 + 37]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[283] * kernel_shared_1[threadIdx_x * 48 + 40]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[304] * kernel_shared_1[threadIdx_x * 48 + 43]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[325] * kernel_shared_1[threadIdx_x * 48 + 46]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[265] * kernel_shared_1[threadIdx_x * 48 + 37]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[286] * kernel_shared_1[threadIdx_x * 48 + 40]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[307] * kernel_shared_1[threadIdx_x * 48 + 43]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[328] * kernel_shared_1[threadIdx_x * 48 + 46]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[268] * kernel_shared_1[threadIdx_x * 48 + 37]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[289] * kernel_shared_1[threadIdx_x * 48 + 40]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[310] * kernel_shared_1[threadIdx_x * 48 + 43]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[331] * kernel_shared_1[threadIdx_x * 48 + 46]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[271] * kernel_shared_1[threadIdx_x * 48 + 37]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[292] * kernel_shared_1[threadIdx_x * 48 + 40]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[313] * kernel_shared_1[threadIdx_x * 48 + 43]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[334] * kernel_shared_1[threadIdx_x * 48 + 46]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[254] * kernel_shared_1[threadIdx_x * 48 + 38]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[275] * kernel_shared_1[threadIdx_x * 48 + 41]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[296] * kernel_shared_1[threadIdx_x * 48 + 44]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[317] * kernel_shared_1[threadIdx_x * 48 + 47]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[257] * kernel_shared_1[threadIdx_x * 48 + 38]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[278] * kernel_shared_1[threadIdx_x * 48 + 41]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[299] * kernel_shared_1[threadIdx_x * 48 + 44]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[320] * kernel_shared_1[threadIdx_x * 48 + 47]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[260] * kernel_shared_1[threadIdx_x * 48 + 38]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[281] * kernel_shared_1[threadIdx_x * 48 + 41]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[302] * kernel_shared_1[threadIdx_x * 48 + 44]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[323] * kernel_shared_1[threadIdx_x * 48 + 47]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[263] * kernel_shared_1[threadIdx_x * 48 + 38]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[284] * kernel_shared_1[threadIdx_x * 48 + 41]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[305] * kernel_shared_1[threadIdx_x * 48 + 44]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[326] * kernel_shared_1[threadIdx_x * 48 + 47]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[266] * kernel_shared_1[threadIdx_x * 48 + 38]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[287] * kernel_shared_1[threadIdx_x * 48 + 41]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[308] * kernel_shared_1[threadIdx_x * 48 + 44]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[329] * kernel_shared_1[threadIdx_x * 48 + 47]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[269] * kernel_shared_1[threadIdx_x * 48 + 38]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[290] * kernel_shared_1[threadIdx_x * 48 + 41]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[311] * kernel_shared_1[threadIdx_x * 48 + 44]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[332] * kernel_shared_1[threadIdx_x * 48 + 47]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[272] * kernel_shared_1[threadIdx_x * 48 + 38]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[293] * kernel_shared_1[threadIdx_x * 48 + 41]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[314] * kernel_shared_1[threadIdx_x * 48 + 44]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[335] * kernel_shared_1[threadIdx_x * 48 + 47]
            for i2_inner in range(7):
                compute_1 = T.Buffer((25088,), data=compute.data)
                bias_1 = T.Buffer((512,), data=bias.data)
                compute_1[blockIdx_x // 7 * 3136 + threadIdx_x * 49 + i2_inner * 7 + blockIdx_x % 7] = T.max(conv2d_nchw_1[i2_inner] + bias_1[blockIdx_x // 7 * 64 + threadIdx_x], T.float32(0))




.. GENERATED FROM PYTHON SOURCE LINES 138-141

Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.

.. GENERATED FROM PYTHON SOURCE LINES 141-168

.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Execution time of this operator: 0.360 ms




.. GENERATED FROM PYTHON SOURCE LINES 169-174

Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

.. GENERATED FROM PYTHON SOURCE LINES 176-179

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.

.. GENERATED FROM PYTHON SOURCE LINES 179-186

.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=1)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=64)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=1)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=7)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=4)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=4)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=1)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=1)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=1)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=3)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=1)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=64)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=7)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=1)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=1)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=64)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=64)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 512)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(64) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[7];
      __shared__ float pad_temp_shared[336];
      __shared__ float kernel_shared[3072];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      conv2d_nchw[4] = 0.000000e+00f;
      conv2d_nchw[5] = 0.000000e+00f;
      conv2d_nchw[6] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 32; ++rc_outer_outer) {
        for (int ry_outer_outer = 0; ry_outer_outer < 3; ++ry_outer_outer) {
          __syncthreads();
          pad_temp_shared[((int)threadIdx.x)] = (((((1 <= (((((int)threadIdx.x) % 21) / 3) + ry_outer_outer)) && ((((((int)threadIdx.x) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= ((((int)blockIdx.x) % 7) + (((int)threadIdx.x) % 3)))) && (((((int)blockIdx.x) % 7) + (((int)threadIdx.x) % 3)) < 8)) ? data[((((((rc_outer_outer * 784) + ((((int)threadIdx.x) / 3) * 7)) + (ry_outer_outer * 7)) + (((int)blockIdx.x) % 7)) + (((int)threadIdx.x) % 3)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 64)] = (((((1 <= ((((((int)threadIdx.x) + 1) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) + 1) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= ((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 1) % 3)))) && (((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 1) % 3)) < 8)) ? data[((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 64) / 3) * 7)) + (ry_outer_outer * 7)) + (((int)blockIdx.x) % 7)) + ((((int)threadIdx.x) + 1) % 3)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 128)] = (((((1 <= ((((((int)threadIdx.x) + 2) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) + 2) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= ((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 2) % 3)))) && (((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 2) % 3)) < 8)) ? data[((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 128) / 3) * 7)) + (ry_outer_outer * 7)) + (((int)blockIdx.x) % 7)) + ((((int)threadIdx.x) + 2) % 3)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 192)] = (((((1 <= (ry_outer_outer + (((((int)threadIdx.x) / 3) + 1) % 7))) && ((ry_outer_outer + (((((int)threadIdx.x) / 3) + 1) % 7)) < 8)) && (1 <= ((((int)blockIdx.x) % 7) + (((int)threadIdx.x) % 3)))) && (((((int)blockIdx.x) % 7) + (((int)threadIdx.x) % 3)) < 8)) ? data[((((((rc_outer_outer * 784) + ((((int)threadIdx.x) / 3) * 7)) + (ry_outer_outer * 7)) + (((int)blockIdx.x) % 7)) + (((int)threadIdx.x) % 3)) + 440)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 256)] = (((((1 <= ((((((int)threadIdx.x) + 4) % 21) / 3) + ry_outer_outer)) && (((((((int)threadIdx.x) + 4) % 21) / 3) + ry_outer_outer) < 8)) && (1 <= ((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 1) % 3)))) && (((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 1) % 3)) < 8)) ? data[((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 256) / 3) * 7)) + (ry_outer_outer * 7)) + (((int)blockIdx.x) % 7)) + ((((int)threadIdx.x) + 1) % 3)) - 8)] : 0.000000e+00f);
          if (((int)threadIdx.x) < 16) {
            pad_temp_shared[(((int)threadIdx.x) + 320)] = (((((((((int)threadIdx.x) + 5) / 3) + ry_outer_outer) < 8) && (1 <= ((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 2) % 3)))) && (((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 2) % 3)) < 8)) ? data[((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 320) / 3) * 7)) + (ry_outer_outer * 7)) + (((int)blockIdx.x) % 7)) + ((((int)threadIdx.x) + 2) % 3)) - 8)] : 0.000000e+00f);
          }
          kernel_shared[((int)threadIdx.x)] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3))];
          kernel_shared[(((((((int)threadIdx.x) + 64) / 48) * 48) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 64) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((((((int)threadIdx.x) + 128) / 48) * 48) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 128) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 192)] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 18432)];
          kernel_shared[(((((((int)threadIdx.x) + 256) / 48) * 48) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 256) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((((((int)threadIdx.x) + 320) / 48) * 48) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 320) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 384)] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 36864)];
          kernel_shared[(((((((int)threadIdx.x) + 448) / 48) * 48) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 448) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((((((int)threadIdx.x) + 512) / 48) * 48) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 512) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 576)] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 55296)];
          kernel_shared[(((((((int)threadIdx.x) + 640) / 48) * 48) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 640) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((((((int)threadIdx.x) + 704) / 48) * 48) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 704) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 768)] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 73728)];
          kernel_shared[(((((((int)threadIdx.x) + 832) / 48) * 48) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 832) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((((((int)threadIdx.x) + 896) / 48) * 48) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 896) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 960)] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 92160)];
          kernel_shared[(((((((int)threadIdx.x) + 1024) / 48) * 48) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 1024) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((((((int)threadIdx.x) + 1088) / 48) * 48) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 1088) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1152)] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 110592)];
          kernel_shared[(((((((int)threadIdx.x) + 1216) / 48) * 48) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 1216) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((((((int)threadIdx.x) + 1280) / 48) * 48) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 1280) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1344)] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 129024)];
          kernel_shared[(((((((int)threadIdx.x) + 1408) / 48) * 48) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 1408) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((((((int)threadIdx.x) + 1472) / 48) * 48) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 1472) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1536)] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 147456)];
          kernel_shared[(((((((int)threadIdx.x) + 1600) / 48) * 48) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 1600) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((((((int)threadIdx.x) + 1664) / 48) * 48) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 1664) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1728)] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 165888)];
          kernel_shared[(((((((int)threadIdx.x) + 1792) / 48) * 48) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 1792) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((((((int)threadIdx.x) + 1856) / 48) * 48) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 1856) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 1920)] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 184320)];
          kernel_shared[(((((((int)threadIdx.x) + 1984) / 48) * 48) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 1984) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((((((int)threadIdx.x) + 2048) / 48) * 48) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 2048) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2112)] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 202752)];
          kernel_shared[(((((((int)threadIdx.x) + 2176) / 48) * 48) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 2176) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((((((int)threadIdx.x) + 2240) / 48) * 48) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 2240) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2304)] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 221184)];
          kernel_shared[(((((((int)threadIdx.x) + 2368) / 48) * 48) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 2368) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((((((int)threadIdx.x) + 2432) / 48) * 48) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 2432) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2496)] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 239616)];
          kernel_shared[(((((((int)threadIdx.x) + 2560) / 48) * 48) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 2560) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((((((int)threadIdx.x) + 2624) / 48) * 48) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 2624) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2688)] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 258048)];
          kernel_shared[(((((((int)threadIdx.x) + 2752) / 48) * 48) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 2752) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((((((int)threadIdx.x) + 2816) / 48) * 48) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 2816) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          kernel_shared[(((int)threadIdx.x) + 2880)] = kernel[((((((((((int)blockIdx.x) / 7) * 294912) + ((((int)threadIdx.x) / 48) * 4608)) + (rc_outer_outer * 144)) + (((((int)threadIdx.x) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + (((int)threadIdx.x) % 3)) + 276480)];
          kernel_shared[(((((((int)threadIdx.x) + 2944) / 48) * 48) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 2944) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 16) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 1) % 3))];
          kernel_shared[(((((((int)threadIdx.x) + 3008) / 48) * 48) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))] = kernel[(((((((((int)blockIdx.x) / 7) * 294912) + (((((int)threadIdx.x) + 3008) / 48) * 4608)) + (rc_outer_outer * 144)) + ((((((int)threadIdx.x) + 32) % 48) / 3) * 9)) + (ry_outer_outer * 3)) + ((((int)threadIdx.x) + 2) % 3))];
          __syncthreads();
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[0] * kernel_shared[(((int)threadIdx.x) * 48)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[21] * kernel_shared[((((int)threadIdx.x) * 48) + 3)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[42] * kernel_shared[((((int)threadIdx.x) * 48) + 6)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[63] * kernel_shared[((((int)threadIdx.x) * 48) + 9)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[3] * kernel_shared[(((int)threadIdx.x) * 48)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[24] * kernel_shared[((((int)threadIdx.x) * 48) + 3)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[45] * kernel_shared[((((int)threadIdx.x) * 48) + 6)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[66] * kernel_shared[((((int)threadIdx.x) * 48) + 9)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[6] * kernel_shared[(((int)threadIdx.x) * 48)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[27] * kernel_shared[((((int)threadIdx.x) * 48) + 3)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[48] * kernel_shared[((((int)threadIdx.x) * 48) + 6)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[69] * kernel_shared[((((int)threadIdx.x) * 48) + 9)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[9] * kernel_shared[(((int)threadIdx.x) * 48)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[30] * kernel_shared[((((int)threadIdx.x) * 48) + 3)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[51] * kernel_shared[((((int)threadIdx.x) * 48) + 6)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[72] * kernel_shared[((((int)threadIdx.x) * 48) + 9)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[12] * kernel_shared[(((int)threadIdx.x) * 48)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[33] * kernel_shared[((((int)threadIdx.x) * 48) + 3)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[54] * kernel_shared[((((int)threadIdx.x) * 48) + 6)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[75] * kernel_shared[((((int)threadIdx.x) * 48) + 9)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[15] * kernel_shared[(((int)threadIdx.x) * 48)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[36] * kernel_shared[((((int)threadIdx.x) * 48) + 3)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[57] * kernel_shared[((((int)threadIdx.x) * 48) + 6)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[78] * kernel_shared[((((int)threadIdx.x) * 48) + 9)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[18] * kernel_shared[(((int)threadIdx.x) * 48)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[39] * kernel_shared[((((int)threadIdx.x) * 48) + 3)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[60] * kernel_shared[((((int)threadIdx.x) * 48) + 6)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[81] * kernel_shared[((((int)threadIdx.x) * 48) + 9)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[1] * kernel_shared[((((int)threadIdx.x) * 48) + 1)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[22] * kernel_shared[((((int)threadIdx.x) * 48) + 4)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[43] * kernel_shared[((((int)threadIdx.x) * 48) + 7)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[64] * kernel_shared[((((int)threadIdx.x) * 48) + 10)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[4] * kernel_shared[((((int)threadIdx.x) * 48) + 1)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[25] * kernel_shared[((((int)threadIdx.x) * 48) + 4)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[46] * kernel_shared[((((int)threadIdx.x) * 48) + 7)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[67] * kernel_shared[((((int)threadIdx.x) * 48) + 10)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[7] * kernel_shared[((((int)threadIdx.x) * 48) + 1)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[28] * kernel_shared[((((int)threadIdx.x) * 48) + 4)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[49] * kernel_shared[((((int)threadIdx.x) * 48) + 7)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[70] * kernel_shared[((((int)threadIdx.x) * 48) + 10)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[10] * kernel_shared[((((int)threadIdx.x) * 48) + 1)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[31] * kernel_shared[((((int)threadIdx.x) * 48) + 4)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[52] * kernel_shared[((((int)threadIdx.x) * 48) + 7)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[73] * kernel_shared[((((int)threadIdx.x) * 48) + 10)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[13] * kernel_shared[((((int)threadIdx.x) * 48) + 1)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[34] * kernel_shared[((((int)threadIdx.x) * 48) + 4)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[55] * kernel_shared[((((int)threadIdx.x) * 48) + 7)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[76] * kernel_shared[((((int)threadIdx.x) * 48) + 10)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[16] * kernel_shared[((((int)threadIdx.x) * 48) + 1)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[37] * kernel_shared[((((int)threadIdx.x) * 48) + 4)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[58] * kernel_shared[((((int)threadIdx.x) * 48) + 7)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[79] * kernel_shared[((((int)threadIdx.x) * 48) + 10)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[19] * kernel_shared[((((int)threadIdx.x) * 48) + 1)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[40] * kernel_shared[((((int)threadIdx.x) * 48) + 4)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[61] * kernel_shared[((((int)threadIdx.x) * 48) + 7)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[82] * kernel_shared[((((int)threadIdx.x) * 48) + 10)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[2] * kernel_shared[((((int)threadIdx.x) * 48) + 2)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[23] * kernel_shared[((((int)threadIdx.x) * 48) + 5)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[44] * kernel_shared[((((int)threadIdx.x) * 48) + 8)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[65] * kernel_shared[((((int)threadIdx.x) * 48) + 11)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[5] * kernel_shared[((((int)threadIdx.x) * 48) + 2)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[26] * kernel_shared[((((int)threadIdx.x) * 48) + 5)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[47] * kernel_shared[((((int)threadIdx.x) * 48) + 8)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[68] * kernel_shared[((((int)threadIdx.x) * 48) + 11)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[8] * kernel_shared[((((int)threadIdx.x) * 48) + 2)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[29] * kernel_shared[((((int)threadIdx.x) * 48) + 5)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[50] * kernel_shared[((((int)threadIdx.x) * 48) + 8)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[71] * kernel_shared[((((int)threadIdx.x) * 48) + 11)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[11] * kernel_shared[((((int)threadIdx.x) * 48) + 2)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[32] * kernel_shared[((((int)threadIdx.x) * 48) + 5)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[53] * kernel_shared[((((int)threadIdx.x) * 48) + 8)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[74] * kernel_shared[((((int)threadIdx.x) * 48) + 11)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[14] * kernel_shared[((((int)threadIdx.x) * 48) + 2)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[35] * kernel_shared[((((int)threadIdx.x) * 48) + 5)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[56] * kernel_shared[((((int)threadIdx.x) * 48) + 8)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[77] * kernel_shared[((((int)threadIdx.x) * 48) + 11)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[17] * kernel_shared[((((int)threadIdx.x) * 48) + 2)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[38] * kernel_shared[((((int)threadIdx.x) * 48) + 5)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[59] * kernel_shared[((((int)threadIdx.x) * 48) + 8)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[80] * kernel_shared[((((int)threadIdx.x) * 48) + 11)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[20] * kernel_shared[((((int)threadIdx.x) * 48) + 2)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[41] * kernel_shared[((((int)threadIdx.x) * 48) + 5)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[62] * kernel_shared[((((int)threadIdx.x) * 48) + 8)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[83] * kernel_shared[((((int)threadIdx.x) * 48) + 11)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[84] * kernel_shared[((((int)threadIdx.x) * 48) + 12)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[105] * kernel_shared[((((int)threadIdx.x) * 48) + 15)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[126] * kernel_shared[((((int)threadIdx.x) * 48) + 18)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[147] * kernel_shared[((((int)threadIdx.x) * 48) + 21)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[87] * kernel_shared[((((int)threadIdx.x) * 48) + 12)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[108] * kernel_shared[((((int)threadIdx.x) * 48) + 15)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[129] * kernel_shared[((((int)threadIdx.x) * 48) + 18)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[150] * kernel_shared[((((int)threadIdx.x) * 48) + 21)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[90] * kernel_shared[((((int)threadIdx.x) * 48) + 12)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[111] * kernel_shared[((((int)threadIdx.x) * 48) + 15)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[132] * kernel_shared[((((int)threadIdx.x) * 48) + 18)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[153] * kernel_shared[((((int)threadIdx.x) * 48) + 21)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[93] * kernel_shared[((((int)threadIdx.x) * 48) + 12)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[114] * kernel_shared[((((int)threadIdx.x) * 48) + 15)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[135] * kernel_shared[((((int)threadIdx.x) * 48) + 18)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[156] * kernel_shared[((((int)threadIdx.x) * 48) + 21)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[96] * kernel_shared[((((int)threadIdx.x) * 48) + 12)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[117] * kernel_shared[((((int)threadIdx.x) * 48) + 15)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[138] * kernel_shared[((((int)threadIdx.x) * 48) + 18)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[159] * kernel_shared[((((int)threadIdx.x) * 48) + 21)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[99] * kernel_shared[((((int)threadIdx.x) * 48) + 12)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[120] * kernel_shared[((((int)threadIdx.x) * 48) + 15)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[141] * kernel_shared[((((int)threadIdx.x) * 48) + 18)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[162] * kernel_shared[((((int)threadIdx.x) * 48) + 21)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[102] * kernel_shared[((((int)threadIdx.x) * 48) + 12)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[123] * kernel_shared[((((int)threadIdx.x) * 48) + 15)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[144] * kernel_shared[((((int)threadIdx.x) * 48) + 18)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[165] * kernel_shared[((((int)threadIdx.x) * 48) + 21)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[85] * kernel_shared[((((int)threadIdx.x) * 48) + 13)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[106] * kernel_shared[((((int)threadIdx.x) * 48) + 16)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[127] * kernel_shared[((((int)threadIdx.x) * 48) + 19)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[148] * kernel_shared[((((int)threadIdx.x) * 48) + 22)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[88] * kernel_shared[((((int)threadIdx.x) * 48) + 13)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[109] * kernel_shared[((((int)threadIdx.x) * 48) + 16)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[130] * kernel_shared[((((int)threadIdx.x) * 48) + 19)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[151] * kernel_shared[((((int)threadIdx.x) * 48) + 22)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[91] * kernel_shared[((((int)threadIdx.x) * 48) + 13)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[112] * kernel_shared[((((int)threadIdx.x) * 48) + 16)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[133] * kernel_shared[((((int)threadIdx.x) * 48) + 19)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[154] * kernel_shared[((((int)threadIdx.x) * 48) + 22)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[94] * kernel_shared[((((int)threadIdx.x) * 48) + 13)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[115] * kernel_shared[((((int)threadIdx.x) * 48) + 16)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[136] * kernel_shared[((((int)threadIdx.x) * 48) + 19)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[157] * kernel_shared[((((int)threadIdx.x) * 48) + 22)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[97] * kernel_shared[((((int)threadIdx.x) * 48) + 13)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[118] * kernel_shared[((((int)threadIdx.x) * 48) + 16)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[139] * kernel_shared[((((int)threadIdx.x) * 48) + 19)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[160] * kernel_shared[((((int)threadIdx.x) * 48) + 22)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[100] * kernel_shared[((((int)threadIdx.x) * 48) + 13)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[121] * kernel_shared[((((int)threadIdx.x) * 48) + 16)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[142] * kernel_shared[((((int)threadIdx.x) * 48) + 19)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[163] * kernel_shared[((((int)threadIdx.x) * 48) + 22)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[103] * kernel_shared[((((int)threadIdx.x) * 48) + 13)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[124] * kernel_shared[((((int)threadIdx.x) * 48) + 16)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[145] * kernel_shared[((((int)threadIdx.x) * 48) + 19)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[166] * kernel_shared[((((int)threadIdx.x) * 48) + 22)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[86] * kernel_shared[((((int)threadIdx.x) * 48) + 14)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[107] * kernel_shared[((((int)threadIdx.x) * 48) + 17)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[128] * kernel_shared[((((int)threadIdx.x) * 48) + 20)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[149] * kernel_shared[((((int)threadIdx.x) * 48) + 23)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[89] * kernel_shared[((((int)threadIdx.x) * 48) + 14)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[110] * kernel_shared[((((int)threadIdx.x) * 48) + 17)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[131] * kernel_shared[((((int)threadIdx.x) * 48) + 20)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[152] * kernel_shared[((((int)threadIdx.x) * 48) + 23)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[92] * kernel_shared[((((int)threadIdx.x) * 48) + 14)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[113] * kernel_shared[((((int)threadIdx.x) * 48) + 17)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[134] * kernel_shared[((((int)threadIdx.x) * 48) + 20)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[155] * kernel_shared[((((int)threadIdx.x) * 48) + 23)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[95] * kernel_shared[((((int)threadIdx.x) * 48) + 14)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[116] * kernel_shared[((((int)threadIdx.x) * 48) + 17)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[137] * kernel_shared[((((int)threadIdx.x) * 48) + 20)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[158] * kernel_shared[((((int)threadIdx.x) * 48) + 23)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[98] * kernel_shared[((((int)threadIdx.x) * 48) + 14)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[119] * kernel_shared[((((int)threadIdx.x) * 48) + 17)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[140] * kernel_shared[((((int)threadIdx.x) * 48) + 20)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[161] * kernel_shared[((((int)threadIdx.x) * 48) + 23)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[101] * kernel_shared[((((int)threadIdx.x) * 48) + 14)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[122] * kernel_shared[((((int)threadIdx.x) * 48) + 17)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[143] * kernel_shared[((((int)threadIdx.x) * 48) + 20)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[164] * kernel_shared[((((int)threadIdx.x) * 48) + 23)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[104] * kernel_shared[((((int)threadIdx.x) * 48) + 14)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[125] * kernel_shared[((((int)threadIdx.x) * 48) + 17)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[146] * kernel_shared[((((int)threadIdx.x) * 48) + 20)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[167] * kernel_shared[((((int)threadIdx.x) * 48) + 23)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[168] * kernel_shared[((((int)threadIdx.x) * 48) + 24)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[189] * kernel_shared[((((int)threadIdx.x) * 48) + 27)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[210] * kernel_shared[((((int)threadIdx.x) * 48) + 30)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[231] * kernel_shared[((((int)threadIdx.x) * 48) + 33)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[171] * kernel_shared[((((int)threadIdx.x) * 48) + 24)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[192] * kernel_shared[((((int)threadIdx.x) * 48) + 27)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[213] * kernel_shared[((((int)threadIdx.x) * 48) + 30)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[234] * kernel_shared[((((int)threadIdx.x) * 48) + 33)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[174] * kernel_shared[((((int)threadIdx.x) * 48) + 24)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[195] * kernel_shared[((((int)threadIdx.x) * 48) + 27)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[216] * kernel_shared[((((int)threadIdx.x) * 48) + 30)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[237] * kernel_shared[((((int)threadIdx.x) * 48) + 33)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[177] * kernel_shared[((((int)threadIdx.x) * 48) + 24)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[198] * kernel_shared[((((int)threadIdx.x) * 48) + 27)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[219] * kernel_shared[((((int)threadIdx.x) * 48) + 30)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[240] * kernel_shared[((((int)threadIdx.x) * 48) + 33)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[180] * kernel_shared[((((int)threadIdx.x) * 48) + 24)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[201] * kernel_shared[((((int)threadIdx.x) * 48) + 27)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[222] * kernel_shared[((((int)threadIdx.x) * 48) + 30)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[243] * kernel_shared[((((int)threadIdx.x) * 48) + 33)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[183] * kernel_shared[((((int)threadIdx.x) * 48) + 24)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[204] * kernel_shared[((((int)threadIdx.x) * 48) + 27)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[225] * kernel_shared[((((int)threadIdx.x) * 48) + 30)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[246] * kernel_shared[((((int)threadIdx.x) * 48) + 33)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[186] * kernel_shared[((((int)threadIdx.x) * 48) + 24)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[207] * kernel_shared[((((int)threadIdx.x) * 48) + 27)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[228] * kernel_shared[((((int)threadIdx.x) * 48) + 30)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[249] * kernel_shared[((((int)threadIdx.x) * 48) + 33)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[169] * kernel_shared[((((int)threadIdx.x) * 48) + 25)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[190] * kernel_shared[((((int)threadIdx.x) * 48) + 28)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[211] * kernel_shared[((((int)threadIdx.x) * 48) + 31)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[232] * kernel_shared[((((int)threadIdx.x) * 48) + 34)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[172] * kernel_shared[((((int)threadIdx.x) * 48) + 25)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[193] * kernel_shared[((((int)threadIdx.x) * 48) + 28)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[214] * kernel_shared[((((int)threadIdx.x) * 48) + 31)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[235] * kernel_shared[((((int)threadIdx.x) * 48) + 34)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[175] * kernel_shared[((((int)threadIdx.x) * 48) + 25)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[196] * kernel_shared[((((int)threadIdx.x) * 48) + 28)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[217] * kernel_shared[((((int)threadIdx.x) * 48) + 31)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[238] * kernel_shared[((((int)threadIdx.x) * 48) + 34)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[178] * kernel_shared[((((int)threadIdx.x) * 48) + 25)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[199] * kernel_shared[((((int)threadIdx.x) * 48) + 28)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[220] * kernel_shared[((((int)threadIdx.x) * 48) + 31)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[241] * kernel_shared[((((int)threadIdx.x) * 48) + 34)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[181] * kernel_shared[((((int)threadIdx.x) * 48) + 25)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[202] * kernel_shared[((((int)threadIdx.x) * 48) + 28)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[223] * kernel_shared[((((int)threadIdx.x) * 48) + 31)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[244] * kernel_shared[((((int)threadIdx.x) * 48) + 34)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[184] * kernel_shared[((((int)threadIdx.x) * 48) + 25)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[205] * kernel_shared[((((int)threadIdx.x) * 48) + 28)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[226] * kernel_shared[((((int)threadIdx.x) * 48) + 31)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[247] * kernel_shared[((((int)threadIdx.x) * 48) + 34)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[187] * kernel_shared[((((int)threadIdx.x) * 48) + 25)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[208] * kernel_shared[((((int)threadIdx.x) * 48) + 28)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[229] * kernel_shared[((((int)threadIdx.x) * 48) + 31)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[250] * kernel_shared[((((int)threadIdx.x) * 48) + 34)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[170] * kernel_shared[((((int)threadIdx.x) * 48) + 26)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[191] * kernel_shared[((((int)threadIdx.x) * 48) + 29)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[212] * kernel_shared[((((int)threadIdx.x) * 48) + 32)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[233] * kernel_shared[((((int)threadIdx.x) * 48) + 35)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[173] * kernel_shared[((((int)threadIdx.x) * 48) + 26)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[194] * kernel_shared[((((int)threadIdx.x) * 48) + 29)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[215] * kernel_shared[((((int)threadIdx.x) * 48) + 32)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[236] * kernel_shared[((((int)threadIdx.x) * 48) + 35)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[176] * kernel_shared[((((int)threadIdx.x) * 48) + 26)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[197] * kernel_shared[((((int)threadIdx.x) * 48) + 29)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[218] * kernel_shared[((((int)threadIdx.x) * 48) + 32)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[239] * kernel_shared[((((int)threadIdx.x) * 48) + 35)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[179] * kernel_shared[((((int)threadIdx.x) * 48) + 26)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[200] * kernel_shared[((((int)threadIdx.x) * 48) + 29)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[221] * kernel_shared[((((int)threadIdx.x) * 48) + 32)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[242] * kernel_shared[((((int)threadIdx.x) * 48) + 35)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[182] * kernel_shared[((((int)threadIdx.x) * 48) + 26)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[203] * kernel_shared[((((int)threadIdx.x) * 48) + 29)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[224] * kernel_shared[((((int)threadIdx.x) * 48) + 32)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[245] * kernel_shared[((((int)threadIdx.x) * 48) + 35)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[185] * kernel_shared[((((int)threadIdx.x) * 48) + 26)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[206] * kernel_shared[((((int)threadIdx.x) * 48) + 29)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[227] * kernel_shared[((((int)threadIdx.x) * 48) + 32)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[248] * kernel_shared[((((int)threadIdx.x) * 48) + 35)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[188] * kernel_shared[((((int)threadIdx.x) * 48) + 26)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[209] * kernel_shared[((((int)threadIdx.x) * 48) + 29)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[230] * kernel_shared[((((int)threadIdx.x) * 48) + 32)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[251] * kernel_shared[((((int)threadIdx.x) * 48) + 35)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[252] * kernel_shared[((((int)threadIdx.x) * 48) + 36)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[273] * kernel_shared[((((int)threadIdx.x) * 48) + 39)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[294] * kernel_shared[((((int)threadIdx.x) * 48) + 42)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[315] * kernel_shared[((((int)threadIdx.x) * 48) + 45)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[255] * kernel_shared[((((int)threadIdx.x) * 48) + 36)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[276] * kernel_shared[((((int)threadIdx.x) * 48) + 39)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[297] * kernel_shared[((((int)threadIdx.x) * 48) + 42)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[318] * kernel_shared[((((int)threadIdx.x) * 48) + 45)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[258] * kernel_shared[((((int)threadIdx.x) * 48) + 36)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[279] * kernel_shared[((((int)threadIdx.x) * 48) + 39)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[300] * kernel_shared[((((int)threadIdx.x) * 48) + 42)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[321] * kernel_shared[((((int)threadIdx.x) * 48) + 45)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[261] * kernel_shared[((((int)threadIdx.x) * 48) + 36)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[282] * kernel_shared[((((int)threadIdx.x) * 48) + 39)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[303] * kernel_shared[((((int)threadIdx.x) * 48) + 42)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[324] * kernel_shared[((((int)threadIdx.x) * 48) + 45)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[264] * kernel_shared[((((int)threadIdx.x) * 48) + 36)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[285] * kernel_shared[((((int)threadIdx.x) * 48) + 39)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[306] * kernel_shared[((((int)threadIdx.x) * 48) + 42)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[327] * kernel_shared[((((int)threadIdx.x) * 48) + 45)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[267] * kernel_shared[((((int)threadIdx.x) * 48) + 36)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[288] * kernel_shared[((((int)threadIdx.x) * 48) + 39)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[309] * kernel_shared[((((int)threadIdx.x) * 48) + 42)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[330] * kernel_shared[((((int)threadIdx.x) * 48) + 45)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[270] * kernel_shared[((((int)threadIdx.x) * 48) + 36)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[291] * kernel_shared[((((int)threadIdx.x) * 48) + 39)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[312] * kernel_shared[((((int)threadIdx.x) * 48) + 42)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[333] * kernel_shared[((((int)threadIdx.x) * 48) + 45)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[253] * kernel_shared[((((int)threadIdx.x) * 48) + 37)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[274] * kernel_shared[((((int)threadIdx.x) * 48) + 40)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[295] * kernel_shared[((((int)threadIdx.x) * 48) + 43)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[316] * kernel_shared[((((int)threadIdx.x) * 48) + 46)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[256] * kernel_shared[((((int)threadIdx.x) * 48) + 37)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[277] * kernel_shared[((((int)threadIdx.x) * 48) + 40)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[298] * kernel_shared[((((int)threadIdx.x) * 48) + 43)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[319] * kernel_shared[((((int)threadIdx.x) * 48) + 46)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[259] * kernel_shared[((((int)threadIdx.x) * 48) + 37)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[280] * kernel_shared[((((int)threadIdx.x) * 48) + 40)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[301] * kernel_shared[((((int)threadIdx.x) * 48) + 43)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[322] * kernel_shared[((((int)threadIdx.x) * 48) + 46)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[262] * kernel_shared[((((int)threadIdx.x) * 48) + 37)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[283] * kernel_shared[((((int)threadIdx.x) * 48) + 40)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[304] * kernel_shared[((((int)threadIdx.x) * 48) + 43)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[325] * kernel_shared[((((int)threadIdx.x) * 48) + 46)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[265] * kernel_shared[((((int)threadIdx.x) * 48) + 37)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[286] * kernel_shared[((((int)threadIdx.x) * 48) + 40)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[307] * kernel_shared[((((int)threadIdx.x) * 48) + 43)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[328] * kernel_shared[((((int)threadIdx.x) * 48) + 46)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[268] * kernel_shared[((((int)threadIdx.x) * 48) + 37)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[289] * kernel_shared[((((int)threadIdx.x) * 48) + 40)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[310] * kernel_shared[((((int)threadIdx.x) * 48) + 43)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[331] * kernel_shared[((((int)threadIdx.x) * 48) + 46)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[271] * kernel_shared[((((int)threadIdx.x) * 48) + 37)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[292] * kernel_shared[((((int)threadIdx.x) * 48) + 40)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[313] * kernel_shared[((((int)threadIdx.x) * 48) + 43)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[334] * kernel_shared[((((int)threadIdx.x) * 48) + 46)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[254] * kernel_shared[((((int)threadIdx.x) * 48) + 38)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[275] * kernel_shared[((((int)threadIdx.x) * 48) + 41)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[296] * kernel_shared[((((int)threadIdx.x) * 48) + 44)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[317] * kernel_shared[((((int)threadIdx.x) * 48) + 47)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[257] * kernel_shared[((((int)threadIdx.x) * 48) + 38)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[278] * kernel_shared[((((int)threadIdx.x) * 48) + 41)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[299] * kernel_shared[((((int)threadIdx.x) * 48) + 44)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[320] * kernel_shared[((((int)threadIdx.x) * 48) + 47)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[260] * kernel_shared[((((int)threadIdx.x) * 48) + 38)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[281] * kernel_shared[((((int)threadIdx.x) * 48) + 41)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[302] * kernel_shared[((((int)threadIdx.x) * 48) + 44)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[323] * kernel_shared[((((int)threadIdx.x) * 48) + 47)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[263] * kernel_shared[((((int)threadIdx.x) * 48) + 38)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[284] * kernel_shared[((((int)threadIdx.x) * 48) + 41)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[305] * kernel_shared[((((int)threadIdx.x) * 48) + 44)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[326] * kernel_shared[((((int)threadIdx.x) * 48) + 47)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[266] * kernel_shared[((((int)threadIdx.x) * 48) + 38)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[287] * kernel_shared[((((int)threadIdx.x) * 48) + 41)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[308] * kernel_shared[((((int)threadIdx.x) * 48) + 44)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[329] * kernel_shared[((((int)threadIdx.x) * 48) + 47)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[269] * kernel_shared[((((int)threadIdx.x) * 48) + 38)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[290] * kernel_shared[((((int)threadIdx.x) * 48) + 41)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[311] * kernel_shared[((((int)threadIdx.x) * 48) + 44)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[332] * kernel_shared[((((int)threadIdx.x) * 48) + 47)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[272] * kernel_shared[((((int)threadIdx.x) * 48) + 38)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[293] * kernel_shared[((((int)threadIdx.x) * 48) + 41)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[314] * kernel_shared[((((int)threadIdx.x) * 48) + 44)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[335] * kernel_shared[((((int)threadIdx.x) * 48) + 47)]));
        }
      }
      for (int i2_inner = 0; i2_inner < 7; ++i2_inner) {
        compute[(((((((int)blockIdx.x) / 7) * 3136) + (((int)threadIdx.x) * 49)) + (i2_inner * 7)) + (((int)blockIdx.x) % 7))] = max((conv2d_nchw[i2_inner] + bias[(((((int)blockIdx.x) / 7) * 64) + ((int)threadIdx.x))]), 0.000000e+00f);
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 187-191

A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.

.. GENERATED FROM PYTHON SOURCE LINES 191-213

.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resume search:
    Get devices for measurement successfully!






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  4.967 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
