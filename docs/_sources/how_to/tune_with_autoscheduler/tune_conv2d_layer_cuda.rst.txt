
.. DO NOT EDIT. THIS FILE WAS AUTOMATICALLY GENERATED BY
.. TVM'S MONKEY-PATCHED VERSION OF SPHINX-GALLERY. TO MAKE
.. CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.py"

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        This tutorial can be used interactively with Google Colab! You can also click
        :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>` to run the Jupyter notebook locally.

        .. image:: https://raw.githubusercontent.com/tlc-pack/web-data/main/images/utilities/colab_button.svg
            :align: center
            :target: https://colab.research.google.com/github/apache/tvm-site/blob/asf-site/docs/_downloads/5f1f7bd7d90710fd404f7bcdc4965622/tune_conv2d_layer_cuda.ipynb
            :width: 300px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.

.. GENERATED FROM PYTHON SOURCE LINES 39-47

.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python








.. GENERATED FROM PYTHON SOURCE LINES 51-56

Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.

.. GENERATED FROM PYTHON SOURCE LINES 56-68

.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]









.. GENERATED FROM PYTHON SOURCE LINES 69-72

Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.

.. GENERATED FROM PYTHON SOURCE LINES 72-85

.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)





.. GENERATED FROM PYTHON SOURCE LINES 86-103

Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the main process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.

.. GENERATED FROM PYTHON SOURCE LINES 103-113

.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Get devices for measurement successfully!




.. GENERATED FROM PYTHON SOURCE LINES 114-120

Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.

.. GENERATED FROM PYTHON SOURCE LINES 120-129

.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx








.. GENERATED FROM PYTHON SOURCE LINES 130-133

We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.

.. GENERATED FROM PYTHON SOURCE LINES 133-137

.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Lowered TIR:
    # from tvm.script import ir as I
    # from tvm.script import tir as T

    @I.ir_module
    class Module:
        @T.prim_func
        def main(data: T.Buffer((1, 512, 7, 7), "float32"), kernel: T.Buffer((512, 512, 3, 3), "float32"), bias: T.Buffer((1, 512, 1, 1), "float32"), compute: T.Buffer((1, 512, 7, 7), "float32")):
            T.func_attr({"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True})
            blockIdx_x = T.env_thread("blockIdx.x")
            T.launch_thread(blockIdx_x, 224)
            conv2d_nchw = T.allocate([7], "float32", "local")
            pad_temp_shared = T.allocate([144], "float32", "shared")
            kernel_shared = T.allocate([768], "float32", "shared")
            threadIdx_x = T.env_thread("threadIdx.x")
            T.launch_thread(threadIdx_x, 16)
            conv2d_nchw_1 = T.Buffer((7,), data=conv2d_nchw, scope="local", align=16)
            conv2d_nchw_1[0] = T.float32(0)
            conv2d_nchw_1[1] = T.float32(0)
            conv2d_nchw_1[2] = T.float32(0)
            conv2d_nchw_1[3] = T.float32(0)
            conv2d_nchw_1[4] = T.float32(0)
            conv2d_nchw_1[5] = T.float32(0)
            conv2d_nchw_1[6] = T.float32(0)
            for rc_outer_outer, rx_outer_outer in T.grid(32, 3):
                cse_var_1: T.int32 = rc_outer_outer * 784
                threadIdx_x_1 = T.env_thread("threadIdx.x")
                pad_temp_shared_1 = T.Buffer((144,), data=pad_temp_shared, scope="shared")
                data_1 = T.Buffer((25088,), data=data.data)
                with T.launch_thread(threadIdx_x_1, 16):
                    pad_temp_shared_1[threadIdx_x_1] = T.if_then_else(1 <= threadIdx_x_1 % 9 and threadIdx_x_1 % 9 < 8 and 1 <= rx_outer_outer + blockIdx_x % 7 and rx_outer_outer + blockIdx_x % 7 < 8, data_1[cse_var_1 + threadIdx_x_1 // 9 * 49 + threadIdx_x_1 % 9 * 7 + rx_outer_outer + blockIdx_x % 7 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 16):
                    pad_temp_shared_1[threadIdx_x_1 + 16] = T.if_then_else(1 <= (threadIdx_x_1 + 7) % 9 and (threadIdx_x_1 + 7) % 9 < 8 and 1 <= rx_outer_outer + blockIdx_x % 7 and rx_outer_outer + blockIdx_x % 7 < 8, data_1[cse_var_1 + (threadIdx_x_1 + 16) // 9 * 49 + (threadIdx_x_1 + 7) % 9 * 7 + rx_outer_outer + blockIdx_x % 7 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 16):
                    pad_temp_shared_1[threadIdx_x_1 + 32] = T.if_then_else(1 <= (threadIdx_x_1 + 5) % 9 and (threadIdx_x_1 + 5) % 9 < 8 and 1 <= rx_outer_outer + blockIdx_x % 7 and rx_outer_outer + blockIdx_x % 7 < 8, data_1[cse_var_1 + (threadIdx_x_1 + 32) // 9 * 49 + (threadIdx_x_1 + 5) % 9 * 7 + rx_outer_outer + blockIdx_x % 7 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 16):
                    pad_temp_shared_1[threadIdx_x_1 + 48] = T.if_then_else(1 <= (threadIdx_x_1 + 3) % 9 and (threadIdx_x_1 + 3) % 9 < 8 and 1 <= rx_outer_outer + blockIdx_x % 7 and rx_outer_outer + blockIdx_x % 7 < 8, data_1[cse_var_1 + (threadIdx_x_1 + 48) // 9 * 49 + (threadIdx_x_1 + 3) % 9 * 7 + rx_outer_outer + blockIdx_x % 7 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 16):
                    pad_temp_shared_1[threadIdx_x_1 + 64] = T.if_then_else(1 <= (threadIdx_x_1 + 1) % 9 and (threadIdx_x_1 + 1) % 9 < 8 and 1 <= rx_outer_outer + blockIdx_x % 7 and rx_outer_outer + blockIdx_x % 7 < 8, data_1[cse_var_1 + (threadIdx_x_1 + 64) // 9 * 49 + (threadIdx_x_1 + 1) % 9 * 7 + rx_outer_outer + blockIdx_x % 7 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 16):
                    pad_temp_shared_1[threadIdx_x_1 + 80] = T.if_then_else(1 <= (threadIdx_x_1 + 8) % 9 and (threadIdx_x_1 + 8) % 9 < 8 and 1 <= rx_outer_outer + blockIdx_x % 7 and rx_outer_outer + blockIdx_x % 7 < 8, data_1[cse_var_1 + (threadIdx_x_1 + 80) // 9 * 49 + (threadIdx_x_1 + 8) % 9 * 7 + rx_outer_outer + blockIdx_x % 7 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 16):
                    pad_temp_shared_1[threadIdx_x_1 + 96] = T.if_then_else(1 <= (threadIdx_x_1 + 6) % 9 and (threadIdx_x_1 + 6) % 9 < 8 and 1 <= rx_outer_outer + blockIdx_x % 7 and rx_outer_outer + blockIdx_x % 7 < 8, data_1[cse_var_1 + (threadIdx_x_1 + 96) // 9 * 49 + (threadIdx_x_1 + 6) % 9 * 7 + rx_outer_outer + blockIdx_x % 7 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 16):
                    pad_temp_shared_1[threadIdx_x_1 + 112] = T.if_then_else(1 <= (threadIdx_x_1 + 4) % 9 and (threadIdx_x_1 + 4) % 9 < 8 and 1 <= rx_outer_outer + blockIdx_x % 7 and rx_outer_outer + blockIdx_x % 7 < 8, data_1[cse_var_1 + (threadIdx_x_1 + 112) // 9 * 49 + (threadIdx_x_1 + 4) % 9 * 7 + rx_outer_outer + blockIdx_x % 7 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 16):
                    pad_temp_shared_1[threadIdx_x_1 + 128] = T.if_then_else(1 <= (threadIdx_x_1 + 2) % 9 and (threadIdx_x_1 + 2) % 9 < 8 and 1 <= rx_outer_outer + blockIdx_x % 7 and rx_outer_outer + blockIdx_x % 7 < 8, data_1[cse_var_1 + (threadIdx_x_1 + 128) // 9 * 49 + (threadIdx_x_1 + 2) % 9 * 7 + rx_outer_outer + blockIdx_x % 7 - 8], T.float32(0))
                threadIdx_x_2 = T.env_thread("threadIdx.x")
                kernel_shared_1 = T.Buffer((768,), data=kernel_shared, scope="shared")
                kernel_1 = T.Buffer((2359296,), data=kernel.data)
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 16] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 48]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 32] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 96]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 48] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 4608]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 64] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 4656]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 80] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 4704]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 96] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 9216]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 112] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 9264]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 128] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 9312]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 144] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 13824]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 160] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 13872]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 176] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 13920]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 192] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 18432]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 208] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 18480]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 224] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 18528]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 240] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 23040]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 256] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 23088]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 272] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 23136]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 288] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 27648]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 304] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 27696]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 320] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 27744]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 336] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 32256]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 352] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 32304]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 368] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 32352]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 384] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 36864]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 400] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 36912]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 416] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 36960]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 432] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 41472]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 448] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 41520]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 464] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 41568]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 480] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 46080]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 496] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 46128]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 512] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 46176]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 528] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 50688]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 544] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 50736]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 560] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 50784]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 576] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 55296]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 592] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 55344]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 608] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 55392]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 624] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 59904]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 640] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 59952]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 656] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 60000]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 672] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 64512]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 688] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 64560]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 704] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 64608]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 720] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 69120]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 736] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 69168]
                with T.launch_thread(threadIdx_x_2, 16):
                    kernel_shared_1[threadIdx_x_2 + 752] = kernel_1[blockIdx_x // 7 * 73728 + rc_outer_outer * 144 + threadIdx_x_2 * 3 + rx_outer_outer + 69216]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[0] * kernel_shared_1[threadIdx_x * 48]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[1] * kernel_shared_1[threadIdx_x * 48 + 1]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[2] * kernel_shared_1[threadIdx_x * 48 + 2]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[9] * kernel_shared_1[threadIdx_x * 48 + 3]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[10] * kernel_shared_1[threadIdx_x * 48 + 4]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[11] * kernel_shared_1[threadIdx_x * 48 + 5]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[18] * kernel_shared_1[threadIdx_x * 48 + 6]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[19] * kernel_shared_1[threadIdx_x * 48 + 7]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[20] * kernel_shared_1[threadIdx_x * 48 + 8]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[27] * kernel_shared_1[threadIdx_x * 48 + 9]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[28] * kernel_shared_1[threadIdx_x * 48 + 10]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[29] * kernel_shared_1[threadIdx_x * 48 + 11]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[36] * kernel_shared_1[threadIdx_x * 48 + 12]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[37] * kernel_shared_1[threadIdx_x * 48 + 13]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[38] * kernel_shared_1[threadIdx_x * 48 + 14]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[45] * kernel_shared_1[threadIdx_x * 48 + 15]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[46] * kernel_shared_1[threadIdx_x * 48 + 16]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[47] * kernel_shared_1[threadIdx_x * 48 + 17]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[54] * kernel_shared_1[threadIdx_x * 48 + 18]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[55] * kernel_shared_1[threadIdx_x * 48 + 19]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[56] * kernel_shared_1[threadIdx_x * 48 + 20]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[63] * kernel_shared_1[threadIdx_x * 48 + 21]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[64] * kernel_shared_1[threadIdx_x * 48 + 22]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[65] * kernel_shared_1[threadIdx_x * 48 + 23]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[72] * kernel_shared_1[threadIdx_x * 48 + 24]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[73] * kernel_shared_1[threadIdx_x * 48 + 25]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[74] * kernel_shared_1[threadIdx_x * 48 + 26]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[81] * kernel_shared_1[threadIdx_x * 48 + 27]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[82] * kernel_shared_1[threadIdx_x * 48 + 28]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[83] * kernel_shared_1[threadIdx_x * 48 + 29]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[90] * kernel_shared_1[threadIdx_x * 48 + 30]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[91] * kernel_shared_1[threadIdx_x * 48 + 31]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[92] * kernel_shared_1[threadIdx_x * 48 + 32]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[99] * kernel_shared_1[threadIdx_x * 48 + 33]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[100] * kernel_shared_1[threadIdx_x * 48 + 34]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[101] * kernel_shared_1[threadIdx_x * 48 + 35]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[108] * kernel_shared_1[threadIdx_x * 48 + 36]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[109] * kernel_shared_1[threadIdx_x * 48 + 37]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[110] * kernel_shared_1[threadIdx_x * 48 + 38]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[117] * kernel_shared_1[threadIdx_x * 48 + 39]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[118] * kernel_shared_1[threadIdx_x * 48 + 40]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[119] * kernel_shared_1[threadIdx_x * 48 + 41]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[126] * kernel_shared_1[threadIdx_x * 48 + 42]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[127] * kernel_shared_1[threadIdx_x * 48 + 43]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[128] * kernel_shared_1[threadIdx_x * 48 + 44]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[135] * kernel_shared_1[threadIdx_x * 48 + 45]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[136] * kernel_shared_1[threadIdx_x * 48 + 46]
                conv2d_nchw_1[0] = conv2d_nchw_1[0] + pad_temp_shared_1[137] * kernel_shared_1[threadIdx_x * 48 + 47]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[1] * kernel_shared_1[threadIdx_x * 48]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[2] * kernel_shared_1[threadIdx_x * 48 + 1]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[3] * kernel_shared_1[threadIdx_x * 48 + 2]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[10] * kernel_shared_1[threadIdx_x * 48 + 3]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[11] * kernel_shared_1[threadIdx_x * 48 + 4]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[12] * kernel_shared_1[threadIdx_x * 48 + 5]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[19] * kernel_shared_1[threadIdx_x * 48 + 6]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[20] * kernel_shared_1[threadIdx_x * 48 + 7]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[21] * kernel_shared_1[threadIdx_x * 48 + 8]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[28] * kernel_shared_1[threadIdx_x * 48 + 9]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[29] * kernel_shared_1[threadIdx_x * 48 + 10]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[30] * kernel_shared_1[threadIdx_x * 48 + 11]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[37] * kernel_shared_1[threadIdx_x * 48 + 12]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[38] * kernel_shared_1[threadIdx_x * 48 + 13]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[39] * kernel_shared_1[threadIdx_x * 48 + 14]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[46] * kernel_shared_1[threadIdx_x * 48 + 15]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[47] * kernel_shared_1[threadIdx_x * 48 + 16]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[48] * kernel_shared_1[threadIdx_x * 48 + 17]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[55] * kernel_shared_1[threadIdx_x * 48 + 18]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[56] * kernel_shared_1[threadIdx_x * 48 + 19]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[57] * kernel_shared_1[threadIdx_x * 48 + 20]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[64] * kernel_shared_1[threadIdx_x * 48 + 21]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[65] * kernel_shared_1[threadIdx_x * 48 + 22]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[66] * kernel_shared_1[threadIdx_x * 48 + 23]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[73] * kernel_shared_1[threadIdx_x * 48 + 24]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[74] * kernel_shared_1[threadIdx_x * 48 + 25]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[75] * kernel_shared_1[threadIdx_x * 48 + 26]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[82] * kernel_shared_1[threadIdx_x * 48 + 27]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[83] * kernel_shared_1[threadIdx_x * 48 + 28]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[84] * kernel_shared_1[threadIdx_x * 48 + 29]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[91] * kernel_shared_1[threadIdx_x * 48 + 30]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[92] * kernel_shared_1[threadIdx_x * 48 + 31]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[93] * kernel_shared_1[threadIdx_x * 48 + 32]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[100] * kernel_shared_1[threadIdx_x * 48 + 33]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[101] * kernel_shared_1[threadIdx_x * 48 + 34]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[102] * kernel_shared_1[threadIdx_x * 48 + 35]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[109] * kernel_shared_1[threadIdx_x * 48 + 36]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[110] * kernel_shared_1[threadIdx_x * 48 + 37]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[111] * kernel_shared_1[threadIdx_x * 48 + 38]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[118] * kernel_shared_1[threadIdx_x * 48 + 39]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[119] * kernel_shared_1[threadIdx_x * 48 + 40]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[120] * kernel_shared_1[threadIdx_x * 48 + 41]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[127] * kernel_shared_1[threadIdx_x * 48 + 42]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[128] * kernel_shared_1[threadIdx_x * 48 + 43]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[129] * kernel_shared_1[threadIdx_x * 48 + 44]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[136] * kernel_shared_1[threadIdx_x * 48 + 45]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[137] * kernel_shared_1[threadIdx_x * 48 + 46]
                conv2d_nchw_1[1] = conv2d_nchw_1[1] + pad_temp_shared_1[138] * kernel_shared_1[threadIdx_x * 48 + 47]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[2] * kernel_shared_1[threadIdx_x * 48]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[3] * kernel_shared_1[threadIdx_x * 48 + 1]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[4] * kernel_shared_1[threadIdx_x * 48 + 2]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[11] * kernel_shared_1[threadIdx_x * 48 + 3]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[12] * kernel_shared_1[threadIdx_x * 48 + 4]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[13] * kernel_shared_1[threadIdx_x * 48 + 5]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[20] * kernel_shared_1[threadIdx_x * 48 + 6]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[21] * kernel_shared_1[threadIdx_x * 48 + 7]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[22] * kernel_shared_1[threadIdx_x * 48 + 8]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[29] * kernel_shared_1[threadIdx_x * 48 + 9]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[30] * kernel_shared_1[threadIdx_x * 48 + 10]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[31] * kernel_shared_1[threadIdx_x * 48 + 11]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[38] * kernel_shared_1[threadIdx_x * 48 + 12]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[39] * kernel_shared_1[threadIdx_x * 48 + 13]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[40] * kernel_shared_1[threadIdx_x * 48 + 14]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[47] * kernel_shared_1[threadIdx_x * 48 + 15]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[48] * kernel_shared_1[threadIdx_x * 48 + 16]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[49] * kernel_shared_1[threadIdx_x * 48 + 17]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[56] * kernel_shared_1[threadIdx_x * 48 + 18]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[57] * kernel_shared_1[threadIdx_x * 48 + 19]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[58] * kernel_shared_1[threadIdx_x * 48 + 20]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[65] * kernel_shared_1[threadIdx_x * 48 + 21]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[66] * kernel_shared_1[threadIdx_x * 48 + 22]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[67] * kernel_shared_1[threadIdx_x * 48 + 23]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[74] * kernel_shared_1[threadIdx_x * 48 + 24]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[75] * kernel_shared_1[threadIdx_x * 48 + 25]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[76] * kernel_shared_1[threadIdx_x * 48 + 26]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[83] * kernel_shared_1[threadIdx_x * 48 + 27]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[84] * kernel_shared_1[threadIdx_x * 48 + 28]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[85] * kernel_shared_1[threadIdx_x * 48 + 29]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[92] * kernel_shared_1[threadIdx_x * 48 + 30]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[93] * kernel_shared_1[threadIdx_x * 48 + 31]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[94] * kernel_shared_1[threadIdx_x * 48 + 32]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[101] * kernel_shared_1[threadIdx_x * 48 + 33]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[102] * kernel_shared_1[threadIdx_x * 48 + 34]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[103] * kernel_shared_1[threadIdx_x * 48 + 35]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[110] * kernel_shared_1[threadIdx_x * 48 + 36]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[111] * kernel_shared_1[threadIdx_x * 48 + 37]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[112] * kernel_shared_1[threadIdx_x * 48 + 38]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[119] * kernel_shared_1[threadIdx_x * 48 + 39]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[120] * kernel_shared_1[threadIdx_x * 48 + 40]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[121] * kernel_shared_1[threadIdx_x * 48 + 41]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[128] * kernel_shared_1[threadIdx_x * 48 + 42]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[129] * kernel_shared_1[threadIdx_x * 48 + 43]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[130] * kernel_shared_1[threadIdx_x * 48 + 44]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[137] * kernel_shared_1[threadIdx_x * 48 + 45]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[138] * kernel_shared_1[threadIdx_x * 48 + 46]
                conv2d_nchw_1[2] = conv2d_nchw_1[2] + pad_temp_shared_1[139] * kernel_shared_1[threadIdx_x * 48 + 47]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[3] * kernel_shared_1[threadIdx_x * 48]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[4] * kernel_shared_1[threadIdx_x * 48 + 1]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[5] * kernel_shared_1[threadIdx_x * 48 + 2]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[12] * kernel_shared_1[threadIdx_x * 48 + 3]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[13] * kernel_shared_1[threadIdx_x * 48 + 4]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[14] * kernel_shared_1[threadIdx_x * 48 + 5]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[21] * kernel_shared_1[threadIdx_x * 48 + 6]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[22] * kernel_shared_1[threadIdx_x * 48 + 7]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[23] * kernel_shared_1[threadIdx_x * 48 + 8]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[30] * kernel_shared_1[threadIdx_x * 48 + 9]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[31] * kernel_shared_1[threadIdx_x * 48 + 10]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[32] * kernel_shared_1[threadIdx_x * 48 + 11]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[39] * kernel_shared_1[threadIdx_x * 48 + 12]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[40] * kernel_shared_1[threadIdx_x * 48 + 13]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[41] * kernel_shared_1[threadIdx_x * 48 + 14]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[48] * kernel_shared_1[threadIdx_x * 48 + 15]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[49] * kernel_shared_1[threadIdx_x * 48 + 16]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[50] * kernel_shared_1[threadIdx_x * 48 + 17]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[57] * kernel_shared_1[threadIdx_x * 48 + 18]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[58] * kernel_shared_1[threadIdx_x * 48 + 19]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[59] * kernel_shared_1[threadIdx_x * 48 + 20]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[66] * kernel_shared_1[threadIdx_x * 48 + 21]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[67] * kernel_shared_1[threadIdx_x * 48 + 22]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[68] * kernel_shared_1[threadIdx_x * 48 + 23]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[75] * kernel_shared_1[threadIdx_x * 48 + 24]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[76] * kernel_shared_1[threadIdx_x * 48 + 25]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[77] * kernel_shared_1[threadIdx_x * 48 + 26]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[84] * kernel_shared_1[threadIdx_x * 48 + 27]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[85] * kernel_shared_1[threadIdx_x * 48 + 28]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[86] * kernel_shared_1[threadIdx_x * 48 + 29]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[93] * kernel_shared_1[threadIdx_x * 48 + 30]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[94] * kernel_shared_1[threadIdx_x * 48 + 31]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[95] * kernel_shared_1[threadIdx_x * 48 + 32]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[102] * kernel_shared_1[threadIdx_x * 48 + 33]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[103] * kernel_shared_1[threadIdx_x * 48 + 34]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[104] * kernel_shared_1[threadIdx_x * 48 + 35]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[111] * kernel_shared_1[threadIdx_x * 48 + 36]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[112] * kernel_shared_1[threadIdx_x * 48 + 37]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[113] * kernel_shared_1[threadIdx_x * 48 + 38]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[120] * kernel_shared_1[threadIdx_x * 48 + 39]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[121] * kernel_shared_1[threadIdx_x * 48 + 40]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[122] * kernel_shared_1[threadIdx_x * 48 + 41]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[129] * kernel_shared_1[threadIdx_x * 48 + 42]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[130] * kernel_shared_1[threadIdx_x * 48 + 43]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[131] * kernel_shared_1[threadIdx_x * 48 + 44]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[138] * kernel_shared_1[threadIdx_x * 48 + 45]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[139] * kernel_shared_1[threadIdx_x * 48 + 46]
                conv2d_nchw_1[3] = conv2d_nchw_1[3] + pad_temp_shared_1[140] * kernel_shared_1[threadIdx_x * 48 + 47]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[4] * kernel_shared_1[threadIdx_x * 48]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[5] * kernel_shared_1[threadIdx_x * 48 + 1]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[6] * kernel_shared_1[threadIdx_x * 48 + 2]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[13] * kernel_shared_1[threadIdx_x * 48 + 3]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[14] * kernel_shared_1[threadIdx_x * 48 + 4]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[15] * kernel_shared_1[threadIdx_x * 48 + 5]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[22] * kernel_shared_1[threadIdx_x * 48 + 6]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[23] * kernel_shared_1[threadIdx_x * 48 + 7]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[24] * kernel_shared_1[threadIdx_x * 48 + 8]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[31] * kernel_shared_1[threadIdx_x * 48 + 9]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[32] * kernel_shared_1[threadIdx_x * 48 + 10]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[33] * kernel_shared_1[threadIdx_x * 48 + 11]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[40] * kernel_shared_1[threadIdx_x * 48 + 12]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[41] * kernel_shared_1[threadIdx_x * 48 + 13]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[42] * kernel_shared_1[threadIdx_x * 48 + 14]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[49] * kernel_shared_1[threadIdx_x * 48 + 15]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[50] * kernel_shared_1[threadIdx_x * 48 + 16]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[51] * kernel_shared_1[threadIdx_x * 48 + 17]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[58] * kernel_shared_1[threadIdx_x * 48 + 18]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[59] * kernel_shared_1[threadIdx_x * 48 + 19]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[60] * kernel_shared_1[threadIdx_x * 48 + 20]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[67] * kernel_shared_1[threadIdx_x * 48 + 21]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[68] * kernel_shared_1[threadIdx_x * 48 + 22]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[69] * kernel_shared_1[threadIdx_x * 48 + 23]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[76] * kernel_shared_1[threadIdx_x * 48 + 24]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[77] * kernel_shared_1[threadIdx_x * 48 + 25]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[78] * kernel_shared_1[threadIdx_x * 48 + 26]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[85] * kernel_shared_1[threadIdx_x * 48 + 27]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[86] * kernel_shared_1[threadIdx_x * 48 + 28]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[87] * kernel_shared_1[threadIdx_x * 48 + 29]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[94] * kernel_shared_1[threadIdx_x * 48 + 30]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[95] * kernel_shared_1[threadIdx_x * 48 + 31]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[96] * kernel_shared_1[threadIdx_x * 48 + 32]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[103] * kernel_shared_1[threadIdx_x * 48 + 33]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[104] * kernel_shared_1[threadIdx_x * 48 + 34]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[105] * kernel_shared_1[threadIdx_x * 48 + 35]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[112] * kernel_shared_1[threadIdx_x * 48 + 36]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[113] * kernel_shared_1[threadIdx_x * 48 + 37]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[114] * kernel_shared_1[threadIdx_x * 48 + 38]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[121] * kernel_shared_1[threadIdx_x * 48 + 39]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[122] * kernel_shared_1[threadIdx_x * 48 + 40]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[123] * kernel_shared_1[threadIdx_x * 48 + 41]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[130] * kernel_shared_1[threadIdx_x * 48 + 42]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[131] * kernel_shared_1[threadIdx_x * 48 + 43]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[132] * kernel_shared_1[threadIdx_x * 48 + 44]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[139] * kernel_shared_1[threadIdx_x * 48 + 45]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[140] * kernel_shared_1[threadIdx_x * 48 + 46]
                conv2d_nchw_1[4] = conv2d_nchw_1[4] + pad_temp_shared_1[141] * kernel_shared_1[threadIdx_x * 48 + 47]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[5] * kernel_shared_1[threadIdx_x * 48]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[6] * kernel_shared_1[threadIdx_x * 48 + 1]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[7] * kernel_shared_1[threadIdx_x * 48 + 2]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[14] * kernel_shared_1[threadIdx_x * 48 + 3]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[15] * kernel_shared_1[threadIdx_x * 48 + 4]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[16] * kernel_shared_1[threadIdx_x * 48 + 5]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[23] * kernel_shared_1[threadIdx_x * 48 + 6]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[24] * kernel_shared_1[threadIdx_x * 48 + 7]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[25] * kernel_shared_1[threadIdx_x * 48 + 8]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[32] * kernel_shared_1[threadIdx_x * 48 + 9]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[33] * kernel_shared_1[threadIdx_x * 48 + 10]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[34] * kernel_shared_1[threadIdx_x * 48 + 11]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[41] * kernel_shared_1[threadIdx_x * 48 + 12]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[42] * kernel_shared_1[threadIdx_x * 48 + 13]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[43] * kernel_shared_1[threadIdx_x * 48 + 14]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[50] * kernel_shared_1[threadIdx_x * 48 + 15]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[51] * kernel_shared_1[threadIdx_x * 48 + 16]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[52] * kernel_shared_1[threadIdx_x * 48 + 17]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[59] * kernel_shared_1[threadIdx_x * 48 + 18]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[60] * kernel_shared_1[threadIdx_x * 48 + 19]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[61] * kernel_shared_1[threadIdx_x * 48 + 20]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[68] * kernel_shared_1[threadIdx_x * 48 + 21]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[69] * kernel_shared_1[threadIdx_x * 48 + 22]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[70] * kernel_shared_1[threadIdx_x * 48 + 23]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[77] * kernel_shared_1[threadIdx_x * 48 + 24]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[78] * kernel_shared_1[threadIdx_x * 48 + 25]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[79] * kernel_shared_1[threadIdx_x * 48 + 26]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[86] * kernel_shared_1[threadIdx_x * 48 + 27]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[87] * kernel_shared_1[threadIdx_x * 48 + 28]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[88] * kernel_shared_1[threadIdx_x * 48 + 29]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[95] * kernel_shared_1[threadIdx_x * 48 + 30]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[96] * kernel_shared_1[threadIdx_x * 48 + 31]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[97] * kernel_shared_1[threadIdx_x * 48 + 32]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[104] * kernel_shared_1[threadIdx_x * 48 + 33]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[105] * kernel_shared_1[threadIdx_x * 48 + 34]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[106] * kernel_shared_1[threadIdx_x * 48 + 35]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[113] * kernel_shared_1[threadIdx_x * 48 + 36]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[114] * kernel_shared_1[threadIdx_x * 48 + 37]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[115] * kernel_shared_1[threadIdx_x * 48 + 38]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[122] * kernel_shared_1[threadIdx_x * 48 + 39]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[123] * kernel_shared_1[threadIdx_x * 48 + 40]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[124] * kernel_shared_1[threadIdx_x * 48 + 41]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[131] * kernel_shared_1[threadIdx_x * 48 + 42]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[132] * kernel_shared_1[threadIdx_x * 48 + 43]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[133] * kernel_shared_1[threadIdx_x * 48 + 44]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[140] * kernel_shared_1[threadIdx_x * 48 + 45]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[141] * kernel_shared_1[threadIdx_x * 48 + 46]
                conv2d_nchw_1[5] = conv2d_nchw_1[5] + pad_temp_shared_1[142] * kernel_shared_1[threadIdx_x * 48 + 47]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[6] * kernel_shared_1[threadIdx_x * 48]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[7] * kernel_shared_1[threadIdx_x * 48 + 1]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[8] * kernel_shared_1[threadIdx_x * 48 + 2]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[15] * kernel_shared_1[threadIdx_x * 48 + 3]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[16] * kernel_shared_1[threadIdx_x * 48 + 4]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[17] * kernel_shared_1[threadIdx_x * 48 + 5]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[24] * kernel_shared_1[threadIdx_x * 48 + 6]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[25] * kernel_shared_1[threadIdx_x * 48 + 7]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[26] * kernel_shared_1[threadIdx_x * 48 + 8]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[33] * kernel_shared_1[threadIdx_x * 48 + 9]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[34] * kernel_shared_1[threadIdx_x * 48 + 10]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[35] * kernel_shared_1[threadIdx_x * 48 + 11]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[42] * kernel_shared_1[threadIdx_x * 48 + 12]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[43] * kernel_shared_1[threadIdx_x * 48 + 13]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[44] * kernel_shared_1[threadIdx_x * 48 + 14]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[51] * kernel_shared_1[threadIdx_x * 48 + 15]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[52] * kernel_shared_1[threadIdx_x * 48 + 16]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[53] * kernel_shared_1[threadIdx_x * 48 + 17]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[60] * kernel_shared_1[threadIdx_x * 48 + 18]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[61] * kernel_shared_1[threadIdx_x * 48 + 19]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[62] * kernel_shared_1[threadIdx_x * 48 + 20]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[69] * kernel_shared_1[threadIdx_x * 48 + 21]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[70] * kernel_shared_1[threadIdx_x * 48 + 22]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[71] * kernel_shared_1[threadIdx_x * 48 + 23]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[78] * kernel_shared_1[threadIdx_x * 48 + 24]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[79] * kernel_shared_1[threadIdx_x * 48 + 25]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[80] * kernel_shared_1[threadIdx_x * 48 + 26]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[87] * kernel_shared_1[threadIdx_x * 48 + 27]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[88] * kernel_shared_1[threadIdx_x * 48 + 28]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[89] * kernel_shared_1[threadIdx_x * 48 + 29]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[96] * kernel_shared_1[threadIdx_x * 48 + 30]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[97] * kernel_shared_1[threadIdx_x * 48 + 31]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[98] * kernel_shared_1[threadIdx_x * 48 + 32]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[105] * kernel_shared_1[threadIdx_x * 48 + 33]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[106] * kernel_shared_1[threadIdx_x * 48 + 34]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[107] * kernel_shared_1[threadIdx_x * 48 + 35]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[114] * kernel_shared_1[threadIdx_x * 48 + 36]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[115] * kernel_shared_1[threadIdx_x * 48 + 37]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[116] * kernel_shared_1[threadIdx_x * 48 + 38]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[123] * kernel_shared_1[threadIdx_x * 48 + 39]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[124] * kernel_shared_1[threadIdx_x * 48 + 40]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[125] * kernel_shared_1[threadIdx_x * 48 + 41]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[132] * kernel_shared_1[threadIdx_x * 48 + 42]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[133] * kernel_shared_1[threadIdx_x * 48 + 43]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[134] * kernel_shared_1[threadIdx_x * 48 + 44]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[141] * kernel_shared_1[threadIdx_x * 48 + 45]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[142] * kernel_shared_1[threadIdx_x * 48 + 46]
                conv2d_nchw_1[6] = conv2d_nchw_1[6] + pad_temp_shared_1[143] * kernel_shared_1[threadIdx_x * 48 + 47]
            for i2_inner in range(7):
                compute_1 = T.Buffer((25088,), data=compute.data)
                bias_1 = T.Buffer((512,), data=bias.data)
                compute_1[blockIdx_x // 7 * 784 + threadIdx_x * 49 + i2_inner * 7 + blockIdx_x % 7] = T.max(conv2d_nchw_1[i2_inner] + bias_1[blockIdx_x // 7 * 16 + threadIdx_x], T.float32(0))




.. GENERATED FROM PYTHON SOURCE LINES 138-141

Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.

.. GENERATED FROM PYTHON SOURCE LINES 141-168

.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Execution time of this operator: 0.334 ms




.. GENERATED FROM PYTHON SOURCE LINES 169-174

Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

.. GENERATED FROM PYTHON SOURCE LINES 176-179

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.

.. GENERATED FROM PYTHON SOURCE LINES 179-186

.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=1)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=16)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=1)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=7)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=16)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=1)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=3)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=1)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=1)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=1)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=1)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=16)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=7)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=1)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=1)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=16)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=16)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 1024)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(16) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[7];
      __shared__ float pad_temp_shared[144];
      __shared__ float kernel_shared[768];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      conv2d_nchw[4] = 0.000000e+00f;
      conv2d_nchw[5] = 0.000000e+00f;
      conv2d_nchw[6] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 32; ++rc_outer_outer) {
        for (int rx_outer_outer = 0; rx_outer_outer < 3; ++rx_outer_outer) {
          __syncthreads();
          pad_temp_shared[((int)threadIdx.x)] = (((((1 <= (((int)threadIdx.x) % 9)) && ((((int)threadIdx.x) % 9) < 8)) && (1 <= (rx_outer_outer + (((int)blockIdx.x) % 7)))) && ((rx_outer_outer + (((int)blockIdx.x) % 7)) < 8)) ? data[((((((rc_outer_outer * 784) + ((((int)threadIdx.x) / 9) * 49)) + ((((int)threadIdx.x) % 9) * 7)) + rx_outer_outer) + (((int)blockIdx.x) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 16)] = (((((1 <= ((((int)threadIdx.x) + 7) % 9)) && (((((int)threadIdx.x) + 7) % 9) < 8)) && (1 <= (rx_outer_outer + (((int)blockIdx.x) % 7)))) && ((rx_outer_outer + (((int)blockIdx.x) % 7)) < 8)) ? data[((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 16) / 9) * 49)) + (((((int)threadIdx.x) + 7) % 9) * 7)) + rx_outer_outer) + (((int)blockIdx.x) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 32)] = (((((1 <= ((((int)threadIdx.x) + 5) % 9)) && (((((int)threadIdx.x) + 5) % 9) < 8)) && (1 <= (rx_outer_outer + (((int)blockIdx.x) % 7)))) && ((rx_outer_outer + (((int)blockIdx.x) % 7)) < 8)) ? data[((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 32) / 9) * 49)) + (((((int)threadIdx.x) + 5) % 9) * 7)) + rx_outer_outer) + (((int)blockIdx.x) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 48)] = (((((1 <= ((((int)threadIdx.x) + 3) % 9)) && (((((int)threadIdx.x) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + (((int)blockIdx.x) % 7)))) && ((rx_outer_outer + (((int)blockIdx.x) % 7)) < 8)) ? data[((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 48) / 9) * 49)) + (((((int)threadIdx.x) + 3) % 9) * 7)) + rx_outer_outer) + (((int)blockIdx.x) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 64)] = (((((1 <= ((((int)threadIdx.x) + 1) % 9)) && (((((int)threadIdx.x) + 1) % 9) < 8)) && (1 <= (rx_outer_outer + (((int)blockIdx.x) % 7)))) && ((rx_outer_outer + (((int)blockIdx.x) % 7)) < 8)) ? data[((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 64) / 9) * 49)) + (((((int)threadIdx.x) + 1) % 9) * 7)) + rx_outer_outer) + (((int)blockIdx.x) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 80)] = (((((1 <= ((((int)threadIdx.x) + 8) % 9)) && (((((int)threadIdx.x) + 8) % 9) < 8)) && (1 <= (rx_outer_outer + (((int)blockIdx.x) % 7)))) && ((rx_outer_outer + (((int)blockIdx.x) % 7)) < 8)) ? data[((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 80) / 9) * 49)) + (((((int)threadIdx.x) + 8) % 9) * 7)) + rx_outer_outer) + (((int)blockIdx.x) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 96)] = (((((1 <= ((((int)threadIdx.x) + 6) % 9)) && (((((int)threadIdx.x) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + (((int)blockIdx.x) % 7)))) && ((rx_outer_outer + (((int)blockIdx.x) % 7)) < 8)) ? data[((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 96) / 9) * 49)) + (((((int)threadIdx.x) + 6) % 9) * 7)) + rx_outer_outer) + (((int)blockIdx.x) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 112)] = (((((1 <= ((((int)threadIdx.x) + 4) % 9)) && (((((int)threadIdx.x) + 4) % 9) < 8)) && (1 <= (rx_outer_outer + (((int)blockIdx.x) % 7)))) && ((rx_outer_outer + (((int)blockIdx.x) % 7)) < 8)) ? data[((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 112) / 9) * 49)) + (((((int)threadIdx.x) + 4) % 9) * 7)) + rx_outer_outer) + (((int)blockIdx.x) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 128)] = (((((1 <= ((((int)threadIdx.x) + 2) % 9)) && (((((int)threadIdx.x) + 2) % 9) < 8)) && (1 <= (rx_outer_outer + (((int)blockIdx.x) % 7)))) && ((rx_outer_outer + (((int)blockIdx.x) % 7)) < 8)) ? data[((((((rc_outer_outer * 784) + (((((int)threadIdx.x) + 128) / 9) * 49)) + (((((int)threadIdx.x) + 2) % 9) * 7)) + rx_outer_outer) + (((int)blockIdx.x) % 7)) - 8)] : 0.000000e+00f);
          kernel_shared[((int)threadIdx.x)] = kernel[(((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 16)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 48)];
          kernel_shared[(((int)threadIdx.x) + 32)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 96)];
          kernel_shared[(((int)threadIdx.x) + 48)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 4608)];
          kernel_shared[(((int)threadIdx.x) + 64)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 4656)];
          kernel_shared[(((int)threadIdx.x) + 80)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 4704)];
          kernel_shared[(((int)threadIdx.x) + 96)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 9216)];
          kernel_shared[(((int)threadIdx.x) + 112)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 9264)];
          kernel_shared[(((int)threadIdx.x) + 128)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 9312)];
          kernel_shared[(((int)threadIdx.x) + 144)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 13824)];
          kernel_shared[(((int)threadIdx.x) + 160)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 13872)];
          kernel_shared[(((int)threadIdx.x) + 176)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 13920)];
          kernel_shared[(((int)threadIdx.x) + 192)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 18432)];
          kernel_shared[(((int)threadIdx.x) + 208)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 18480)];
          kernel_shared[(((int)threadIdx.x) + 224)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 18528)];
          kernel_shared[(((int)threadIdx.x) + 240)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 23040)];
          kernel_shared[(((int)threadIdx.x) + 256)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 23088)];
          kernel_shared[(((int)threadIdx.x) + 272)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 23136)];
          kernel_shared[(((int)threadIdx.x) + 288)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 27648)];
          kernel_shared[(((int)threadIdx.x) + 304)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 27696)];
          kernel_shared[(((int)threadIdx.x) + 320)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 27744)];
          kernel_shared[(((int)threadIdx.x) + 336)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 32256)];
          kernel_shared[(((int)threadIdx.x) + 352)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 32304)];
          kernel_shared[(((int)threadIdx.x) + 368)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 32352)];
          kernel_shared[(((int)threadIdx.x) + 384)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 36864)];
          kernel_shared[(((int)threadIdx.x) + 400)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 36912)];
          kernel_shared[(((int)threadIdx.x) + 416)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 36960)];
          kernel_shared[(((int)threadIdx.x) + 432)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 41472)];
          kernel_shared[(((int)threadIdx.x) + 448)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 41520)];
          kernel_shared[(((int)threadIdx.x) + 464)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 41568)];
          kernel_shared[(((int)threadIdx.x) + 480)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 46080)];
          kernel_shared[(((int)threadIdx.x) + 496)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 46128)];
          kernel_shared[(((int)threadIdx.x) + 512)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 46176)];
          kernel_shared[(((int)threadIdx.x) + 528)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 50688)];
          kernel_shared[(((int)threadIdx.x) + 544)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 50736)];
          kernel_shared[(((int)threadIdx.x) + 560)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 50784)];
          kernel_shared[(((int)threadIdx.x) + 576)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 55296)];
          kernel_shared[(((int)threadIdx.x) + 592)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 55344)];
          kernel_shared[(((int)threadIdx.x) + 608)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 55392)];
          kernel_shared[(((int)threadIdx.x) + 624)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 59904)];
          kernel_shared[(((int)threadIdx.x) + 640)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 59952)];
          kernel_shared[(((int)threadIdx.x) + 656)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 60000)];
          kernel_shared[(((int)threadIdx.x) + 672)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 64512)];
          kernel_shared[(((int)threadIdx.x) + 688)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 64560)];
          kernel_shared[(((int)threadIdx.x) + 704)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 64608)];
          kernel_shared[(((int)threadIdx.x) + 720)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 69120)];
          kernel_shared[(((int)threadIdx.x) + 736)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 69168)];
          kernel_shared[(((int)threadIdx.x) + 752)] = kernel[((((((((int)blockIdx.x) / 7) * 73728) + (rc_outer_outer * 144)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 69216)];
          __syncthreads();
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[0] * kernel_shared[(((int)threadIdx.x) * 48)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[1] * kernel_shared[((((int)threadIdx.x) * 48) + 1)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[2] * kernel_shared[((((int)threadIdx.x) * 48) + 2)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[9] * kernel_shared[((((int)threadIdx.x) * 48) + 3)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[10] * kernel_shared[((((int)threadIdx.x) * 48) + 4)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[11] * kernel_shared[((((int)threadIdx.x) * 48) + 5)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[18] * kernel_shared[((((int)threadIdx.x) * 48) + 6)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[19] * kernel_shared[((((int)threadIdx.x) * 48) + 7)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[20] * kernel_shared[((((int)threadIdx.x) * 48) + 8)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[27] * kernel_shared[((((int)threadIdx.x) * 48) + 9)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[28] * kernel_shared[((((int)threadIdx.x) * 48) + 10)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[29] * kernel_shared[((((int)threadIdx.x) * 48) + 11)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[36] * kernel_shared[((((int)threadIdx.x) * 48) + 12)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[37] * kernel_shared[((((int)threadIdx.x) * 48) + 13)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[38] * kernel_shared[((((int)threadIdx.x) * 48) + 14)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[45] * kernel_shared[((((int)threadIdx.x) * 48) + 15)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[46] * kernel_shared[((((int)threadIdx.x) * 48) + 16)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[47] * kernel_shared[((((int)threadIdx.x) * 48) + 17)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[54] * kernel_shared[((((int)threadIdx.x) * 48) + 18)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[55] * kernel_shared[((((int)threadIdx.x) * 48) + 19)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[56] * kernel_shared[((((int)threadIdx.x) * 48) + 20)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[63] * kernel_shared[((((int)threadIdx.x) * 48) + 21)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[64] * kernel_shared[((((int)threadIdx.x) * 48) + 22)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[65] * kernel_shared[((((int)threadIdx.x) * 48) + 23)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[72] * kernel_shared[((((int)threadIdx.x) * 48) + 24)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[73] * kernel_shared[((((int)threadIdx.x) * 48) + 25)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[74] * kernel_shared[((((int)threadIdx.x) * 48) + 26)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[81] * kernel_shared[((((int)threadIdx.x) * 48) + 27)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[82] * kernel_shared[((((int)threadIdx.x) * 48) + 28)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[83] * kernel_shared[((((int)threadIdx.x) * 48) + 29)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[90] * kernel_shared[((((int)threadIdx.x) * 48) + 30)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[91] * kernel_shared[((((int)threadIdx.x) * 48) + 31)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[92] * kernel_shared[((((int)threadIdx.x) * 48) + 32)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[99] * kernel_shared[((((int)threadIdx.x) * 48) + 33)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[100] * kernel_shared[((((int)threadIdx.x) * 48) + 34)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[101] * kernel_shared[((((int)threadIdx.x) * 48) + 35)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[108] * kernel_shared[((((int)threadIdx.x) * 48) + 36)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[109] * kernel_shared[((((int)threadIdx.x) * 48) + 37)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[110] * kernel_shared[((((int)threadIdx.x) * 48) + 38)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[117] * kernel_shared[((((int)threadIdx.x) * 48) + 39)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[118] * kernel_shared[((((int)threadIdx.x) * 48) + 40)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[119] * kernel_shared[((((int)threadIdx.x) * 48) + 41)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[126] * kernel_shared[((((int)threadIdx.x) * 48) + 42)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[127] * kernel_shared[((((int)threadIdx.x) * 48) + 43)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[128] * kernel_shared[((((int)threadIdx.x) * 48) + 44)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[135] * kernel_shared[((((int)threadIdx.x) * 48) + 45)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[136] * kernel_shared[((((int)threadIdx.x) * 48) + 46)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[137] * kernel_shared[((((int)threadIdx.x) * 48) + 47)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[1] * kernel_shared[(((int)threadIdx.x) * 48)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[2] * kernel_shared[((((int)threadIdx.x) * 48) + 1)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[3] * kernel_shared[((((int)threadIdx.x) * 48) + 2)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[10] * kernel_shared[((((int)threadIdx.x) * 48) + 3)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[11] * kernel_shared[((((int)threadIdx.x) * 48) + 4)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[12] * kernel_shared[((((int)threadIdx.x) * 48) + 5)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[19] * kernel_shared[((((int)threadIdx.x) * 48) + 6)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[20] * kernel_shared[((((int)threadIdx.x) * 48) + 7)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[21] * kernel_shared[((((int)threadIdx.x) * 48) + 8)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[28] * kernel_shared[((((int)threadIdx.x) * 48) + 9)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[29] * kernel_shared[((((int)threadIdx.x) * 48) + 10)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[30] * kernel_shared[((((int)threadIdx.x) * 48) + 11)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[37] * kernel_shared[((((int)threadIdx.x) * 48) + 12)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[38] * kernel_shared[((((int)threadIdx.x) * 48) + 13)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[39] * kernel_shared[((((int)threadIdx.x) * 48) + 14)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[46] * kernel_shared[((((int)threadIdx.x) * 48) + 15)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[47] * kernel_shared[((((int)threadIdx.x) * 48) + 16)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[48] * kernel_shared[((((int)threadIdx.x) * 48) + 17)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[55] * kernel_shared[((((int)threadIdx.x) * 48) + 18)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[56] * kernel_shared[((((int)threadIdx.x) * 48) + 19)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[57] * kernel_shared[((((int)threadIdx.x) * 48) + 20)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[64] * kernel_shared[((((int)threadIdx.x) * 48) + 21)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[65] * kernel_shared[((((int)threadIdx.x) * 48) + 22)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[66] * kernel_shared[((((int)threadIdx.x) * 48) + 23)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[73] * kernel_shared[((((int)threadIdx.x) * 48) + 24)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[74] * kernel_shared[((((int)threadIdx.x) * 48) + 25)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[75] * kernel_shared[((((int)threadIdx.x) * 48) + 26)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[82] * kernel_shared[((((int)threadIdx.x) * 48) + 27)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[83] * kernel_shared[((((int)threadIdx.x) * 48) + 28)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[84] * kernel_shared[((((int)threadIdx.x) * 48) + 29)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[91] * kernel_shared[((((int)threadIdx.x) * 48) + 30)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[92] * kernel_shared[((((int)threadIdx.x) * 48) + 31)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[93] * kernel_shared[((((int)threadIdx.x) * 48) + 32)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[100] * kernel_shared[((((int)threadIdx.x) * 48) + 33)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[101] * kernel_shared[((((int)threadIdx.x) * 48) + 34)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[102] * kernel_shared[((((int)threadIdx.x) * 48) + 35)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[109] * kernel_shared[((((int)threadIdx.x) * 48) + 36)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[110] * kernel_shared[((((int)threadIdx.x) * 48) + 37)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[111] * kernel_shared[((((int)threadIdx.x) * 48) + 38)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[118] * kernel_shared[((((int)threadIdx.x) * 48) + 39)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[119] * kernel_shared[((((int)threadIdx.x) * 48) + 40)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[120] * kernel_shared[((((int)threadIdx.x) * 48) + 41)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[127] * kernel_shared[((((int)threadIdx.x) * 48) + 42)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[128] * kernel_shared[((((int)threadIdx.x) * 48) + 43)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[129] * kernel_shared[((((int)threadIdx.x) * 48) + 44)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[136] * kernel_shared[((((int)threadIdx.x) * 48) + 45)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[137] * kernel_shared[((((int)threadIdx.x) * 48) + 46)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[138] * kernel_shared[((((int)threadIdx.x) * 48) + 47)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[2] * kernel_shared[(((int)threadIdx.x) * 48)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[3] * kernel_shared[((((int)threadIdx.x) * 48) + 1)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[4] * kernel_shared[((((int)threadIdx.x) * 48) + 2)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[11] * kernel_shared[((((int)threadIdx.x) * 48) + 3)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[12] * kernel_shared[((((int)threadIdx.x) * 48) + 4)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[13] * kernel_shared[((((int)threadIdx.x) * 48) + 5)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[20] * kernel_shared[((((int)threadIdx.x) * 48) + 6)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[21] * kernel_shared[((((int)threadIdx.x) * 48) + 7)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[22] * kernel_shared[((((int)threadIdx.x) * 48) + 8)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[29] * kernel_shared[((((int)threadIdx.x) * 48) + 9)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[30] * kernel_shared[((((int)threadIdx.x) * 48) + 10)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[31] * kernel_shared[((((int)threadIdx.x) * 48) + 11)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[38] * kernel_shared[((((int)threadIdx.x) * 48) + 12)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[39] * kernel_shared[((((int)threadIdx.x) * 48) + 13)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[40] * kernel_shared[((((int)threadIdx.x) * 48) + 14)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[47] * kernel_shared[((((int)threadIdx.x) * 48) + 15)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[48] * kernel_shared[((((int)threadIdx.x) * 48) + 16)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[49] * kernel_shared[((((int)threadIdx.x) * 48) + 17)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[56] * kernel_shared[((((int)threadIdx.x) * 48) + 18)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[57] * kernel_shared[((((int)threadIdx.x) * 48) + 19)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[58] * kernel_shared[((((int)threadIdx.x) * 48) + 20)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[65] * kernel_shared[((((int)threadIdx.x) * 48) + 21)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[66] * kernel_shared[((((int)threadIdx.x) * 48) + 22)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[67] * kernel_shared[((((int)threadIdx.x) * 48) + 23)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[74] * kernel_shared[((((int)threadIdx.x) * 48) + 24)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[75] * kernel_shared[((((int)threadIdx.x) * 48) + 25)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[76] * kernel_shared[((((int)threadIdx.x) * 48) + 26)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[83] * kernel_shared[((((int)threadIdx.x) * 48) + 27)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[84] * kernel_shared[((((int)threadIdx.x) * 48) + 28)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[85] * kernel_shared[((((int)threadIdx.x) * 48) + 29)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[92] * kernel_shared[((((int)threadIdx.x) * 48) + 30)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[93] * kernel_shared[((((int)threadIdx.x) * 48) + 31)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[94] * kernel_shared[((((int)threadIdx.x) * 48) + 32)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[101] * kernel_shared[((((int)threadIdx.x) * 48) + 33)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[102] * kernel_shared[((((int)threadIdx.x) * 48) + 34)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[103] * kernel_shared[((((int)threadIdx.x) * 48) + 35)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[110] * kernel_shared[((((int)threadIdx.x) * 48) + 36)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[111] * kernel_shared[((((int)threadIdx.x) * 48) + 37)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[112] * kernel_shared[((((int)threadIdx.x) * 48) + 38)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[119] * kernel_shared[((((int)threadIdx.x) * 48) + 39)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[120] * kernel_shared[((((int)threadIdx.x) * 48) + 40)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[121] * kernel_shared[((((int)threadIdx.x) * 48) + 41)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[128] * kernel_shared[((((int)threadIdx.x) * 48) + 42)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[129] * kernel_shared[((((int)threadIdx.x) * 48) + 43)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[130] * kernel_shared[((((int)threadIdx.x) * 48) + 44)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[137] * kernel_shared[((((int)threadIdx.x) * 48) + 45)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[138] * kernel_shared[((((int)threadIdx.x) * 48) + 46)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[139] * kernel_shared[((((int)threadIdx.x) * 48) + 47)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[3] * kernel_shared[(((int)threadIdx.x) * 48)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[4] * kernel_shared[((((int)threadIdx.x) * 48) + 1)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[5] * kernel_shared[((((int)threadIdx.x) * 48) + 2)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[12] * kernel_shared[((((int)threadIdx.x) * 48) + 3)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[13] * kernel_shared[((((int)threadIdx.x) * 48) + 4)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[14] * kernel_shared[((((int)threadIdx.x) * 48) + 5)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[21] * kernel_shared[((((int)threadIdx.x) * 48) + 6)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[22] * kernel_shared[((((int)threadIdx.x) * 48) + 7)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[23] * kernel_shared[((((int)threadIdx.x) * 48) + 8)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[30] * kernel_shared[((((int)threadIdx.x) * 48) + 9)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[31] * kernel_shared[((((int)threadIdx.x) * 48) + 10)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[32] * kernel_shared[((((int)threadIdx.x) * 48) + 11)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[39] * kernel_shared[((((int)threadIdx.x) * 48) + 12)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[40] * kernel_shared[((((int)threadIdx.x) * 48) + 13)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[41] * kernel_shared[((((int)threadIdx.x) * 48) + 14)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[48] * kernel_shared[((((int)threadIdx.x) * 48) + 15)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[49] * kernel_shared[((((int)threadIdx.x) * 48) + 16)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[50] * kernel_shared[((((int)threadIdx.x) * 48) + 17)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[57] * kernel_shared[((((int)threadIdx.x) * 48) + 18)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[58] * kernel_shared[((((int)threadIdx.x) * 48) + 19)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[59] * kernel_shared[((((int)threadIdx.x) * 48) + 20)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[66] * kernel_shared[((((int)threadIdx.x) * 48) + 21)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[67] * kernel_shared[((((int)threadIdx.x) * 48) + 22)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[68] * kernel_shared[((((int)threadIdx.x) * 48) + 23)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[75] * kernel_shared[((((int)threadIdx.x) * 48) + 24)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[76] * kernel_shared[((((int)threadIdx.x) * 48) + 25)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[77] * kernel_shared[((((int)threadIdx.x) * 48) + 26)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[84] * kernel_shared[((((int)threadIdx.x) * 48) + 27)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[85] * kernel_shared[((((int)threadIdx.x) * 48) + 28)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[86] * kernel_shared[((((int)threadIdx.x) * 48) + 29)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[93] * kernel_shared[((((int)threadIdx.x) * 48) + 30)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[94] * kernel_shared[((((int)threadIdx.x) * 48) + 31)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[95] * kernel_shared[((((int)threadIdx.x) * 48) + 32)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[102] * kernel_shared[((((int)threadIdx.x) * 48) + 33)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[103] * kernel_shared[((((int)threadIdx.x) * 48) + 34)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[104] * kernel_shared[((((int)threadIdx.x) * 48) + 35)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[111] * kernel_shared[((((int)threadIdx.x) * 48) + 36)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[112] * kernel_shared[((((int)threadIdx.x) * 48) + 37)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[113] * kernel_shared[((((int)threadIdx.x) * 48) + 38)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[120] * kernel_shared[((((int)threadIdx.x) * 48) + 39)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[121] * kernel_shared[((((int)threadIdx.x) * 48) + 40)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[122] * kernel_shared[((((int)threadIdx.x) * 48) + 41)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[129] * kernel_shared[((((int)threadIdx.x) * 48) + 42)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[130] * kernel_shared[((((int)threadIdx.x) * 48) + 43)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[131] * kernel_shared[((((int)threadIdx.x) * 48) + 44)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[138] * kernel_shared[((((int)threadIdx.x) * 48) + 45)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[139] * kernel_shared[((((int)threadIdx.x) * 48) + 46)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[140] * kernel_shared[((((int)threadIdx.x) * 48) + 47)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[4] * kernel_shared[(((int)threadIdx.x) * 48)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[5] * kernel_shared[((((int)threadIdx.x) * 48) + 1)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[6] * kernel_shared[((((int)threadIdx.x) * 48) + 2)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[13] * kernel_shared[((((int)threadIdx.x) * 48) + 3)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[14] * kernel_shared[((((int)threadIdx.x) * 48) + 4)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[15] * kernel_shared[((((int)threadIdx.x) * 48) + 5)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[22] * kernel_shared[((((int)threadIdx.x) * 48) + 6)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[23] * kernel_shared[((((int)threadIdx.x) * 48) + 7)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[24] * kernel_shared[((((int)threadIdx.x) * 48) + 8)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[31] * kernel_shared[((((int)threadIdx.x) * 48) + 9)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[32] * kernel_shared[((((int)threadIdx.x) * 48) + 10)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[33] * kernel_shared[((((int)threadIdx.x) * 48) + 11)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[40] * kernel_shared[((((int)threadIdx.x) * 48) + 12)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[41] * kernel_shared[((((int)threadIdx.x) * 48) + 13)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[42] * kernel_shared[((((int)threadIdx.x) * 48) + 14)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[49] * kernel_shared[((((int)threadIdx.x) * 48) + 15)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[50] * kernel_shared[((((int)threadIdx.x) * 48) + 16)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[51] * kernel_shared[((((int)threadIdx.x) * 48) + 17)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[58] * kernel_shared[((((int)threadIdx.x) * 48) + 18)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[59] * kernel_shared[((((int)threadIdx.x) * 48) + 19)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[60] * kernel_shared[((((int)threadIdx.x) * 48) + 20)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[67] * kernel_shared[((((int)threadIdx.x) * 48) + 21)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[68] * kernel_shared[((((int)threadIdx.x) * 48) + 22)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[69] * kernel_shared[((((int)threadIdx.x) * 48) + 23)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[76] * kernel_shared[((((int)threadIdx.x) * 48) + 24)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[77] * kernel_shared[((((int)threadIdx.x) * 48) + 25)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[78] * kernel_shared[((((int)threadIdx.x) * 48) + 26)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[85] * kernel_shared[((((int)threadIdx.x) * 48) + 27)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[86] * kernel_shared[((((int)threadIdx.x) * 48) + 28)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[87] * kernel_shared[((((int)threadIdx.x) * 48) + 29)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[94] * kernel_shared[((((int)threadIdx.x) * 48) + 30)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[95] * kernel_shared[((((int)threadIdx.x) * 48) + 31)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[96] * kernel_shared[((((int)threadIdx.x) * 48) + 32)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[103] * kernel_shared[((((int)threadIdx.x) * 48) + 33)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[104] * kernel_shared[((((int)threadIdx.x) * 48) + 34)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[105] * kernel_shared[((((int)threadIdx.x) * 48) + 35)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[112] * kernel_shared[((((int)threadIdx.x) * 48) + 36)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[113] * kernel_shared[((((int)threadIdx.x) * 48) + 37)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[114] * kernel_shared[((((int)threadIdx.x) * 48) + 38)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[121] * kernel_shared[((((int)threadIdx.x) * 48) + 39)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[122] * kernel_shared[((((int)threadIdx.x) * 48) + 40)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[123] * kernel_shared[((((int)threadIdx.x) * 48) + 41)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[130] * kernel_shared[((((int)threadIdx.x) * 48) + 42)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[131] * kernel_shared[((((int)threadIdx.x) * 48) + 43)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[132] * kernel_shared[((((int)threadIdx.x) * 48) + 44)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[139] * kernel_shared[((((int)threadIdx.x) * 48) + 45)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[140] * kernel_shared[((((int)threadIdx.x) * 48) + 46)]));
          conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[141] * kernel_shared[((((int)threadIdx.x) * 48) + 47)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[5] * kernel_shared[(((int)threadIdx.x) * 48)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[6] * kernel_shared[((((int)threadIdx.x) * 48) + 1)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[7] * kernel_shared[((((int)threadIdx.x) * 48) + 2)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[14] * kernel_shared[((((int)threadIdx.x) * 48) + 3)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[15] * kernel_shared[((((int)threadIdx.x) * 48) + 4)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[16] * kernel_shared[((((int)threadIdx.x) * 48) + 5)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[23] * kernel_shared[((((int)threadIdx.x) * 48) + 6)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[24] * kernel_shared[((((int)threadIdx.x) * 48) + 7)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[25] * kernel_shared[((((int)threadIdx.x) * 48) + 8)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[32] * kernel_shared[((((int)threadIdx.x) * 48) + 9)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[33] * kernel_shared[((((int)threadIdx.x) * 48) + 10)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[34] * kernel_shared[((((int)threadIdx.x) * 48) + 11)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[41] * kernel_shared[((((int)threadIdx.x) * 48) + 12)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[42] * kernel_shared[((((int)threadIdx.x) * 48) + 13)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[43] * kernel_shared[((((int)threadIdx.x) * 48) + 14)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[50] * kernel_shared[((((int)threadIdx.x) * 48) + 15)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[51] * kernel_shared[((((int)threadIdx.x) * 48) + 16)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[52] * kernel_shared[((((int)threadIdx.x) * 48) + 17)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[59] * kernel_shared[((((int)threadIdx.x) * 48) + 18)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[60] * kernel_shared[((((int)threadIdx.x) * 48) + 19)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[61] * kernel_shared[((((int)threadIdx.x) * 48) + 20)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[68] * kernel_shared[((((int)threadIdx.x) * 48) + 21)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[69] * kernel_shared[((((int)threadIdx.x) * 48) + 22)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[70] * kernel_shared[((((int)threadIdx.x) * 48) + 23)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[77] * kernel_shared[((((int)threadIdx.x) * 48) + 24)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[78] * kernel_shared[((((int)threadIdx.x) * 48) + 25)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[79] * kernel_shared[((((int)threadIdx.x) * 48) + 26)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[86] * kernel_shared[((((int)threadIdx.x) * 48) + 27)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[87] * kernel_shared[((((int)threadIdx.x) * 48) + 28)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[88] * kernel_shared[((((int)threadIdx.x) * 48) + 29)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[95] * kernel_shared[((((int)threadIdx.x) * 48) + 30)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[96] * kernel_shared[((((int)threadIdx.x) * 48) + 31)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[97] * kernel_shared[((((int)threadIdx.x) * 48) + 32)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[104] * kernel_shared[((((int)threadIdx.x) * 48) + 33)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[105] * kernel_shared[((((int)threadIdx.x) * 48) + 34)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[106] * kernel_shared[((((int)threadIdx.x) * 48) + 35)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[113] * kernel_shared[((((int)threadIdx.x) * 48) + 36)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[114] * kernel_shared[((((int)threadIdx.x) * 48) + 37)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[115] * kernel_shared[((((int)threadIdx.x) * 48) + 38)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[122] * kernel_shared[((((int)threadIdx.x) * 48) + 39)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[123] * kernel_shared[((((int)threadIdx.x) * 48) + 40)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[124] * kernel_shared[((((int)threadIdx.x) * 48) + 41)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[131] * kernel_shared[((((int)threadIdx.x) * 48) + 42)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[132] * kernel_shared[((((int)threadIdx.x) * 48) + 43)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[133] * kernel_shared[((((int)threadIdx.x) * 48) + 44)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[140] * kernel_shared[((((int)threadIdx.x) * 48) + 45)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[141] * kernel_shared[((((int)threadIdx.x) * 48) + 46)]));
          conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[142] * kernel_shared[((((int)threadIdx.x) * 48) + 47)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[6] * kernel_shared[(((int)threadIdx.x) * 48)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[7] * kernel_shared[((((int)threadIdx.x) * 48) + 1)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[8] * kernel_shared[((((int)threadIdx.x) * 48) + 2)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[15] * kernel_shared[((((int)threadIdx.x) * 48) + 3)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[16] * kernel_shared[((((int)threadIdx.x) * 48) + 4)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[17] * kernel_shared[((((int)threadIdx.x) * 48) + 5)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[24] * kernel_shared[((((int)threadIdx.x) * 48) + 6)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[25] * kernel_shared[((((int)threadIdx.x) * 48) + 7)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[26] * kernel_shared[((((int)threadIdx.x) * 48) + 8)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[33] * kernel_shared[((((int)threadIdx.x) * 48) + 9)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[34] * kernel_shared[((((int)threadIdx.x) * 48) + 10)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[35] * kernel_shared[((((int)threadIdx.x) * 48) + 11)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[42] * kernel_shared[((((int)threadIdx.x) * 48) + 12)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[43] * kernel_shared[((((int)threadIdx.x) * 48) + 13)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[44] * kernel_shared[((((int)threadIdx.x) * 48) + 14)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[51] * kernel_shared[((((int)threadIdx.x) * 48) + 15)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[52] * kernel_shared[((((int)threadIdx.x) * 48) + 16)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[53] * kernel_shared[((((int)threadIdx.x) * 48) + 17)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[60] * kernel_shared[((((int)threadIdx.x) * 48) + 18)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[61] * kernel_shared[((((int)threadIdx.x) * 48) + 19)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[62] * kernel_shared[((((int)threadIdx.x) * 48) + 20)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[69] * kernel_shared[((((int)threadIdx.x) * 48) + 21)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[70] * kernel_shared[((((int)threadIdx.x) * 48) + 22)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[71] * kernel_shared[((((int)threadIdx.x) * 48) + 23)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[78] * kernel_shared[((((int)threadIdx.x) * 48) + 24)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[79] * kernel_shared[((((int)threadIdx.x) * 48) + 25)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[80] * kernel_shared[((((int)threadIdx.x) * 48) + 26)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[87] * kernel_shared[((((int)threadIdx.x) * 48) + 27)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[88] * kernel_shared[((((int)threadIdx.x) * 48) + 28)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[89] * kernel_shared[((((int)threadIdx.x) * 48) + 29)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[96] * kernel_shared[((((int)threadIdx.x) * 48) + 30)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[97] * kernel_shared[((((int)threadIdx.x) * 48) + 31)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[98] * kernel_shared[((((int)threadIdx.x) * 48) + 32)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[105] * kernel_shared[((((int)threadIdx.x) * 48) + 33)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[106] * kernel_shared[((((int)threadIdx.x) * 48) + 34)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[107] * kernel_shared[((((int)threadIdx.x) * 48) + 35)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[114] * kernel_shared[((((int)threadIdx.x) * 48) + 36)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[115] * kernel_shared[((((int)threadIdx.x) * 48) + 37)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[116] * kernel_shared[((((int)threadIdx.x) * 48) + 38)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[123] * kernel_shared[((((int)threadIdx.x) * 48) + 39)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[124] * kernel_shared[((((int)threadIdx.x) * 48) + 40)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[125] * kernel_shared[((((int)threadIdx.x) * 48) + 41)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[132] * kernel_shared[((((int)threadIdx.x) * 48) + 42)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[133] * kernel_shared[((((int)threadIdx.x) * 48) + 43)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[134] * kernel_shared[((((int)threadIdx.x) * 48) + 44)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[141] * kernel_shared[((((int)threadIdx.x) * 48) + 45)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[142] * kernel_shared[((((int)threadIdx.x) * 48) + 46)]));
          conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[143] * kernel_shared[((((int)threadIdx.x) * 48) + 47)]));
        }
      }
      for (int i2_inner = 0; i2_inner < 7; ++i2_inner) {
        compute[(((((((int)blockIdx.x) / 7) * 784) + (((int)threadIdx.x) * 49)) + (i2_inner * 7)) + (((int)blockIdx.x) % 7))] = max((conv2d_nchw[i2_inner] + bias[(((((int)blockIdx.x) / 7) * 16) + ((int)threadIdx.x))]), 0.000000e+00f);
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 187-191

A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.

.. GENERATED FROM PYTHON SOURCE LINES 191-213

.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resume search:
    /venv/apache-tvm-py3.7/lib/python3.7/site-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  13.552 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
