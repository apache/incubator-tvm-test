
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.

.. GENERATED FROM PYTHON SOURCE LINES 39-48

.. code-block:: default



    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python








.. GENERATED FROM PYTHON SOURCE LINES 54-59

Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.

.. GENERATED FROM PYTHON SOURCE LINES 59-71

.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]









.. GENERATED FROM PYTHON SOURCE LINES 72-75

Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.

.. GENERATED FROM PYTHON SOURCE LINES 75-88

.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)





.. GENERATED FROM PYTHON SOURCE LINES 89-106

Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the main process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.

.. GENERATED FROM PYTHON SOURCE LINES 106-116

.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Get devices for measurement successfully!




.. GENERATED FROM PYTHON SOURCE LINES 117-123

Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.

.. GENERATED FROM PYTHON SOURCE LINES 123-132

.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx








.. GENERATED FROM PYTHON SOURCE LINES 133-136

We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.

.. GENERATED FROM PYTHON SOURCE LINES 136-140

.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Lowered TIR:
    @main = primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {data: Buffer(data_2: Pointer(float32), float32, [25088], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [2359296], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [512], []),
                 compute: Buffer(compute_2: Pointer(float32), float32, [25088], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute}
      preflattened_buffer_map = {data_1: data_3: Buffer(data_2, float32, [1, 512, 7, 7], []), kernel_1: kernel_3: Buffer(kernel_2, float32, [512, 512, 3, 3], []), bias_1: bias_3: Buffer(bias_2, float32, [1, 512, 1, 1], []), compute_1: compute_3: Buffer(compute_2, float32, [1, 512, 7, 7], [])} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 16;
      allocate(conv2d_nchw: Pointer(local float32), float32, [14]), storage_scope = local;
      allocate(pad_temp.shared: Pointer(shared float32), float32, [2592]), storage_scope = shared;
      allocate(kernel.shared: Pointer(shared float32), float32, [9216]), storage_scope = shared;
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112 {
        conv2d_nchw_1: Buffer(conv2d_nchw, float32, [49], [], scope="local", align=16)[0] = 0f32
        conv2d_nchw_1[7] = 0f32
        conv2d_nchw_1[1] = 0f32
        conv2d_nchw_1[8] = 0f32
        conv2d_nchw_1[2] = 0f32
        conv2d_nchw_1[9] = 0f32
        conv2d_nchw_1[3] = 0f32
        conv2d_nchw_1[10] = 0f32
        conv2d_nchw_1[4] = 0f32
        conv2d_nchw_1[11] = 0f32
        conv2d_nchw_1[5] = 0f32
        conv2d_nchw_1[12] = 0f32
        conv2d_nchw_1[6] = 0f32
        conv2d_nchw_1[13] = 0f32
        for (rc.outer.outer: int32, 0, 16) {
          let cse_var_1: int32 = (rc.outer.outer*288)
           {
            attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            if @tir.likely((threadIdx.x_1 < 96), dtype=bool) {
              pad_temp.shared_1: Buffer(pad_temp.shared, float32, [2592], [], scope="shared")[(threadIdx.x_1*27)] = 0f32
              pad_temp.shared_1[((threadIdx.x_1*27) + 1)] = @tir.if_then_else((1 <= floormod(threadIdx.x_1, 3)), data[((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 3)*49)) + (floormod(threadIdx.x_1, 3)*21)) - 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*27) + 2)] = @tir.if_then_else((1 <= floormod(threadIdx.x_1, 3)), data[((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 3)*49)) + (floormod(threadIdx.x_1, 3)*21)) - 6)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*27) + 3)] = @tir.if_then_else((1 <= floormod(threadIdx.x_1, 3)), data[((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 3)*49)) + (floormod(threadIdx.x_1, 3)*21)) - 5)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*27) + 4)] = @tir.if_then_else((1 <= floormod(threadIdx.x_1, 3)), data[((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 3)*49)) + (floormod(threadIdx.x_1, 3)*21)) - 4)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*27) + 5)] = @tir.if_then_else((1 <= floormod(threadIdx.x_1, 3)), data[((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 3)*49)) + (floormod(threadIdx.x_1, 3)*21)) - 3)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*27) + 6)] = @tir.if_then_else((1 <= floormod(threadIdx.x_1, 3)), data[((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 3)*49)) + (floormod(threadIdx.x_1, 3)*21)) - 2)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*27) + 7)] = @tir.if_then_else((1 <= floormod(threadIdx.x_1, 3)), data[((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 3)*49)) + (floormod(threadIdx.x_1, 3)*21)) - 1)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*27) + 8)] = 0f32
              pad_temp.shared_1[((threadIdx.x_1*27) + 9)] = 0f32
              pad_temp.shared_1[((threadIdx.x_1*27) + 10)] = data[(((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 3)*49)) + (floormod(threadIdx.x_1, 3)*21))]
              pad_temp.shared_1[((threadIdx.x_1*27) + 11)] = data[((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 3)*49)) + (floormod(threadIdx.x_1, 3)*21)) + 1)]
              pad_temp.shared_1[((threadIdx.x_1*27) + 12)] = data[((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 3)*49)) + (floormod(threadIdx.x_1, 3)*21)) + 2)]
              pad_temp.shared_1[((threadIdx.x_1*27) + 13)] = data[((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 3)*49)) + (floormod(threadIdx.x_1, 3)*21)) + 3)]
              pad_temp.shared_1[((threadIdx.x_1*27) + 14)] = data[((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 3)*49)) + (floormod(threadIdx.x_1, 3)*21)) + 4)]
              pad_temp.shared_1[((threadIdx.x_1*27) + 15)] = data[((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 3)*49)) + (floormod(threadIdx.x_1, 3)*21)) + 5)]
              pad_temp.shared_1[((threadIdx.x_1*27) + 16)] = data[((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 3)*49)) + (floormod(threadIdx.x_1, 3)*21)) + 6)]
              pad_temp.shared_1[((threadIdx.x_1*27) + 17)] = 0f32
              pad_temp.shared_1[((threadIdx.x_1*27) + 18)] = 0f32
              pad_temp.shared_1[((threadIdx.x_1*27) + 19)] = @tir.if_then_else((floormod(threadIdx.x_1, 3) < 2), data[((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 3)*49)) + (floormod(threadIdx.x_1, 3)*21)) + 7)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*27) + 20)] = @tir.if_then_else((floormod(threadIdx.x_1, 3) < 2), data[((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 3)*49)) + (floormod(threadIdx.x_1, 3)*21)) + 8)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*27) + 21)] = @tir.if_then_else((floormod(threadIdx.x_1, 3) < 2), data[((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 3)*49)) + (floormod(threadIdx.x_1, 3)*21)) + 9)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*27) + 22)] = @tir.if_then_else((floormod(threadIdx.x_1, 3) < 2), data[((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 3)*49)) + (floormod(threadIdx.x_1, 3)*21)) + 10)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*27) + 23)] = @tir.if_then_else((floormod(threadIdx.x_1, 3) < 2), data[((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 3)*49)) + (floormod(threadIdx.x_1, 3)*21)) + 11)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*27) + 24)] = @tir.if_then_else((floormod(threadIdx.x_1, 3) < 2), data[((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 3)*49)) + (floormod(threadIdx.x_1, 3)*21)) + 12)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*27) + 25)] = @tir.if_then_else((floormod(threadIdx.x_1, 3) < 2), data[((((rc.outer.outer*1568) + (floordiv(threadIdx.x_1, 3)*49)) + (floormod(threadIdx.x_1, 3)*21)) + 13)], 0f32, dtype=float32)
              pad_temp.shared_1[((threadIdx.x_1*27) + 26)] = 0f32
            }
            attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1: Buffer(kernel.shared, float32, [9216], [], scope="shared")[threadIdx.x_2] = kernel[(((blockIdx.x*147456) + cse_var_1) + threadIdx.x_2)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 112)] = kernel[((((blockIdx.x*147456) + cse_var_1) + (floordiv((threadIdx.x_2 + 112), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 224)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 224), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 224), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 336)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 336), 288)*4608)) + cse_var_1) + ((floordiv(threadIdx.x_2, 3) + 16)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 448)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 448), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 160), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 560)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 560), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 272), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 672)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 672), 288)*4608)) + cse_var_1) + ((floordiv(threadIdx.x_2, 3) + 32)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 784)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 784), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 208), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 896)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 896), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 32), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 1008)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 1008), 288)*4608)) + cse_var_1) + ((floordiv(threadIdx.x_2, 3) + 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 1120)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 1120), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 256), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 1232)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 1232), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 80), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 1344)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 1344), 288)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 64), 96)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 1456)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 1456), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 16), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 1568)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 1568), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 128), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 1680)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 1680), 288)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 80), 96)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 1792)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 1792), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 64), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 1904)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 1904), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 176), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 2016)] = kernel[((((blockIdx.x*147456) + cse_var_1) + threadIdx.x_2) + 32256)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 2128)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 2128), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 112), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 2240)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 2240), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 224), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 2352)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 2352), 288)*4608)) + cse_var_1) + ((floordiv(threadIdx.x_2, 3) + 16)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 2464)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 2464), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 160), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 2576)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 2576), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 272), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 2688)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 2688), 288)*4608)) + cse_var_1) + ((floordiv(threadIdx.x_2, 3) + 32)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 2800)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 2800), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 208), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 2912)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 2912), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 32), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 3024)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 3024), 288)*4608)) + cse_var_1) + ((floordiv(threadIdx.x_2, 3) + 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 3136)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 3136), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 256), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 3248)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 3248), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 80), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 3360)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 3360), 288)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 64), 96)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 3472)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 3472), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 16), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 3584)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 3584), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 128), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 3696)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 3696), 288)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 80), 96)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 3808)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 3808), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 64), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 3920)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 3920), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 176), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 4032)] = kernel[((((blockIdx.x*147456) + cse_var_1) + threadIdx.x_2) + 64512)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 4144)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 4144), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 112), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 4256)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 4256), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 224), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 4368)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 4368), 288)*4608)) + cse_var_1) + ((floordiv(threadIdx.x_2, 3) + 16)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 4480)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 4480), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 160), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 4592)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 4592), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 272), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 4704)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 4704), 288)*4608)) + cse_var_1) + ((floordiv(threadIdx.x_2, 3) + 32)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 4816)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 4816), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 208), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 4928)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 4928), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 32), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 5040)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 5040), 288)*4608)) + cse_var_1) + ((floordiv(threadIdx.x_2, 3) + 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 5152)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 5152), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 256), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 5264)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 5264), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 80), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 5376)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 5376), 288)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 64), 96)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 5488)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 5488), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 16), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 5600)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 5600), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 128), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 5712)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 5712), 288)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 80), 96)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 5824)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 5824), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 64), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 5936)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 5936), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 176), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 6048)] = kernel[((((blockIdx.x*147456) + cse_var_1) + threadIdx.x_2) + 96768)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 6160)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 6160), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 112), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 6272)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 6272), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 224), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 6384)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 6384), 288)*4608)) + cse_var_1) + ((floordiv(threadIdx.x_2, 3) + 16)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 6496)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 6496), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 160), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 6608)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 6608), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 272), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 6720)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 6720), 288)*4608)) + cse_var_1) + ((floordiv(threadIdx.x_2, 3) + 32)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 6832)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 6832), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 208), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 6944)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 6944), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 32), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 7056)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 7056), 288)*4608)) + cse_var_1) + ((floordiv(threadIdx.x_2, 3) + 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 7168)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 7168), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 256), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 7280)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 7280), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 80), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 7392)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 7392), 288)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 64), 96)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 7504)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 7504), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 16), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 7616)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 7616), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 128), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 7728)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 7728), 288)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 80), 96)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 7840)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 7840), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 64), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 7952)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 7952), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 176), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 8064)] = kernel[((((blockIdx.x*147456) + cse_var_1) + threadIdx.x_2) + 129024)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 8176)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 8176), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 112), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 8288)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 8288), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 224), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 8400)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 8400), 288)*4608)) + cse_var_1) + ((floordiv(threadIdx.x_2, 3) + 16)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 8512)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 8512), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 160), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 8624)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 8624), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 272), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 8736)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 8736), 288)*4608)) + cse_var_1) + ((floordiv(threadIdx.x_2, 3) + 32)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 8848)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 8848), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 208), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 8960)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 8960), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 32), 288), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            kernel.shared_1[(threadIdx.x_2 + 9072)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 9072), 288)*4608)) + cse_var_1) + ((floordiv(threadIdx.x_2, 3) + 48)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 112;
            if @tir.likely((threadIdx.x_2 < 32), dtype=bool) {
              kernel.shared_1[(threadIdx.x_2 + 9184)] = kernel[(((((blockIdx.x*147456) + (floordiv((threadIdx.x_2 + 9184), 288)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 256), 288), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            }
            for (rc.outer.inner: int32, 0, 4) {
              for (xx.outer.inner: int32, 0, 7) {
                let cse_var_2: int32 = (xx.outer.inner + 7)
                 {
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[(((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72))]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[(((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4608)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 1)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 1)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 1)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4609)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 2)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 2)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 2)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4610)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 9)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 3)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 9)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4611)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 10)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 10)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4612)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 11)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 5)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 11)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4613)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 18)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 6)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 18)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4614)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 19)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 7)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 19)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4615)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 20)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 8)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 20)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4616)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 81)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 9)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 81)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4617)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 82)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 10)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 82)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4618)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 83)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 11)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 83)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4619)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 90)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 12)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 90)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4620)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 91)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 13)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 91)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4621)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 92)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 14)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 92)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4622)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 99)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 15)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 99)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4623)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 100)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 16)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 100)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4624)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 101)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 17)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 101)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4625)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 162)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 18)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 162)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4626)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 163)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 19)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 163)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4627)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 164)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 20)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 164)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4628)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 171)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 21)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 171)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4629)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 172)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 22)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 172)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4630)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 173)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 23)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 173)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4631)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 180)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 24)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 180)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4632)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 181)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 25)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 181)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4633)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 182)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 26)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 182)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4634)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 243)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 27)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 243)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4635)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 244)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 28)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 244)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4636)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 245)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 29)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 245)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4637)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 252)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 30)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 252)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4638)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 253)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 31)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 253)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4639)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 254)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 32)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 254)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4640)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 261)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 33)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 261)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4641)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 262)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 34)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 262)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4642)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 263)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 35)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 263)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4643)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 324)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 36)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 324)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4644)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 325)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 37)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 325)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4645)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 326)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 38)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 326)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4646)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 333)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 39)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 333)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4647)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 334)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 40)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 334)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4648)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 335)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 41)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 335)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4649)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 342)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 42)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 342)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4650)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 343)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 43)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 343)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4651)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 344)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 44)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 344)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4652)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 405)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 45)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 405)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4653)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 406)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 46)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 406)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4654)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 407)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 47)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 407)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4655)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 414)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 48)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 414)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4656)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 415)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 49)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 415)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4657)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 416)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 50)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 416)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4658)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 423)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 51)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 423)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4659)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 424)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 52)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 424)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4660)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 425)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 53)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 425)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4661)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 486)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 54)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 486)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4662)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 487)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 55)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 487)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4663)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 488)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 56)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 488)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4664)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 495)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 57)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 495)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4665)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 496)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 58)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 496)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4666)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 497)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 59)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 497)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4667)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 504)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 60)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 504)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4668)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 505)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 61)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 505)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4669)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 506)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 62)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 506)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4670)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 567)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 63)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 567)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4671)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 568)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 64)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 568)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4672)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 569)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 65)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 569)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4673)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 576)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 66)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 576)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4674)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 577)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 67)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 577)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4675)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 578)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 68)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 578)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4676)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 585)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 69)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 585)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4677)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 586)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 70)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 586)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4678)]))
                  conv2d_nchw_1[xx.outer.inner] = (conv2d_nchw_1[xx.outer.inner] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 587)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 71)]))
                  conv2d_nchw_1[cse_var_2] = (conv2d_nchw_1[cse_var_2] + (pad_temp.shared_1[((((rc.outer.inner*648) + (floormod(threadIdx.x, 7)*9)) + xx.outer.inner) + 587)]*kernel.shared_1[(((floordiv(threadIdx.x, 7)*288) + (rc.outer.inner*72)) + 4679)]))
                }
              }
            }
          }
        }
        for (i3.inner: int32, 0, 7) {
          compute[(((blockIdx.x*1568) + (threadIdx.x*7)) + i3.inner)] = max((conv2d_nchw_1[i3.inner] + bias[((blockIdx.x*32) + floordiv(threadIdx.x, 7))]), 0f32)
          compute[((((blockIdx.x*1568) + (threadIdx.x*7)) + i3.inner) + 784)] = max((conv2d_nchw_1[(i3.inner + 7)] + bias[(((blockIdx.x*32) + floordiv(threadIdx.x, 7)) + 16)]), 0f32)
        }
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 141-144

Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.

.. GENERATED FROM PYTHON SOURCE LINES 144-171

.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Execution time of this operator: 0.270 ms




.. GENERATED FROM PYTHON SOURCE LINES 172-177

Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

.. GENERATED FROM PYTHON SOURCE LINES 179-182

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.

.. GENERATED FROM PYTHON SOURCE LINES 182-189

.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=1)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=16)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=2)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=7)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=7)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=8)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=4)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=3)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=1)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=3)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=1)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=1)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=16)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=2)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=7)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=7)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=1)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=112)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=27)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=112)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 512)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(112) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[14];
      __shared__ float pad_temp_shared[2592];
      __shared__ float kernel_shared[9216];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[7] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[8] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[9] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      conv2d_nchw[10] = 0.000000e+00f;
      conv2d_nchw[4] = 0.000000e+00f;
      conv2d_nchw[11] = 0.000000e+00f;
      conv2d_nchw[5] = 0.000000e+00f;
      conv2d_nchw[12] = 0.000000e+00f;
      conv2d_nchw[6] = 0.000000e+00f;
      conv2d_nchw[13] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 16; ++rc_outer_outer) {
        __syncthreads();
        if (((int)threadIdx.x) < 96) {
          pad_temp_shared[(((int)threadIdx.x) * 27)] = 0.000000e+00f;
          pad_temp_shared[((((int)threadIdx.x) * 27) + 1)] = ((1 <= (((int)threadIdx.x) % 3)) ? data[((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 3) * 49)) + ((((int)threadIdx.x) % 3) * 21)) - 7)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 27) + 2)] = ((1 <= (((int)threadIdx.x) % 3)) ? data[((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 3) * 49)) + ((((int)threadIdx.x) % 3) * 21)) - 6)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 27) + 3)] = ((1 <= (((int)threadIdx.x) % 3)) ? data[((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 3) * 49)) + ((((int)threadIdx.x) % 3) * 21)) - 5)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 27) + 4)] = ((1 <= (((int)threadIdx.x) % 3)) ? data[((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 3) * 49)) + ((((int)threadIdx.x) % 3) * 21)) - 4)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 27) + 5)] = ((1 <= (((int)threadIdx.x) % 3)) ? data[((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 3) * 49)) + ((((int)threadIdx.x) % 3) * 21)) - 3)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 27) + 6)] = ((1 <= (((int)threadIdx.x) % 3)) ? data[((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 3) * 49)) + ((((int)threadIdx.x) % 3) * 21)) - 2)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 27) + 7)] = ((1 <= (((int)threadIdx.x) % 3)) ? data[((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 3) * 49)) + ((((int)threadIdx.x) % 3) * 21)) - 1)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 27) + 8)] = 0.000000e+00f;
          pad_temp_shared[((((int)threadIdx.x) * 27) + 9)] = 0.000000e+00f;
          pad_temp_shared[((((int)threadIdx.x) * 27) + 10)] = data[(((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 3) * 49)) + ((((int)threadIdx.x) % 3) * 21))];
          pad_temp_shared[((((int)threadIdx.x) * 27) + 11)] = data[((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 3) * 49)) + ((((int)threadIdx.x) % 3) * 21)) + 1)];
          pad_temp_shared[((((int)threadIdx.x) * 27) + 12)] = data[((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 3) * 49)) + ((((int)threadIdx.x) % 3) * 21)) + 2)];
          pad_temp_shared[((((int)threadIdx.x) * 27) + 13)] = data[((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 3) * 49)) + ((((int)threadIdx.x) % 3) * 21)) + 3)];
          pad_temp_shared[((((int)threadIdx.x) * 27) + 14)] = data[((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 3) * 49)) + ((((int)threadIdx.x) % 3) * 21)) + 4)];
          pad_temp_shared[((((int)threadIdx.x) * 27) + 15)] = data[((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 3) * 49)) + ((((int)threadIdx.x) % 3) * 21)) + 5)];
          pad_temp_shared[((((int)threadIdx.x) * 27) + 16)] = data[((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 3) * 49)) + ((((int)threadIdx.x) % 3) * 21)) + 6)];
          pad_temp_shared[((((int)threadIdx.x) * 27) + 17)] = 0.000000e+00f;
          pad_temp_shared[((((int)threadIdx.x) * 27) + 18)] = 0.000000e+00f;
          pad_temp_shared[((((int)threadIdx.x) * 27) + 19)] = (((((int)threadIdx.x) % 3) < 2) ? data[((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 3) * 49)) + ((((int)threadIdx.x) % 3) * 21)) + 7)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 27) + 20)] = (((((int)threadIdx.x) % 3) < 2) ? data[((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 3) * 49)) + ((((int)threadIdx.x) % 3) * 21)) + 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 27) + 21)] = (((((int)threadIdx.x) % 3) < 2) ? data[((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 3) * 49)) + ((((int)threadIdx.x) % 3) * 21)) + 9)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 27) + 22)] = (((((int)threadIdx.x) % 3) < 2) ? data[((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 3) * 49)) + ((((int)threadIdx.x) % 3) * 21)) + 10)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 27) + 23)] = (((((int)threadIdx.x) % 3) < 2) ? data[((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 3) * 49)) + ((((int)threadIdx.x) % 3) * 21)) + 11)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 27) + 24)] = (((((int)threadIdx.x) % 3) < 2) ? data[((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 3) * 49)) + ((((int)threadIdx.x) % 3) * 21)) + 12)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 27) + 25)] = (((((int)threadIdx.x) % 3) < 2) ? data[((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 3) * 49)) + ((((int)threadIdx.x) % 3) * 21)) + 13)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 27) + 26)] = 0.000000e+00f;
        }
        kernel_shared[((int)threadIdx.x)] = kernel[(((((int)blockIdx.x) * 147456) + (rc_outer_outer * 288)) + ((int)threadIdx.x))];
        kernel_shared[(((int)threadIdx.x) + 112)] = kernel[((((((int)blockIdx.x) * 147456) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 112) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 224)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 224) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 224) % 288) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 336)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 336) / 288) * 4608)) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 48)];
        kernel_shared[(((int)threadIdx.x) + 448)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 448) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 160) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 560)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 560) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 272) % 288) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 672)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 672) / 288) * 4608)) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 96)];
        kernel_shared[(((int)threadIdx.x) + 784)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 784) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 208) % 288) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 896)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 896) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 32) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1008)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1008) / 288) * 4608)) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 144)];
        kernel_shared[(((int)threadIdx.x) + 1120)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1120) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 256) % 288) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1232)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1232) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 80) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1344)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1344) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) / 3) + 64) % 96) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1456)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1456) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 16) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1568)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1568) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 128) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1680)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1680) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) / 3) + 80) % 96) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1792)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1792) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 64) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1904)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 1904) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 176) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2016)] = kernel[((((((int)blockIdx.x) * 147456) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 32256)];
        kernel_shared[(((int)threadIdx.x) + 2128)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2128) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 112) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2240)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2240) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 224) % 288) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2352)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2352) / 288) * 4608)) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 48)];
        kernel_shared[(((int)threadIdx.x) + 2464)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2464) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 160) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2576)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2576) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 272) % 288) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2688)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2688) / 288) * 4608)) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 96)];
        kernel_shared[(((int)threadIdx.x) + 2800)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2800) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 208) % 288) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2912)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 2912) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 32) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3024)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 3024) / 288) * 4608)) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 144)];
        kernel_shared[(((int)threadIdx.x) + 3136)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 3136) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 256) % 288) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3248)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 3248) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 80) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3360)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 3360) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) / 3) + 64) % 96) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3472)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 3472) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 16) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3584)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 3584) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 128) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3696)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 3696) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) / 3) + 80) % 96) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3808)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 3808) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 64) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3920)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 3920) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 176) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 4032)] = kernel[((((((int)blockIdx.x) * 147456) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 64512)];
        kernel_shared[(((int)threadIdx.x) + 4144)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 4144) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 112) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 4256)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 4256) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 224) % 288) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 4368)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 4368) / 288) * 4608)) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 48)];
        kernel_shared[(((int)threadIdx.x) + 4480)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 4480) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 160) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 4592)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 4592) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 272) % 288) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 4704)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 4704) / 288) * 4608)) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 96)];
        kernel_shared[(((int)threadIdx.x) + 4816)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 4816) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 208) % 288) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 4928)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 4928) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 32) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 5040)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 5040) / 288) * 4608)) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 144)];
        kernel_shared[(((int)threadIdx.x) + 5152)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 5152) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 256) % 288) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 5264)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 5264) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 80) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 5376)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 5376) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) / 3) + 64) % 96) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 5488)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 5488) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 16) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 5600)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 5600) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 128) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 5712)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 5712) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) / 3) + 80) % 96) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 5824)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 5824) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 64) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 5936)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 5936) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 176) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 6048)] = kernel[((((((int)blockIdx.x) * 147456) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 96768)];
        kernel_shared[(((int)threadIdx.x) + 6160)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 6160) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 112) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 6272)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 6272) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 224) % 288) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 6384)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 6384) / 288) * 4608)) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 48)];
        kernel_shared[(((int)threadIdx.x) + 6496)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 6496) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 160) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 6608)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 6608) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 272) % 288) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 6720)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 6720) / 288) * 4608)) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 96)];
        kernel_shared[(((int)threadIdx.x) + 6832)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 6832) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 208) % 288) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 6944)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 6944) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 32) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 7056)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 7056) / 288) * 4608)) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 144)];
        kernel_shared[(((int)threadIdx.x) + 7168)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 7168) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 256) % 288) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 7280)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 7280) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 80) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 7392)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 7392) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) / 3) + 64) % 96) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 7504)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 7504) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 16) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 7616)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 7616) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 128) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 7728)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 7728) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) / 3) + 80) % 96) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 7840)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 7840) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 64) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 7952)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 7952) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 176) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 8064)] = kernel[((((((int)blockIdx.x) * 147456) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 129024)];
        kernel_shared[(((int)threadIdx.x) + 8176)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 8176) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 112) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 8288)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 8288) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 224) % 288) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 8400)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 8400) / 288) * 4608)) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 48)];
        kernel_shared[(((int)threadIdx.x) + 8512)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 8512) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 160) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 8624)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 8624) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 272) % 288) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 8736)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 8736) / 288) * 4608)) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 96)];
        kernel_shared[(((int)threadIdx.x) + 8848)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 8848) / 288) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 208) % 288) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 8960)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 8960) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 32) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 9072)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 9072) / 288) * 4608)) + (rc_outer_outer * 288)) + ((int)threadIdx.x)) + 144)];
        if (((int)threadIdx.x) < 32) {
          kernel_shared[(((int)threadIdx.x) + 9184)] = kernel[(((((((int)blockIdx.x) * 147456) + (((((int)threadIdx.x) + 9184) / 288) * 4608)) + (rc_outer_outer * 288)) + (((((int)threadIdx.x) + 256) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        }
        __syncthreads();
        for (int rc_outer_inner = 0; rc_outer_inner < 4; ++rc_outer_inner) {
          for (int xx_outer_inner = 0; xx_outer_inner < 7; ++xx_outer_inner) {
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[(((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner)] * kernel_shared[(((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72))]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[(((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4608)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 1)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 1)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 1)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4609)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 2)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 2)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 2)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4610)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 9)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 3)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 9)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4611)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 10)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 10)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4612)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 11)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 5)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 11)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4613)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 18)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 6)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 18)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4614)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 19)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 7)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 19)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4615)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 20)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 8)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 20)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4616)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 81)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 9)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 81)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4617)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 82)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 10)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 82)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4618)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 83)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 11)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 83)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4619)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 90)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 12)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 90)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4620)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 91)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 13)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 91)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4621)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 92)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 14)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 92)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4622)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 99)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 15)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 99)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4623)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 100)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 16)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 100)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4624)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 101)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 17)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 101)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4625)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 162)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 18)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 162)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4626)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 163)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 19)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 163)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4627)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 164)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 20)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 164)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4628)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 171)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 21)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 171)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4629)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 172)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 22)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 172)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4630)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 173)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 23)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 173)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4631)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 180)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 24)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 180)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4632)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 181)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 25)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 181)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4633)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 182)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 26)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 182)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4634)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 243)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 27)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 243)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4635)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 244)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 28)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 244)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4636)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 245)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 29)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 245)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4637)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 252)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 30)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 252)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4638)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 253)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 31)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 253)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4639)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 254)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 32)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 254)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4640)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 261)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 33)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 261)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4641)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 262)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 34)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 262)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4642)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 263)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 35)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 263)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4643)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 324)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 36)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 324)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4644)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 325)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 37)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 325)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4645)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 326)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 38)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 326)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4646)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 333)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 39)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 333)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4647)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 334)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 40)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 334)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4648)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 335)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 41)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 335)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4649)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 342)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 42)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 342)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4650)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 343)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 43)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 343)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4651)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 344)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 44)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 344)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4652)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 405)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 45)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 405)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4653)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 406)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 46)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 406)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4654)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 407)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 47)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 407)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4655)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 414)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 48)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 414)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4656)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 415)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 49)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 415)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4657)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 416)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 50)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 416)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4658)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 423)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 51)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 423)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4659)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 424)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 52)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 424)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4660)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 425)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 53)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 425)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4661)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 486)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 54)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 486)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4662)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 487)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 55)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 487)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4663)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 488)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 56)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 488)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4664)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 495)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 57)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 495)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4665)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 496)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 58)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 496)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4666)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 497)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 59)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 497)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4667)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 504)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 60)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 504)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4668)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 505)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 61)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 505)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4669)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 506)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 62)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 506)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4670)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 567)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 63)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 567)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4671)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 568)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 64)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 568)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4672)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 569)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 65)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 569)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4673)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 576)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 66)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 576)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4674)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 577)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 67)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 577)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4675)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 578)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 68)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 578)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4676)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 585)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 69)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 585)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4677)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 586)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 70)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 586)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4678)]));
            conv2d_nchw[xx_outer_inner] = (conv2d_nchw[xx_outer_inner] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 587)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 71)]));
            conv2d_nchw[(xx_outer_inner + 7)] = (conv2d_nchw[(xx_outer_inner + 7)] + (pad_temp_shared[((((rc_outer_inner * 648) + ((((int)threadIdx.x) % 7) * 9)) + xx_outer_inner) + 587)] * kernel_shared[((((((int)threadIdx.x) / 7) * 288) + (rc_outer_inner * 72)) + 4679)]));
          }
        }
      }
      for (int i3_inner = 0; i3_inner < 7; ++i3_inner) {
        compute[(((((int)blockIdx.x) * 1568) + (((int)threadIdx.x) * 7)) + i3_inner)] = max((conv2d_nchw[i3_inner] + bias[((((int)blockIdx.x) * 32) + (((int)threadIdx.x) / 7))]), 0.000000e+00f);
        compute[((((((int)blockIdx.x) * 1568) + (((int)threadIdx.x) * 7)) + i3_inner) + 784)] = max((conv2d_nchw[(i3_inner + 7)] + bias[(((((int)blockIdx.x) * 32) + (((int)threadIdx.x) / 7)) + 16)]), 0.000000e+00f);
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 190-194

A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.

.. GENERATED FROM PYTHON SOURCE LINES 194-216

.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resume search:
    /venv/apache-tvm-py3.7/lib/python3.7/site-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  37.178 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
