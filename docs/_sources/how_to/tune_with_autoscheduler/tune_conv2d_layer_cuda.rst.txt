
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.

.. GENERATED FROM PYTHON SOURCE LINES 39-48

.. code-block:: default



    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python








.. GENERATED FROM PYTHON SOURCE LINES 54-59

Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.

.. GENERATED FROM PYTHON SOURCE LINES 59-71

.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]









.. GENERATED FROM PYTHON SOURCE LINES 72-75

Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.

.. GENERATED FROM PYTHON SOURCE LINES 75-88

.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)





.. GENERATED FROM PYTHON SOURCE LINES 89-106

Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the main process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.

.. GENERATED FROM PYTHON SOURCE LINES 106-116

.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Get devices for measurement successfully!




.. GENERATED FROM PYTHON SOURCE LINES 117-123

Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.

.. GENERATED FROM PYTHON SOURCE LINES 123-132

.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx








.. GENERATED FROM PYTHON SOURCE LINES 133-136

We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.

.. GENERATED FROM PYTHON SOURCE LINES 136-140

.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Lowered TIR:
    @main = primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {data: Buffer(data_2: Pointer(float32), float32, [25088], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [2359296], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [512], []),
                 compute: Buffer(compute_2: Pointer(float32), float32, [25088], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute}
      preflattened_buffer_map = {data_1: data_3: Buffer(data_2, float32, [1, 512, 7, 7], []), kernel_1: kernel_3: Buffer(kernel_2, float32, [512, 512, 3, 3], []), bias_1: bias_3: Buffer(bias_2, float32, [1, 512, 1, 1], []), compute_1: compute_3: Buffer(compute_2, float32, [1, 512, 7, 7], [])} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 32;
      allocate(conv2d_nchw: Pointer(local float32), float32, [4]), storage_scope = local;
      allocate(pad_temp.shared: Pointer(shared float32), float32, [2016]), storage_scope = shared;
      allocate(kernel.shared: Pointer(shared float32), float32, [1536]), storage_scope = shared;
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196 {
        conv2d_nchw_1: Buffer(conv2d_nchw, float32, [1], [], scope="local", align=4)[0] = 0f32
        conv2d_nchw_1[1] = 0f32
        conv2d_nchw_1[2] = 0f32
        conv2d_nchw_1[3] = 0f32
        for (rc.outer.outer: int32, 0, 16) {
          for (rx.outer.outer: int32, 0, 3) {
            let cse_var_2: int32 = (rc.outer.outer*1568)
            let cse_var_1: int32 = (rc.outer.outer*288)
             {
              attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
              pad_temp.shared_1: Buffer(pad_temp.shared, float32, [2016], [], scope="shared")[threadIdx.x_1] = @tir.if_then_else(((((7 <= floormod(threadIdx.x_1, 63)) && (floormod(threadIdx.x_1, 63) < 56)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[((((cse_var_2 + (floordiv(threadIdx.x_1, 63)*49)) + rx.outer.outer) + floormod(threadIdx.x_1, 63)) - 8)], 0f32, dtype=float32)
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
              pad_temp.shared_1[(threadIdx.x_1 + 196)] = @tir.if_then_else(((((1 <= floormod((floordiv(threadIdx.x_1, 7) + 1), 9)) && (floormod((floordiv(threadIdx.x_1, 7) + 1), 9) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 196), 63)*49)) + (floormod((floordiv(threadIdx.x_1, 7) + 1), 9)*7)) + rx.outer.outer) + floormod(threadIdx.x_1, 7)) - 8)], 0f32, dtype=float32)
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
              pad_temp.shared_1[(threadIdx.x_1 + 392)] = @tir.if_then_else(((((1 <= floormod((floordiv(threadIdx.x_1, 7) + 2), 9)) && (floormod((floordiv(threadIdx.x_1, 7) + 2), 9) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 392), 63)*49)) + (floormod((floordiv(threadIdx.x_1, 7) + 2), 9)*7)) + rx.outer.outer) + floormod(threadIdx.x_1, 7)) - 8)], 0f32, dtype=float32)
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
              pad_temp.shared_1[(threadIdx.x_1 + 588)] = @tir.if_then_else(((((1 <= floormod((floordiv(threadIdx.x_1, 7) + 3), 9)) && (floormod((floordiv(threadIdx.x_1, 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 588), 63)*49)) + (floormod((floordiv(threadIdx.x_1, 7) + 3), 9)*7)) + rx.outer.outer) + floormod(threadIdx.x_1, 7)) - 8)], 0f32, dtype=float32)
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
              pad_temp.shared_1[(threadIdx.x_1 + 784)] = @tir.if_then_else(((((1 <= floormod((floordiv(threadIdx.x_1, 7) + 4), 9)) && (floormod((floordiv(threadIdx.x_1, 7) + 4), 9) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 784), 63)*49)) + (floormod((floordiv(threadIdx.x_1, 7) + 4), 9)*7)) + rx.outer.outer) + floormod(threadIdx.x_1, 7)) - 8)], 0f32, dtype=float32)
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
              pad_temp.shared_1[(threadIdx.x_1 + 980)] = @tir.if_then_else(((((1 <= floormod((floordiv(threadIdx.x_1, 7) + 5), 9)) && (floormod((floordiv(threadIdx.x_1, 7) + 5), 9) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 980), 63)*49)) + (floormod((floordiv(threadIdx.x_1, 7) + 5), 9)*7)) + rx.outer.outer) + floormod(threadIdx.x_1, 7)) - 8)], 0f32, dtype=float32)
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
              pad_temp.shared_1[(threadIdx.x_1 + 1176)] = @tir.if_then_else(((((1 <= floormod((floordiv(threadIdx.x_1, 7) + 6), 9)) && (floormod((floordiv(threadIdx.x_1, 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 1176), 63)*49)) + (floormod((floordiv(threadIdx.x_1, 7) + 6), 9)*7)) + rx.outer.outer) + floormod(threadIdx.x_1, 7)) - 8)], 0f32, dtype=float32)
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
              pad_temp.shared_1[(threadIdx.x_1 + 1372)] = @tir.if_then_else(((((1 <= floormod((floordiv(threadIdx.x_1, 7) + 7), 9)) && (floormod((floordiv(threadIdx.x_1, 7) + 7), 9) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 1372), 63)*49)) + (floormod((floordiv(threadIdx.x_1, 7) + 7), 9)*7)) + rx.outer.outer) + floormod(threadIdx.x_1, 7)) - 8)], 0f32, dtype=float32)
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
              pad_temp.shared_1[(threadIdx.x_1 + 1568)] = @tir.if_then_else(((((1 <= floormod((floordiv(threadIdx.x_1, 7) + 8), 9)) && (floormod((floordiv(threadIdx.x_1, 7) + 8), 9) < 8)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 1568), 63)*49)) + (floormod((floordiv(threadIdx.x_1, 7) + 8), 9)*7)) + rx.outer.outer) + floormod(threadIdx.x_1, 7)) - 8)], 0f32, dtype=float32)
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
              pad_temp.shared_1[(threadIdx.x_1 + 1764)] = @tir.if_then_else(((((7 <= floormod(threadIdx.x_1, 63)) && (floormod(threadIdx.x_1, 63) < 56)) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[((((cse_var_2 + (floordiv(threadIdx.x_1, 63)*49)) + rx.outer.outer) + floormod(threadIdx.x_1, 63)) + 1364)], 0f32, dtype=float32)
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
              if @tir.likely((threadIdx.x_1 < 56), dtype=bool) {
                pad_temp.shared_1[(threadIdx.x_1 + 1960)] = @tir.if_then_else((((threadIdx.x_1 < 49) && (1 <= (rx.outer.outer + floormod(threadIdx.x_1, 7)))) && ((rx.outer.outer + floormod(threadIdx.x_1, 7)) < 8)), data[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 1960), 63)*49)) + ((floordiv(threadIdx.x_1, 7) + 1)*7)) + rx.outer.outer) + floormod(threadIdx.x_1, 7)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
              kernel.shared_1: Buffer(kernel.shared, float32, [1536], [], scope="shared")[threadIdx.x_2] = kernel[(((((blockIdx.x*73728) + (floordiv(threadIdx.x_2, 96)*4608)) + cse_var_1) + (floormod(threadIdx.x_2, 96)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
              kernel.shared_1[(threadIdx.x_2 + 196)] = kernel[((((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 196), 96)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 4), 96), 3)*9)) + (floormod((threadIdx.x_2 + 1), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
              kernel.shared_1[(threadIdx.x_2 + 392)] = kernel[((((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 392), 96)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 8), 96), 3)*9)) + (floormod((threadIdx.x_2 + 2), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
              kernel.shared_1[(threadIdx.x_2 + 588)] = kernel[((((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 588), 96)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 4), 32)*9)) + (floormod(threadIdx.x_2, 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
              kernel.shared_1[(threadIdx.x_2 + 784)] = kernel[((((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 784), 96)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 16), 96), 3)*9)) + (floormod((threadIdx.x_2 + 1), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
              kernel.shared_1[(threadIdx.x_2 + 980)] = kernel[((((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 980), 96)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 20), 96), 3)*9)) + (floormod((threadIdx.x_2 + 2), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
              kernel.shared_1[(threadIdx.x_2 + 1176)] = kernel[((((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 1176), 96)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 8), 32)*9)) + (floormod(threadIdx.x_2, 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 196;
              if @tir.likely((threadIdx.x_2 < 164), dtype=bool) {
                kernel.shared_1[(threadIdx.x_2 + 1372)] = kernel[((((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 1372), 96)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 28), 96), 3)*9)) + (floormod((threadIdx.x_2 + 1), 3)*3)) + rx.outer.outer)]
              }
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[floormod(threadIdx.x, 49)]*kernel.shared_1[(floordiv(threadIdx.x, 49)*96)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[floormod(threadIdx.x, 49)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 384)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[floormod(threadIdx.x, 49)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 768)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[floormod(threadIdx.x, 49)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1152)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 385)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 769)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1153)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 2)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 386)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 770)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1154)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 3)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 387)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 771)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 63)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1155)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 4)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 388)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 772)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 70)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1156)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 5)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 389)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 773)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 77)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1157)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 6)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 390)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 774)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 126)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1158)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 7)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 391)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 775)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 133)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1159)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 8)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 392)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 776)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 140)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1160)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 189)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 9)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 189)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 393)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 189)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 777)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 189)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1161)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 196)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 10)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 196)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 394)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 196)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 778)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 196)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1162)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 203)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 11)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 203)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 395)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 203)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 779)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 203)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1163)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 252)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 12)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 252)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 396)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 252)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 780)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 252)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1164)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 259)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 13)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 259)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 397)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 259)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 781)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 259)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1165)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 266)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 14)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 266)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 398)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 266)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 782)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 266)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1166)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 315)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 15)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 315)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 399)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 315)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 783)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 315)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1167)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 322)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 16)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 322)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 400)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 322)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 784)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 322)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1168)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 329)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 17)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 329)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 401)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 329)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 785)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 329)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1169)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 378)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 18)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 378)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 402)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 378)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 786)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 378)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1170)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 385)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 19)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 385)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 403)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 385)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 787)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 385)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1171)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 392)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 20)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 392)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 404)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 392)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 788)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 392)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1172)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 441)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 21)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 441)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 405)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 441)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 789)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 441)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1173)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 448)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 22)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 448)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 406)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 448)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 790)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 448)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1174)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 455)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 23)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 455)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 407)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 455)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 791)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 455)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1175)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 504)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 24)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 504)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 408)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 504)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 792)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 504)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1176)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 511)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 25)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 511)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 409)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 511)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 793)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 511)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1177)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 518)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 26)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 518)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 410)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 518)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 794)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 518)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1178)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 567)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 27)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 567)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 411)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 567)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 795)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 567)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1179)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 574)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 28)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 574)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 412)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 574)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 796)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 574)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1180)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 581)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 29)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 581)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 413)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 581)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 797)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 581)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1181)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 630)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 30)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 630)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 414)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 630)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 798)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 630)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1182)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 637)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 31)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 637)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 415)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 637)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 799)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 637)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1183)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 644)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 32)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 644)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 416)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 644)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 800)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 644)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1184)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 693)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 33)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 693)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 417)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 693)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 801)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 693)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1185)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 700)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 34)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 700)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 418)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 700)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 802)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 700)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1186)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 707)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 35)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 707)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 419)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 707)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 803)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 707)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1187)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 756)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 36)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 756)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 420)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 756)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 804)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 756)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1188)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 763)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 37)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 763)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 421)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 763)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 805)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 763)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1189)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 770)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 38)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 770)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 422)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 770)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 806)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 770)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1190)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 819)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 39)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 819)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 423)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 819)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 807)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 819)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1191)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 826)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 40)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 826)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 424)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 826)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 808)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 826)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1192)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 833)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 41)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 833)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 425)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 833)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 809)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 833)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1193)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 882)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 42)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 882)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 426)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 882)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 810)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 882)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1194)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 889)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 43)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 889)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 427)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 889)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 811)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 889)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1195)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 896)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 44)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 896)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 428)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 896)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 812)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 896)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1196)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 945)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 45)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 945)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 429)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 945)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 813)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 945)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1197)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 952)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 46)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 952)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 430)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 952)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 814)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 952)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1198)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 959)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 47)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 959)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 431)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 959)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 815)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 959)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1199)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1008)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 48)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1008)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 432)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1008)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 816)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1008)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1200)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1015)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 49)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1015)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 433)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1015)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 817)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1015)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1201)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1022)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 50)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1022)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 434)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1022)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 818)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1022)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1202)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1071)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 51)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1071)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 435)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1071)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 819)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1071)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1203)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1078)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 52)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1078)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 436)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1078)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 820)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1078)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1204)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1085)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 53)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1085)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 437)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1085)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 821)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1085)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1205)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1134)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 54)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1134)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 438)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1134)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 822)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1134)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1206)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1141)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 55)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1141)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 439)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1141)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 823)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1141)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1207)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1148)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 56)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1148)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 440)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1148)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 824)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1148)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1208)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1197)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 57)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1197)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 441)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1197)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 825)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1197)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1209)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1204)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 58)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1204)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 442)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1204)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 826)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1204)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1210)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1211)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 59)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1211)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 443)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1211)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 827)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1211)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1211)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1260)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 60)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1260)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 444)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1260)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 828)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1260)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1212)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1267)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 61)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1267)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 445)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1267)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 829)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1267)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1213)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1274)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 62)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1274)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 446)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1274)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 830)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1274)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1214)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1323)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 63)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1323)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 447)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1323)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 831)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1323)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1215)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1330)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 64)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1330)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 448)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1330)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 832)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1330)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1216)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1337)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 65)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1337)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 449)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1337)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 833)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1337)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1217)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1386)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 66)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1386)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 450)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1386)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 834)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1386)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1218)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1393)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 67)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1393)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 451)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1393)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 835)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1393)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1219)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1400)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 68)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1400)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 452)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1400)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 836)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1400)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1220)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1449)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 69)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1449)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 453)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1449)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 837)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1449)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1221)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1456)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 70)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1456)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 454)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1456)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 838)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1456)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1222)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1463)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 71)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1463)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 455)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1463)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 839)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1463)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1223)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1512)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 72)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1512)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 456)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1512)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 840)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1512)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1224)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1519)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 73)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1519)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 457)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1519)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 841)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1519)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1225)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1526)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 74)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1526)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 458)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1526)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 842)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1526)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1226)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1575)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 75)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1575)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 459)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1575)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 843)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1575)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1227)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1582)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 76)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1582)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 460)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1582)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 844)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1582)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1228)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1589)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 77)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1589)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 461)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1589)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 845)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1589)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1229)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1638)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 78)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1638)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 462)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1638)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 846)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1638)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1230)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1645)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 79)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1645)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 463)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1645)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 847)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1645)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1231)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1652)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 80)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1652)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 464)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1652)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 848)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1652)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1232)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1701)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 81)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1701)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 465)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1701)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 849)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1701)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1233)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1708)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 82)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1708)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 466)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1708)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 850)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1708)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1234)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1715)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 83)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1715)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 467)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1715)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 851)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1715)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1235)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1764)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 84)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1764)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 468)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1764)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 852)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1764)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1236)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1771)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 85)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1771)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 469)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1771)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 853)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1771)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1237)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1778)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 86)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1778)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 470)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1778)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 854)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1778)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1238)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1827)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 87)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1827)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 471)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1827)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 855)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1827)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1239)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1834)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 88)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1834)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 472)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1834)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 856)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1834)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1240)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1841)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 89)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1841)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 473)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1841)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 857)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1841)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1241)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1890)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 90)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1890)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 474)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1890)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 858)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1890)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1242)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1897)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 91)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1897)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 475)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1897)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 859)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1897)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1243)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1904)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 92)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1904)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 476)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1904)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 860)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1904)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1244)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1953)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 93)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1953)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 477)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1953)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 861)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1953)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1245)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1960)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 94)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1960)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 478)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1960)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 862)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1960)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1246)]))
              conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1967)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 95)]))
              conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1967)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 479)]))
              conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1967)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 863)]))
              conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(floormod(threadIdx.x, 49) + 1967)]*kernel.shared_1[((floordiv(threadIdx.x, 49)*96) + 1247)]))
            }
          }
        }
        compute[((blockIdx.x*784) + threadIdx.x)] = max((conv2d_nchw_1[0] + bias[((blockIdx.x*16) + floordiv(threadIdx.x, 49))]), 0f32)
        compute[(((blockIdx.x*784) + threadIdx.x) + 196)] = max((conv2d_nchw_1[1] + bias[(((blockIdx.x*16) + floordiv(threadIdx.x, 49)) + 4)]), 0f32)
        compute[(((blockIdx.x*784) + threadIdx.x) + 392)] = max((conv2d_nchw_1[2] + bias[(((blockIdx.x*16) + floordiv(threadIdx.x, 49)) + 8)]), 0f32)
        compute[(((blockIdx.x*784) + threadIdx.x) + 588)] = max((conv2d_nchw_1[3] + bias[(((blockIdx.x*16) + floordiv(threadIdx.x, 49)) + 12)]), 0f32)
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 141-144

Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.

.. GENERATED FROM PYTHON SOURCE LINES 144-171

.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Execution time of this operator: 0.272 ms




.. GENERATED FROM PYTHON SOURCE LINES 172-177

Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

.. GENERATED FROM PYTHON SOURCE LINES 179-182

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.

.. GENERATED FROM PYTHON SOURCE LINES 182-189

.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=1)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=4)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=4)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=7)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=7)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=32)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=1)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=3)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=1)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=1)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=1)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=1)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=4)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=4)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=7)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=7)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=196)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=196)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 512)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(196) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[4];
      __shared__ float pad_temp_shared[2016];
      __shared__ float kernel_shared[1536];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 16; ++rc_outer_outer) {
        for (int rx_outer_outer = 0; rx_outer_outer < 3; ++rx_outer_outer) {
          __syncthreads();
          pad_temp_shared[((int)threadIdx.x)] = (((((7 <= (((int)threadIdx.x) % 63)) && ((((int)threadIdx.x) % 63) < 56)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 63) * 49)) + rx_outer_outer) + (((int)threadIdx.x) % 63)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 196)] = (((((1 <= (((((int)threadIdx.x) / 7) + 1) % 9)) && ((((((int)threadIdx.x) / 7) + 1) % 9) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[((((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 196) / 63) * 49)) + ((((((int)threadIdx.x) / 7) + 1) % 9) * 7)) + rx_outer_outer) + (((int)threadIdx.x) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 392)] = (((((1 <= (((((int)threadIdx.x) / 7) + 2) % 9)) && ((((((int)threadIdx.x) / 7) + 2) % 9) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[((((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 392) / 63) * 49)) + ((((((int)threadIdx.x) / 7) + 2) % 9) * 7)) + rx_outer_outer) + (((int)threadIdx.x) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 588)] = (((((1 <= (((((int)threadIdx.x) / 7) + 3) % 9)) && ((((((int)threadIdx.x) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[((((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 588) / 63) * 49)) + ((((((int)threadIdx.x) / 7) + 3) % 9) * 7)) + rx_outer_outer) + (((int)threadIdx.x) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 784)] = (((((1 <= (((((int)threadIdx.x) / 7) + 4) % 9)) && ((((((int)threadIdx.x) / 7) + 4) % 9) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[((((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 784) / 63) * 49)) + ((((((int)threadIdx.x) / 7) + 4) % 9) * 7)) + rx_outer_outer) + (((int)threadIdx.x) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 980)] = (((((1 <= (((((int)threadIdx.x) / 7) + 5) % 9)) && ((((((int)threadIdx.x) / 7) + 5) % 9) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[((((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 980) / 63) * 49)) + ((((((int)threadIdx.x) / 7) + 5) % 9) * 7)) + rx_outer_outer) + (((int)threadIdx.x) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 1176)] = (((((1 <= (((((int)threadIdx.x) / 7) + 6) % 9)) && ((((((int)threadIdx.x) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[((((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 1176) / 63) * 49)) + ((((((int)threadIdx.x) / 7) + 6) % 9) * 7)) + rx_outer_outer) + (((int)threadIdx.x) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 1372)] = (((((1 <= (((((int)threadIdx.x) / 7) + 7) % 9)) && ((((((int)threadIdx.x) / 7) + 7) % 9) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[((((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 1372) / 63) * 49)) + ((((((int)threadIdx.x) / 7) + 7) % 9) * 7)) + rx_outer_outer) + (((int)threadIdx.x) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 1568)] = (((((1 <= (((((int)threadIdx.x) / 7) + 8) % 9)) && ((((((int)threadIdx.x) / 7) + 8) % 9) < 8)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[((((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 1568) / 63) * 49)) + ((((((int)threadIdx.x) / 7) + 8) % 9) * 7)) + rx_outer_outer) + (((int)threadIdx.x) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((int)threadIdx.x) + 1764)] = (((((7 <= (((int)threadIdx.x) % 63)) && ((((int)threadIdx.x) % 63) < 56)) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 63) * 49)) + rx_outer_outer) + (((int)threadIdx.x) % 63)) + 1364)] : 0.000000e+00f);
          if (((int)threadIdx.x) < 56) {
            pad_temp_shared[(((int)threadIdx.x) + 1960)] = ((((((int)threadIdx.x) < 49) && (1 <= (rx_outer_outer + (((int)threadIdx.x) % 7)))) && ((rx_outer_outer + (((int)threadIdx.x) % 7)) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 1960) / 63) * 49)) + ((int)threadIdx.x)) + rx_outer_outer) - 1)] : 0.000000e+00f);
          }
          kernel_shared[((int)threadIdx.x)] = kernel[(((((((int)blockIdx.x) * 73728) + ((((int)threadIdx.x) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((int)threadIdx.x) % 96) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 196)] = kernel[((((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 196) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 4) % 96) / 3) * 9)) + (((((int)threadIdx.x) + 1) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 392)] = kernel[((((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 392) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 8) % 96) / 3) * 9)) + (((((int)threadIdx.x) + 2) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 588)] = kernel[((((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 588) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) / 3) + 4) & 31) * 9)) + ((((int)threadIdx.x) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 784)] = kernel[((((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 784) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 16) % 96) / 3) * 9)) + (((((int)threadIdx.x) + 1) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 980)] = kernel[((((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 980) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 20) % 96) / 3) * 9)) + (((((int)threadIdx.x) + 2) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 1176)] = kernel[((((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 1176) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) / 3) + 8) & 31) * 9)) + ((((int)threadIdx.x) % 3) * 3)) + rx_outer_outer)];
          if (((int)threadIdx.x) < 164) {
            kernel_shared[(((int)threadIdx.x) + 1372)] = kernel[((((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 1372) / 96) * 4608)) + (rc_outer_outer * 288)) + ((((((int)threadIdx.x) + 28) % 96) / 3) * 9)) + (((((int)threadIdx.x) + 1) % 3) * 3)) + rx_outer_outer)];
          }
          __syncthreads();
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((int)threadIdx.x) % 49)] * kernel_shared[((((int)threadIdx.x) / 49) * 96)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((int)threadIdx.x) % 49)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 384)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((int)threadIdx.x) % 49)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 768)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((int)threadIdx.x) % 49)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1152)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 7)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 7)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 385)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 7)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 769)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 7)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1153)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 14)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 2)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 14)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 386)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 14)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 770)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 14)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1154)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 63)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 3)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 63)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 387)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 63)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 771)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 63)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1155)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 70)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 4)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 70)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 388)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 70)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 772)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 70)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1156)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 77)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 5)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 77)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 389)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 77)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 773)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 77)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1157)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 126)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 6)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 126)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 390)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 126)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 774)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 126)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1158)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 133)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 7)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 133)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 391)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 133)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 775)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 133)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1159)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 140)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 8)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 140)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 392)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 140)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 776)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 140)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1160)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 189)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 9)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 189)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 393)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 189)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 777)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 189)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1161)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 196)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 10)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 196)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 394)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 196)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 778)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 196)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1162)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 203)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 11)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 203)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 395)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 203)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 779)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 203)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1163)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 252)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 12)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 252)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 396)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 252)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 780)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 252)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1164)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 259)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 13)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 259)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 397)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 259)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 781)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 259)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1165)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 266)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 14)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 266)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 398)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 266)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 782)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 266)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1166)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 315)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 15)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 315)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 399)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 315)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 783)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 315)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1167)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 322)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 16)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 322)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 400)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 322)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 784)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 322)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1168)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 329)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 17)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 329)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 401)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 329)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 785)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 329)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1169)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 378)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 18)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 378)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 402)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 378)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 786)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 378)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1170)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 385)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 19)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 385)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 403)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 385)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 787)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 385)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1171)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 392)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 20)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 392)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 404)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 392)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 788)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 392)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1172)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 441)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 21)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 441)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 405)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 441)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 789)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 441)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1173)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 448)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 22)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 448)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 406)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 448)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 790)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 448)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1174)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 455)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 23)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 455)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 407)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 455)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 791)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 455)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1175)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 504)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 24)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 504)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 408)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 504)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 792)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 504)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1176)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 511)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 25)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 511)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 409)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 511)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 793)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 511)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1177)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 518)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 26)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 518)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 410)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 518)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 794)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 518)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1178)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 567)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 27)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 567)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 411)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 567)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 795)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 567)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1179)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 574)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 28)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 574)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 412)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 574)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 796)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 574)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1180)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 581)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 29)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 581)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 413)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 581)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 797)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 581)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1181)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 630)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 30)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 630)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 414)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 630)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 798)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 630)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1182)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 637)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 31)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 637)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 415)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 637)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 799)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 637)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1183)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 644)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 32)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 644)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 416)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 644)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 800)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 644)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1184)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 693)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 33)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 693)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 417)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 693)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 801)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 693)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1185)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 700)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 34)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 700)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 418)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 700)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 802)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 700)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1186)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 707)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 35)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 707)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 419)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 707)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 803)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 707)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1187)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 756)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 36)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 756)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 420)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 756)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 804)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 756)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1188)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 763)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 37)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 763)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 421)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 763)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 805)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 763)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1189)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 770)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 38)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 770)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 422)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 770)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 806)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 770)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1190)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 819)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 39)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 819)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 423)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 819)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 807)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 819)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1191)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 826)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 40)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 826)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 424)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 826)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 808)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 826)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1192)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 833)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 41)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 833)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 425)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 833)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 809)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 833)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1193)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 882)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 42)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 882)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 426)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 882)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 810)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 882)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1194)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 889)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 43)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 889)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 427)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 889)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 811)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 889)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1195)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 896)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 44)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 896)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 428)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 896)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 812)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 896)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1196)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 945)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 45)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 945)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 429)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 945)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 813)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 945)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1197)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 952)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 46)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 952)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 430)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 952)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 814)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 952)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1198)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 959)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 47)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 959)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 431)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 959)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 815)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 959)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1199)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1008)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 48)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1008)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 432)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1008)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 816)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1008)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1200)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1015)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 49)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1015)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 433)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1015)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 817)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1015)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1201)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1022)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 50)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1022)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 434)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1022)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 818)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1022)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1202)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1071)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 51)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1071)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 435)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1071)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 819)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1071)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1203)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1078)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 52)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1078)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 436)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1078)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 820)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1078)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1204)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1085)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 53)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1085)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 437)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1085)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 821)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1085)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1205)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1134)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 54)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1134)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 438)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1134)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 822)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1134)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1206)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1141)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 55)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1141)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 439)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1141)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 823)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1141)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1207)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1148)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 56)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1148)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 440)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1148)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 824)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1148)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1208)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1197)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 57)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1197)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 441)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1197)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 825)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1197)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1209)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1204)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 58)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1204)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 442)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1204)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 826)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1204)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1210)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1211)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 59)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1211)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 443)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1211)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 827)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1211)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1211)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1260)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 60)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1260)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 444)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1260)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 828)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1260)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1212)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1267)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 61)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1267)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 445)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1267)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 829)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1267)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1213)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1274)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 62)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1274)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 446)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1274)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 830)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1274)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1214)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1323)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 63)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1323)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 447)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1323)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 831)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1323)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1215)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1330)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 64)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1330)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 448)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1330)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 832)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1330)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1216)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1337)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 65)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1337)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 449)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1337)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 833)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1337)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1217)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1386)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 66)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1386)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 450)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1386)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 834)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1386)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1218)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1393)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 67)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1393)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 451)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1393)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 835)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1393)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1219)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1400)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 68)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1400)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 452)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1400)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 836)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1400)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1220)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1449)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 69)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1449)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 453)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1449)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 837)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1449)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1221)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1456)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 70)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1456)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 454)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1456)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 838)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1456)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1222)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1463)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 71)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1463)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 455)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1463)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 839)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1463)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1223)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1512)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 72)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1512)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 456)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1512)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 840)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1512)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1224)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1519)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 73)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1519)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 457)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1519)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 841)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1519)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1225)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1526)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 74)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1526)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 458)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1526)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 842)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1526)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1226)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1575)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 75)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1575)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 459)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1575)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 843)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1575)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1227)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1582)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 76)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1582)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 460)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1582)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 844)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1582)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1228)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1589)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 77)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1589)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 461)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1589)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 845)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1589)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1229)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1638)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 78)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1638)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 462)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1638)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 846)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1638)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1230)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1645)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 79)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1645)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 463)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1645)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 847)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1645)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1231)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1652)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 80)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1652)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 464)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1652)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 848)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1652)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1232)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1701)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 81)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1701)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 465)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1701)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 849)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1701)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1233)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1708)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 82)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1708)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 466)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1708)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 850)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1708)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1234)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1715)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 83)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1715)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 467)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1715)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 851)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1715)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1235)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1764)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 84)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1764)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 468)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1764)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 852)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1764)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1236)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1771)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 85)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1771)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 469)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1771)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 853)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1771)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1237)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1778)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 86)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1778)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 470)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1778)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 854)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1778)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1238)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1827)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 87)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1827)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 471)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1827)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 855)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1827)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1239)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1834)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 88)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1834)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 472)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1834)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 856)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1834)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1240)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1841)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 89)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1841)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 473)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1841)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 857)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1841)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1241)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1890)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 90)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1890)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 474)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1890)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 858)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1890)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1242)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1897)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 91)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1897)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 475)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1897)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 859)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1897)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1243)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1904)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 92)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1904)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 476)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1904)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 860)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1904)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1244)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1953)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 93)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1953)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 477)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1953)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 861)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1953)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1245)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1960)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 94)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1960)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 478)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1960)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 862)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1960)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1246)]));
          conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1967)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 95)]));
          conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1967)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 479)]));
          conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1967)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 863)]));
          conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((int)threadIdx.x) % 49) + 1967)] * kernel_shared[(((((int)threadIdx.x) / 49) * 96) + 1247)]));
        }
      }
      compute[((((int)blockIdx.x) * 784) + ((int)threadIdx.x))] = max((conv2d_nchw[0] + bias[((((int)blockIdx.x) * 16) + (((int)threadIdx.x) / 49))]), 0.000000e+00f);
      compute[(((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 196)] = max((conv2d_nchw[1] + bias[(((((int)blockIdx.x) * 16) + (((int)threadIdx.x) / 49)) + 4)]), 0.000000e+00f);
      compute[(((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 392)] = max((conv2d_nchw[2] + bias[(((((int)blockIdx.x) * 16) + (((int)threadIdx.x) / 49)) + 8)]), 0.000000e+00f);
      compute[(((((int)blockIdx.x) * 784) + ((int)threadIdx.x)) + 588)] = max((conv2d_nchw[3] + bias[(((((int)blockIdx.x) * 16) + (((int)threadIdx.x) / 49)) + 12)]), 0.000000e+00f);
    }






.. GENERATED FROM PYTHON SOURCE LINES 190-194

A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.

.. GENERATED FROM PYTHON SOURCE LINES 194-216

.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resume search:
    /venv/apache-tvm-py3.7/lib/python3.7/site-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  54.702 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
