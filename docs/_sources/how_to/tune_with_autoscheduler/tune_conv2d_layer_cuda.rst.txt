
.. DO NOT EDIT. THIS FILE WAS AUTOMATICALLY GENERATED BY
.. TVM'S MONKEY-PATCHED VERSION OF SPHINX-GALLERY. TO MAKE
.. CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.py"

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        This tutorial can be used interactively with Google Colab! You can also click
        :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>` to run the Jupyter notebook locally.

        .. image:: https://raw.githubusercontent.com/tlc-pack/web-data/main/images/utilities/colab_button.svg
            :align: center
            :target: https://colab.research.google.com/github/apache/tvm-site/blob/asf-site/docs/_downloads/5f1f7bd7d90710fd404f7bcdc4965622/tune_conv2d_layer_cuda.ipynb
            :width: 300px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.

.. GENERATED FROM PYTHON SOURCE LINES 39-48

.. code-block:: default



    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python








.. GENERATED FROM PYTHON SOURCE LINES 55-60

Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.

.. GENERATED FROM PYTHON SOURCE LINES 60-72

.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]









.. GENERATED FROM PYTHON SOURCE LINES 73-76

Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.

.. GENERATED FROM PYTHON SOURCE LINES 76-89

.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)





.. GENERATED FROM PYTHON SOURCE LINES 90-107

Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the main process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.

.. GENERATED FROM PYTHON SOURCE LINES 107-117

.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Get devices for measurement successfully!




.. GENERATED FROM PYTHON SOURCE LINES 118-124

Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.

.. GENERATED FROM PYTHON SOURCE LINES 124-133

.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx








.. GENERATED FROM PYTHON SOURCE LINES 134-137

We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.

.. GENERATED FROM PYTHON SOURCE LINES 137-141

.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Lowered TIR:
    @main = primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {data: Buffer(data_2: Pointer(float32), float32, [1, 512, 7, 7], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [512, 512, 3, 3], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [1, 512, 1, 1], []),
                 compute: Buffer(compute_2: Pointer(float32), float32, [1, 512, 7, 7], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 32;
      allocate(conv2d_nchw: Pointer(local float32), float32, [16]), storage_scope = local;
      allocate(pad_temp.shared: Pointer(shared float32), float32, [162]), storage_scope = shared;
      allocate(kernel.shared: Pointer(shared float32), float32, [288]), storage_scope = shared;
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
        conv2d_nchw_1: Buffer(conv2d_nchw, float32, [4], [], scope="local", align=8)[0] = 0f32
        conv2d_nchw_1[2] = 0f32
        conv2d_nchw_1[4] = 0f32
        conv2d_nchw_1[6] = 0f32
        conv2d_nchw_1[8] = 0f32
        conv2d_nchw_1[10] = 0f32
        conv2d_nchw_1[12] = 0f32
        conv2d_nchw_1[14] = 0f32
        conv2d_nchw_1[1] = 0f32
        conv2d_nchw_1[3] = 0f32
        conv2d_nchw_1[5] = 0f32
        conv2d_nchw_1[7] = 0f32
        conv2d_nchw_1[9] = 0f32
        conv2d_nchw_1[11] = 0f32
        conv2d_nchw_1[13] = 0f32
        conv2d_nchw_1[15] = 0f32
        for (rc.outer.outer: int32, 0, 256) {
          let cse_var_2: int32 = (rc.outer.outer*98)
          let cse_var_1: int32 = (rc.outer.outer*18)
           {
            attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared_1: Buffer(pad_temp.shared, float32, [162], [], scope="shared")[threadIdx.x_1] = @tir.if_then_else((((9 <= threadIdx.x_1) && (1 <= floormod(threadIdx.x_1, 9))) && (floormod(threadIdx.x_1, 9) < 8)), data_3: Buffer(data_2, float32, [25088], [])[(((cse_var_2 + (floordiv(threadIdx.x_1, 9)*7)) + floormod(threadIdx.x_1, 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared_1[(threadIdx.x_1 + 49)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 49), 81)) && (floormod((threadIdx.x_1 + 49), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 4), 9))) && (floormod((threadIdx.x_1 + 4), 9) < 8)), data_3[((((cse_var_2 + (floordiv((threadIdx.x_1 + 49), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 49), 81), 9)*7)) + floormod((threadIdx.x_1 + 4), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            pad_temp.shared_1[(threadIdx.x_1 + 98)] = @tir.if_then_else(((1 <= floormod((threadIdx.x_1 + 8), 9)) && (floormod((threadIdx.x_1 + 8), 9) < 8)), data_3[((((cse_var_2 + (floordiv((threadIdx.x_1 + 98), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 17), 81), 9)*7)) + floormod((threadIdx.x_1 + 8), 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            if @tir.likely((threadIdx.x_1 < 15), dtype=bool) {
              pad_temp.shared_1[(threadIdx.x_1 + 147)] = @tir.if_then_else((((threadIdx.x_1 < 6) && (1 <= floormod((threadIdx.x_1 + 3), 9))) && (floormod((threadIdx.x_1 + 3), 9) < 8)), data_3[((((cse_var_2 + (floordiv((threadIdx.x_1 + 147), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 66), 81), 9)*7)) + (threadIdx.x_1 + 3)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1: Buffer(kernel.shared, float32, [288], [], scope="shared")[threadIdx.x_2] = kernel_3: Buffer(kernel_2, float32, [2359296], [])[((((blockIdx.x*73728) + (floordiv(threadIdx.x_2, 18)*4608)) + cse_var_1) + floormod(threadIdx.x_2, 18))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 49)] = kernel_3[((((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 49), 18)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 13), 18), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 4), 9), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 98)] = kernel_3[(((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 98), 18)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 8), 18), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 147)] = kernel_3[((((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 147), 18)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 3), 18), 9)*9)) + (floormod((floordiv(threadIdx.x_2, 3) + 1), 3)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            kernel.shared_1[(threadIdx.x_2 + 196)] = kernel_3[((((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 196), 18)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 16), 18), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 7), 9), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
            if @tir.likely((threadIdx.x_2 < 43), dtype=bool) {
              kernel.shared_1[(threadIdx.x_2 + 245)] = kernel_3[(((((blockIdx.x*73728) + (floordiv((threadIdx.x_2 + 245), 18)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 11), 18), 9)*9)) + floormod((threadIdx.x_2 + 2), 9))]
            }
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[0]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[36]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[72]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[108]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[144]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[180]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[216]))
            conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[252]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[18]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[54]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[90]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[126]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[162]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[198]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[234]))
            conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7))]*kernel.shared_1[270]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[3]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[39]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[75]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[111]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[147]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[183]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[219]))
            conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[255]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[21]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[57]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[93]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[129]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[165]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[201]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[237]))
            conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 9)]*kernel.shared_1[273]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[6]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[42]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[78]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[114]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[150]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[186]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[222]))
            conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[258]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[24]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[60]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[96]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[132]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[168]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[204]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[240]))
            conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 18)]*kernel.shared_1[276]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[9]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[45]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[81]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[117]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[153]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[189]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[225]))
            conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[261]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[27]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[63]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[99]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[135]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[171]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[207]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[243]))
            conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 81)]*kernel.shared_1[279]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[12]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[48]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[84]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[120]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[156]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[192]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[228]))
            conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[264]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[30]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[66]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[102]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[138]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[174]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[210]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[246]))
            conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 90)]*kernel.shared_1[282]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[15]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[51]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[87]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[123]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[159]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[195]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[231]))
            conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[267]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[33]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[69]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[105]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[141]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[177]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[213]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[249]))
            conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 99)]*kernel.shared_1[285]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[1]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[37]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[73]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[109]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[145]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[181]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[217]))
            conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[253]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[19]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[55]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[91]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[127]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[163]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[199]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[235]))
            conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 1)]*kernel.shared_1[271]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[4]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[40]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[76]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[112]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[148]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[184]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[220]))
            conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[256]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[22]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[58]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[94]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[130]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[166]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[202]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[238]))
            conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 10)]*kernel.shared_1[274]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[7]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[43]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[79]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[115]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[151]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[187]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[223]))
            conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[259]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[25]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[61]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[97]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[133]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[169]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[205]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[241]))
            conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 19)]*kernel.shared_1[277]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[10]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[46]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[82]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[118]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[154]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[190]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[226]))
            conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[262]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[28]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[64]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[100]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[136]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[172]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[208]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[244]))
            conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 82)]*kernel.shared_1[280]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[13]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[49]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[85]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[121]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[157]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[193]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[229]))
            conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[265]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[31]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[67]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[103]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[139]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[175]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[211]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[247]))
            conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 91)]*kernel.shared_1[283]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[16]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[52]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[88]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[124]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[160]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[196]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[232]))
            conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[268]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[34]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[70]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[106]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[142]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[178]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[214]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[250]))
            conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 100)]*kernel.shared_1[286]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[2]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[38]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[74]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[110]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[146]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[182]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[218]))
            conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[254]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[20]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[56]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[92]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[128]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[164]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[200]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[236]))
            conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 2)]*kernel.shared_1[272]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[5]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[41]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[77]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[113]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[149]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[185]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[221]))
            conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[257]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[23]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[59]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[95]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[131]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[167]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[203]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[239]))
            conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 11)]*kernel.shared_1[275]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[8]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[44]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[80]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[116]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[152]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[188]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[224]))
            conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[260]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[26]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[62]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[98]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[134]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[170]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[206]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[242]))
            conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 20)]*kernel.shared_1[278]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[11]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[47]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[83]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[119]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[155]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[191]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[227]))
            conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[263]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[29]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[65]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[101]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[137]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[173]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[209]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[245]))
            conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 83)]*kernel.shared_1[281]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[14]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[50]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[86]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[122]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[158]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[194]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[230]))
            conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[266]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[32]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[68]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[104]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[140]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[176]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[212]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[248]))
            conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 92)]*kernel.shared_1[284]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[17]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[53]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[89]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[125]))
            conv2d_nchw_1[8] = (conv2d_nchw_1[8] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[161]))
            conv2d_nchw_1[10] = (conv2d_nchw_1[10] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[197]))
            conv2d_nchw_1[12] = (conv2d_nchw_1[12] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[233]))
            conv2d_nchw_1[14] = (conv2d_nchw_1[14] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[269]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[35]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[71]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[107]))
            conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[143]))
            conv2d_nchw_1[9] = (conv2d_nchw_1[9] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[179]))
            conv2d_nchw_1[11] = (conv2d_nchw_1[11] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[215]))
            conv2d_nchw_1[13] = (conv2d_nchw_1[13] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[251]))
            conv2d_nchw_1[15] = (conv2d_nchw_1[15] + (pad_temp.shared_1[(((floordiv(threadIdx.x, 7)*9) + floormod(threadIdx.x, 7)) + 101)]*kernel.shared_1[287]))
          }
        }
        for (i1.inner: int32, 0, 2) {
          compute_3: Buffer(compute_2, float32, [25088], [])[(((blockIdx.x*784) + (i1.inner*49)) + threadIdx.x)] = max((conv2d_nchw_1[i1.inner] + bias_3: Buffer(bias_2, float32, [512], [])[((blockIdx.x*16) + i1.inner)]), 0f32)
          compute_3[((((blockIdx.x*784) + (i1.inner*49)) + threadIdx.x) + 98)] = max((conv2d_nchw_1[(i1.inner + 2)] + bias_3[(((blockIdx.x*16) + i1.inner) + 2)]), 0f32)
          compute_3[((((blockIdx.x*784) + (i1.inner*49)) + threadIdx.x) + 196)] = max((conv2d_nchw_1[(i1.inner + 4)] + bias_3[(((blockIdx.x*16) + i1.inner) + 4)]), 0f32)
          compute_3[((((blockIdx.x*784) + (i1.inner*49)) + threadIdx.x) + 294)] = max((conv2d_nchw_1[(i1.inner + 6)] + bias_3[(((blockIdx.x*16) + i1.inner) + 6)]), 0f32)
          compute_3[((((blockIdx.x*784) + (i1.inner*49)) + threadIdx.x) + 392)] = max((conv2d_nchw_1[(i1.inner + 8)] + bias_3[(((blockIdx.x*16) + i1.inner) + 8)]), 0f32)
          compute_3[((((blockIdx.x*784) + (i1.inner*49)) + threadIdx.x) + 490)] = max((conv2d_nchw_1[(i1.inner + 10)] + bias_3[(((blockIdx.x*16) + i1.inner) + 10)]), 0f32)
          compute_3[((((blockIdx.x*784) + (i1.inner*49)) + threadIdx.x) + 588)] = max((conv2d_nchw_1[(i1.inner + 12)] + bias_3[(((blockIdx.x*16) + i1.inner) + 12)]), 0f32)
          compute_3[((((blockIdx.x*784) + (i1.inner*49)) + threadIdx.x) + 686)] = max((conv2d_nchw_1[(i1.inner + 14)] + bias_3[(((blockIdx.x*16) + i1.inner) + 14)]), 0f32)
        }
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 142-145

Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.

.. GENERATED FROM PYTHON SOURCE LINES 145-172

.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Execution time of this operator: 0.392 ms




.. GENERATED FROM PYTHON SOURCE LINES 173-178

Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

.. GENERATED FROM PYTHON SOURCE LINES 180-183

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.

.. GENERATED FROM PYTHON SOURCE LINES 183-190

.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=2)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=8)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=7)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=7)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=2)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=1)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=3)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=1)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=1)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=3)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=2)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=1)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=8)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=7)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=7)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=49)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=49)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 1024)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(49) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[16];
      __shared__ float pad_temp_shared[162];
      __shared__ float kernel_shared[288];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[4] = 0.000000e+00f;
      conv2d_nchw[6] = 0.000000e+00f;
      conv2d_nchw[8] = 0.000000e+00f;
      conv2d_nchw[10] = 0.000000e+00f;
      conv2d_nchw[12] = 0.000000e+00f;
      conv2d_nchw[14] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      conv2d_nchw[5] = 0.000000e+00f;
      conv2d_nchw[7] = 0.000000e+00f;
      conv2d_nchw[9] = 0.000000e+00f;
      conv2d_nchw[11] = 0.000000e+00f;
      conv2d_nchw[13] = 0.000000e+00f;
      conv2d_nchw[15] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 256; ++rc_outer_outer) {
        __syncthreads();
        pad_temp_shared[((int)threadIdx.x)] = ((((9 <= ((int)threadIdx.x)) && (1 <= (((int)threadIdx.x) % 9))) && ((((int)threadIdx.x) % 9) < 8)) ? data[((((rc_outer_outer * 98) + ((((int)threadIdx.x) / 9) * 7)) + (((int)threadIdx.x) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 49)] = (((((9 <= ((((int)threadIdx.x) + 49) % 81)) && (((((int)threadIdx.x) + 49) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 4) % 9))) && (((((int)threadIdx.x) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 98) + (((((int)threadIdx.x) + 49) / 81) * 49)) + ((((((int)threadIdx.x) + 49) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 98)] = (((1 <= ((((int)threadIdx.x) + 8) % 9)) && (((((int)threadIdx.x) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 98) + (((((int)threadIdx.x) + 98) / 81) * 49)) + (((((int)threadIdx.x) + 17) / 9) * 7)) + ((((int)threadIdx.x) + 8) % 9)) - 8)] : 0.000000e+00f);
        if (((int)threadIdx.x) < 15) {
          pad_temp_shared[(((int)threadIdx.x) + 147)] = ((((((int)threadIdx.x) < 6) && (1 <= ((((int)threadIdx.x) + 3) % 9))) && (((((int)threadIdx.x) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 98) + (((((int)threadIdx.x) + 147) / 81) * 49)) + (((((int)threadIdx.x) + 66) / 9) * 7)) + ((int)threadIdx.x)) - 5)] : 0.000000e+00f);
        }
        kernel_shared[((int)threadIdx.x)] = kernel[((((((int)blockIdx.x) * 73728) + ((((int)threadIdx.x) / 18) * 4608)) + (rc_outer_outer * 18)) + (((int)threadIdx.x) % 18))];
        kernel_shared[(((int)threadIdx.x) + 49)] = kernel[((((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 49) / 18) * 4608)) + (rc_outer_outer * 18)) + ((((((int)threadIdx.x) + 13) % 18) / 9) * 9)) + ((((((int)threadIdx.x) + 4) % 9) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 98)] = kernel[(((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 98) / 18) * 4608)) + (rc_outer_outer * 18)) + ((((((int)threadIdx.x) + 8) % 18) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 147)] = kernel[((((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 147) / 18) * 4608)) + (rc_outer_outer * 18)) + ((((((int)threadIdx.x) + 3) % 18) / 9) * 9)) + ((((((int)threadIdx.x) / 3) + 1) % 3) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 196)] = kernel[((((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 196) / 18) * 4608)) + (rc_outer_outer * 18)) + ((((((int)threadIdx.x) + 16) % 18) / 9) * 9)) + ((((((int)threadIdx.x) + 7) % 9) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        if (((int)threadIdx.x) < 43) {
          kernel_shared[(((int)threadIdx.x) + 245)] = kernel[(((((((int)blockIdx.x) * 73728) + (((((int)threadIdx.x) + 245) / 18) * 4608)) + (rc_outer_outer * 18)) + ((((((int)threadIdx.x) + 11) % 18) / 9) * 9)) + ((((int)threadIdx.x) + 2) % 9))];
        }
        __syncthreads();
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[0]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[36]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[72]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[108]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[(((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[144]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[(((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[180]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[(((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[216]));
        conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[(((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[252]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[18]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[54]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[90]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[126]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[(((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[162]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[(((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[198]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[(((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[234]));
        conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[(((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7))] * kernel_shared[270]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[3]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[39]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[75]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[111]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[147]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[183]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[219]));
        conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[255]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[21]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[57]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[93]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[129]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[165]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[201]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[237]));
        conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[273]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[6]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[42]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[78]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[114]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[150]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[186]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[222]));
        conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[258]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[24]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[60]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[96]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[132]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[168]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[204]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[240]));
        conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[276]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[9]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[45]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[81]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[117]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[153]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[189]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[225]));
        conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[261]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[27]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[63]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[99]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[135]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[171]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[207]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[243]));
        conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 81)] * kernel_shared[279]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[12]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[48]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[84]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[120]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[156]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[192]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[228]));
        conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[264]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[30]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[66]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[102]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[138]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[174]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[210]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[246]));
        conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 90)] * kernel_shared[282]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[15]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[51]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[87]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[123]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[159]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[195]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[231]));
        conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[267]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[33]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[69]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[105]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[141]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[177]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[213]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[249]));
        conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 99)] * kernel_shared[285]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[1]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[37]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[73]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[109]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[145]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[181]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[217]));
        conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[253]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[19]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[55]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[91]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[127]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[163]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[199]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[235]));
        conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 1)] * kernel_shared[271]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[4]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[40]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[76]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[112]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[148]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[184]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[220]));
        conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[256]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[22]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[58]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[94]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[130]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[166]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[202]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[238]));
        conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 10)] * kernel_shared[274]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[7]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[43]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[79]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[115]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[151]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[187]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[223]));
        conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[259]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[25]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[61]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[97]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[133]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[169]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[205]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[241]));
        conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 19)] * kernel_shared[277]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[10]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[46]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[82]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[118]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[154]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[190]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[226]));
        conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[262]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[28]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[64]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[100]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[136]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[172]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[208]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[244]));
        conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 82)] * kernel_shared[280]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[13]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[49]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[85]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[121]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[157]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[193]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[229]));
        conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[265]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[31]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[67]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[103]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[139]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[175]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[211]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[247]));
        conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 91)] * kernel_shared[283]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[16]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[52]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[88]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[124]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[160]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[196]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[232]));
        conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[268]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[34]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[70]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[106]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[142]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[178]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[214]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[250]));
        conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 100)] * kernel_shared[286]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[2]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[38]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[74]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[110]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[146]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[182]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[218]));
        conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[254]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[20]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[56]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[92]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[128]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[164]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[200]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[236]));
        conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 2)] * kernel_shared[272]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[5]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[41]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[77]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[113]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[149]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[185]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[221]));
        conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[257]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[23]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[59]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[95]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[131]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[167]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[203]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[239]));
        conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 11)] * kernel_shared[275]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[8]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[44]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[80]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[116]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[152]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[188]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[224]));
        conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[260]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[26]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[62]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[98]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[134]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[170]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[206]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[242]));
        conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 20)] * kernel_shared[278]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[11]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[47]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[83]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[119]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[155]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[191]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[227]));
        conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[263]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[29]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[65]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[101]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[137]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[173]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[209]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[245]));
        conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 83)] * kernel_shared[281]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[14]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[50]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[86]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[122]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[158]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[194]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[230]));
        conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[266]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[32]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[68]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[104]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[140]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[176]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[212]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[248]));
        conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 92)] * kernel_shared[284]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[17]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[53]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[89]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[125]));
        conv2d_nchw[8] = (conv2d_nchw[8] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[161]));
        conv2d_nchw[10] = (conv2d_nchw[10] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[197]));
        conv2d_nchw[12] = (conv2d_nchw[12] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[233]));
        conv2d_nchw[14] = (conv2d_nchw[14] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[269]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[35]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[71]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[107]));
        conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[143]));
        conv2d_nchw[9] = (conv2d_nchw[9] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[179]));
        conv2d_nchw[11] = (conv2d_nchw[11] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[215]));
        conv2d_nchw[13] = (conv2d_nchw[13] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[251]));
        conv2d_nchw[15] = (conv2d_nchw[15] + (pad_temp_shared[((((((int)threadIdx.x) / 7) * 9) + (((int)threadIdx.x) % 7)) + 101)] * kernel_shared[287]));
      }
      for (int i1_inner = 0; i1_inner < 2; ++i1_inner) {
        compute[(((((int)blockIdx.x) * 784) + (i1_inner * 49)) + ((int)threadIdx.x))] = max((conv2d_nchw[i1_inner] + bias[((((int)blockIdx.x) * 16) + i1_inner)]), 0.000000e+00f);
        compute[((((((int)blockIdx.x) * 784) + (i1_inner * 49)) + ((int)threadIdx.x)) + 98)] = max((conv2d_nchw[(i1_inner + 2)] + bias[(((((int)blockIdx.x) * 16) + i1_inner) + 2)]), 0.000000e+00f);
        compute[((((((int)blockIdx.x) * 784) + (i1_inner * 49)) + ((int)threadIdx.x)) + 196)] = max((conv2d_nchw[(i1_inner + 4)] + bias[(((((int)blockIdx.x) * 16) + i1_inner) + 4)]), 0.000000e+00f);
        compute[((((((int)blockIdx.x) * 784) + (i1_inner * 49)) + ((int)threadIdx.x)) + 294)] = max((conv2d_nchw[(i1_inner + 6)] + bias[(((((int)blockIdx.x) * 16) + i1_inner) + 6)]), 0.000000e+00f);
        compute[((((((int)blockIdx.x) * 784) + (i1_inner * 49)) + ((int)threadIdx.x)) + 392)] = max((conv2d_nchw[(i1_inner + 8)] + bias[(((((int)blockIdx.x) * 16) + i1_inner) + 8)]), 0.000000e+00f);
        compute[((((((int)blockIdx.x) * 784) + (i1_inner * 49)) + ((int)threadIdx.x)) + 490)] = max((conv2d_nchw[(i1_inner + 10)] + bias[(((((int)blockIdx.x) * 16) + i1_inner) + 10)]), 0.000000e+00f);
        compute[((((((int)blockIdx.x) * 784) + (i1_inner * 49)) + ((int)threadIdx.x)) + 588)] = max((conv2d_nchw[(i1_inner + 12)] + bias[(((((int)blockIdx.x) * 16) + i1_inner) + 12)]), 0.000000e+00f);
        compute[((((((int)blockIdx.x) * 784) + (i1_inner * 49)) + ((int)threadIdx.x)) + 686)] = max((conv2d_nchw[(i1_inner + 14)] + bias[(((((int)blockIdx.x) * 16) + i1_inner) + 14)]), 0.000000e+00f);
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 191-195

A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.

.. GENERATED FROM PYTHON SOURCE LINES 195-217

.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resume search:
    /venv/apache-tvm-py3.7/lib/python3.7/site-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  28.691 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
