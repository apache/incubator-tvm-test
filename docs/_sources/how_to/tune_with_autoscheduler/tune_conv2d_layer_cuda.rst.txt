
.. DO NOT EDIT. THIS FILE WAS AUTOMATICALLY GENERATED BY
.. TVM'S MONKEY-PATCHED VERSION OF SPHINX-GALLERY. TO MAKE
.. CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.py"

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        This tutorial can be used interactively with Google Colab! You can also click
        :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>` to run the Jupyter notebook locally.

        .. image:: https://raw.githubusercontent.com/tlc-pack/web-data/main/images/utilities/colab_button.svg
            :align: center
            :target: https://colab.research.google.com/github/apache/tvm-site/blob/asf-site/docs/_downloads/5f1f7bd7d90710fd404f7bcdc4965622/tune_conv2d_layer_cuda.ipynb
            :width: 300px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.

.. GENERATED FROM PYTHON SOURCE LINES 39-48

.. code-block:: default



    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python








.. GENERATED FROM PYTHON SOURCE LINES 55-60

Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.

.. GENERATED FROM PYTHON SOURCE LINES 60-72

.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]









.. GENERATED FROM PYTHON SOURCE LINES 73-76

Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.

.. GENERATED FROM PYTHON SOURCE LINES 76-89

.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)





.. GENERATED FROM PYTHON SOURCE LINES 90-107

Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the main process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.

.. GENERATED FROM PYTHON SOURCE LINES 107-117

.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Get devices for measurement successfully!




.. GENERATED FROM PYTHON SOURCE LINES 118-124

Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.

.. GENERATED FROM PYTHON SOURCE LINES 124-133

.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx








.. GENERATED FROM PYTHON SOURCE LINES 134-137

We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.

.. GENERATED FROM PYTHON SOURCE LINES 137-141

.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Lowered TIR:
    @main = primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {data: Buffer(data_2: Pointer(float32), float32, [1, 512, 7, 7], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [512, 512, 3, 3], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [1, 512, 1, 1], []),
                 compute: Buffer(compute_2: Pointer(float32), float32, [1, 512, 7, 7], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 64;
      allocate(conv2d_nchw: Pointer(local float32), float32, [8]), storage_scope = local;
      allocate(pad_temp.shared: Pointer(shared float32), float32, [4032]), storage_scope = shared;
      allocate(kernel.shared: Pointer(shared float32), float32, [1536]), storage_scope = shared;
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
        conv2d_nchw_1: Buffer(conv2d_nchw, float32, [8], [], scope="local", align=32)[0] = 0f32
        conv2d_nchw_1[1] = 0f32
        conv2d_nchw_1[2] = 0f32
        conv2d_nchw_1[3] = 0f32
        conv2d_nchw_1[4] = 0f32
        conv2d_nchw_1[5] = 0f32
        conv2d_nchw_1[6] = 0f32
        conv2d_nchw_1[7] = 0f32
        for (rc.outer.outer: int32, 0, 8) {
          for (rx.outer.outer: int32, 0, 3) {
            let cse_var_2: int32 = (rc.outer.outer*3136)
            let cse_var_1: int32 = (rc.outer.outer*576)
             {
              attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1: Buffer(pad_temp.shared, float32, [4032], [], scope="shared")[(threadIdx.x_1*3)] = @tir.if_then_else(((((2 < floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 19)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3: Buffer(data_2, float32, [25088], [])[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*3) + 1)] = @tir.if_then_else(((((2 <= floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 19)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) - 7)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*3) + 2)] = @tir.if_then_else(((((1 < floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 18)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) - 6)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 49), 21)*63) + (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)*7)) + floormod((threadIdx.x_1*3), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)) && (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 49), 21)*49)) + (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)*7)) + rx.outer.outer) + floormod((threadIdx.x_1*3), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 49), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)*7)) + floormod(((threadIdx.x_1*3) + 1), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 49), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 1), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 49), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)*7)) + floormod(((threadIdx.x_1*3) + 2), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 49), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 2), 7)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 98), 21)*63) + (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)*7)) + floormod((threadIdx.x_1*3), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)) && (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 98), 21)*49)) + (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)*7)) + rx.outer.outer) + floormod((threadIdx.x_1*3), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 98), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)*7)) + floormod(((threadIdx.x_1*3) + 1), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 98), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 1), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 98), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)*7)) + floormod(((threadIdx.x_1*3) + 2), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 98), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 2), 7)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[((threadIdx.x_1*3) + 441)] = @tir.if_then_else(((((2 < floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 19)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 335)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*3) + 442)] = @tir.if_then_else(((((2 <= floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 19)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 336)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*3) + 443)] = @tir.if_then_else(((((1 < floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 18)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 337)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 196), 21)*63) + (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)*7)) + floormod((threadIdx.x_1*3), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)) && (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 196), 21)*49)) + (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)*7)) + rx.outer.outer) + floormod((threadIdx.x_1*3), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 196), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)*7)) + floormod(((threadIdx.x_1*3) + 1), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 196), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 1), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 196), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)*7)) + floormod(((threadIdx.x_1*3) + 2), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 196), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 2), 7)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 245), 21)*63) + (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)*7)) + floormod((threadIdx.x_1*3), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)) && (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 245), 21)*49)) + (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)*7)) + rx.outer.outer) + floormod((threadIdx.x_1*3), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 245), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)*7)) + floormod(((threadIdx.x_1*3) + 1), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 245), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 1), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 245), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)*7)) + floormod(((threadIdx.x_1*3) + 2), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 245), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 2), 7)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[((threadIdx.x_1*3) + 882)] = @tir.if_then_else(((((2 < floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 19)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 678)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*3) + 883)] = @tir.if_then_else(((((2 <= floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 19)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 679)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*3) + 884)] = @tir.if_then_else(((((1 < floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 18)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 680)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 343), 21)*63) + (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)*7)) + floormod((threadIdx.x_1*3), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)) && (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 343), 21)*49)) + (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)*7)) + rx.outer.outer) + floormod((threadIdx.x_1*3), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 343), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)*7)) + floormod(((threadIdx.x_1*3) + 1), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 343), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 1), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 343), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)*7)) + floormod(((threadIdx.x_1*3) + 2), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 343), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 2), 7)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 392), 21)*63) + (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)*7)) + floormod((threadIdx.x_1*3), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)) && (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 392), 21)*49)) + (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)*7)) + rx.outer.outer) + floormod((threadIdx.x_1*3), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 392), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)*7)) + floormod(((threadIdx.x_1*3) + 1), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 392), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 1), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 392), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)*7)) + floormod(((threadIdx.x_1*3) + 2), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 392), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 2), 7)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[((threadIdx.x_1*3) + 1323)] = @tir.if_then_else(((((2 < floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 19)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 1021)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*3) + 1324)] = @tir.if_then_else(((((2 <= floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 19)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 1022)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*3) + 1325)] = @tir.if_then_else(((((1 < floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 18)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 1023)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 490), 21)*63) + (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)*7)) + floormod((threadIdx.x_1*3), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)) && (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 490), 21)*49)) + (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)*7)) + rx.outer.outer) + floormod((threadIdx.x_1*3), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 490), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)*7)) + floormod(((threadIdx.x_1*3) + 1), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 490), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 1), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 490), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)*7)) + floormod(((threadIdx.x_1*3) + 2), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 490), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 2), 7)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 539), 21)*63) + (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)*7)) + floormod((threadIdx.x_1*3), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)) && (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 539), 21)*49)) + (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)*7)) + rx.outer.outer) + floormod((threadIdx.x_1*3), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 539), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)*7)) + floormod(((threadIdx.x_1*3) + 1), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 539), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 1), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 539), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)*7)) + floormod(((threadIdx.x_1*3) + 2), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 539), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 2), 7)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[((threadIdx.x_1*3) + 1764)] = @tir.if_then_else(((((2 < floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 19)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 1364)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*3) + 1765)] = @tir.if_then_else(((((2 <= floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 19)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 1365)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*3) + 1766)] = @tir.if_then_else(((((1 < floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 18)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 1366)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 637), 21)*63) + (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)*7)) + floormod((threadIdx.x_1*3), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)) && (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 637), 21)*49)) + (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)*7)) + rx.outer.outer) + floormod((threadIdx.x_1*3), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 637), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)*7)) + floormod(((threadIdx.x_1*3) + 1), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 637), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 1), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 637), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)*7)) + floormod(((threadIdx.x_1*3) + 2), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 637), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 2), 7)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 686), 21)*63) + (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)*7)) + floormod((threadIdx.x_1*3), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)) && (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 686), 21)*49)) + (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)*7)) + rx.outer.outer) + floormod((threadIdx.x_1*3), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 686), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)*7)) + floormod(((threadIdx.x_1*3) + 1), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 686), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 1), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 686), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)*7)) + floormod(((threadIdx.x_1*3) + 2), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 686), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 2), 7)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[((threadIdx.x_1*3) + 2205)] = @tir.if_then_else(((((2 < floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 19)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 1707)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*3) + 2206)] = @tir.if_then_else(((((2 <= floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 19)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 1708)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*3) + 2207)] = @tir.if_then_else(((((1 < floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 18)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 1709)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 784), 21)*63) + (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)*7)) + floormod((threadIdx.x_1*3), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)) && (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 784), 21)*49)) + (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)*7)) + rx.outer.outer) + floormod((threadIdx.x_1*3), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 784), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)*7)) + floormod(((threadIdx.x_1*3) + 1), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 784), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 1), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 784), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)*7)) + floormod(((threadIdx.x_1*3) + 2), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 784), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 2), 7)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 833), 21)*63) + (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)*7)) + floormod((threadIdx.x_1*3), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)) && (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 833), 21)*49)) + (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)*7)) + rx.outer.outer) + floormod((threadIdx.x_1*3), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 833), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)*7)) + floormod(((threadIdx.x_1*3) + 1), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 833), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 1), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 833), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)*7)) + floormod(((threadIdx.x_1*3) + 2), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 833), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 2), 7)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[((threadIdx.x_1*3) + 2646)] = @tir.if_then_else(((((2 < floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 19)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 2050)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*3) + 2647)] = @tir.if_then_else(((((2 <= floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 19)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 2051)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*3) + 2648)] = @tir.if_then_else(((((1 < floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 18)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 2052)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 931), 21)*63) + (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)*7)) + floormod((threadIdx.x_1*3), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)) && (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 931), 21)*49)) + (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)*7)) + rx.outer.outer) + floormod((threadIdx.x_1*3), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 931), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)*7)) + floormod(((threadIdx.x_1*3) + 1), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 931), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 1), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 931), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)*7)) + floormod(((threadIdx.x_1*3) + 2), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 931), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 2), 7)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 980), 21)*63) + (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)*7)) + floormod((threadIdx.x_1*3), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)) && (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 980), 21)*49)) + (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)*7)) + rx.outer.outer) + floormod((threadIdx.x_1*3), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 980), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)*7)) + floormod(((threadIdx.x_1*3) + 1), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 980), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 1), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 980), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)*7)) + floormod(((threadIdx.x_1*3) + 2), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 980), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 2), 7)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[((threadIdx.x_1*3) + 3087)] = @tir.if_then_else(((((2 < floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 19)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 2393)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*3) + 3088)] = @tir.if_then_else(((((2 <= floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 19)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 2394)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*3) + 3089)] = @tir.if_then_else(((((1 < floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 18)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 2395)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 1078), 21)*63) + (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)*7)) + floormod((threadIdx.x_1*3), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)) && (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 1078), 21)*49)) + (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)*7)) + rx.outer.outer) + floormod((threadIdx.x_1*3), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 1078), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)*7)) + floormod(((threadIdx.x_1*3) + 1), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 1078), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 1), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 1078), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)*7)) + floormod(((threadIdx.x_1*3) + 2), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 1078), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 2), 7)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 1127), 21)*63) + (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)*7)) + floormod((threadIdx.x_1*3), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)) && (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 1127), 21)*49)) + (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)*7)) + rx.outer.outer) + floormod((threadIdx.x_1*3), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 1127), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)*7)) + floormod(((threadIdx.x_1*3) + 1), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 1127), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 1), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 1127), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)*7)) + floormod(((threadIdx.x_1*3) + 2), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 1127), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 2), 7)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[((threadIdx.x_1*3) + 3528)] = @tir.if_then_else(((((2 < floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 19)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 2736)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*3) + 3529)] = @tir.if_then_else(((((2 <= floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 19)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 2737)], 0f32, dtype=float32)
                pad_temp.shared_1[((threadIdx.x_1*3) + 3530)] = @tir.if_then_else(((((1 < floormod(threadIdx.x_1, 21)) && (floormod(threadIdx.x_1, 21) < 18)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[((((cse_var_2 + (floordiv(threadIdx.x_1, 21)*49)) + (floormod(threadIdx.x_1, 21)*3)) + rx.outer.outer) + 2738)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 1225), 21)*63) + (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)*7)) + floormod((threadIdx.x_1*3), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)) && (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 1225), 21)*49)) + (floormod((floordiv((threadIdx.x_1*3), 7) + 3), 9)*7)) + rx.outer.outer) + floormod((threadIdx.x_1*3), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 1225), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)*7)) + floormod(((threadIdx.x_1*3) + 1), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 1225), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 3), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 1), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 1225), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)*7)) + floormod(((threadIdx.x_1*3) + 2), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 1225), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 3), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 2), 7)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 1274), 21)*63) + (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)*7)) + floormod((threadIdx.x_1*3), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)) && (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 1274), 21)*49)) + (floormod((floordiv((threadIdx.x_1*3), 7) + 6), 9)*7)) + rx.outer.outer) + floormod((threadIdx.x_1*3), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 1274), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)*7)) + floormod(((threadIdx.x_1*3) + 1), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 1274), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 1), 7) + 6), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 1), 7)) - 8)], 0f32, dtype=float32)
                pad_temp.shared_1[(((floordiv((threadIdx.x_1 + 1274), 21)*63) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)*7)) + floormod(((threadIdx.x_1*3) + 2), 7))] = @tir.if_then_else(((((1 <= floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)) && (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9) < 8)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[(((((cse_var_2 + (floordiv((threadIdx.x_1 + 1274), 21)*49)) + (floormod((floordiv(((threadIdx.x_1*3) + 2), 7) + 6), 9)*7)) + rx.outer.outer) + floormod(((threadIdx.x_1*3) + 2), 7)) - 8)], 0f32, dtype=float32)
              }
              attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49 {
                if @tir.likely((threadIdx.x_1 < 21), dtype=bool) {
                  pad_temp.shared_1[((threadIdx.x_1*3) + 3969)] = @tir.if_then_else(((((2 < threadIdx.x_1) && (threadIdx.x_1 < 19)) && (1 <= (rx.outer.outer + floormod((threadIdx.x_1*3), 7)))) && ((rx.outer.outer + floormod((threadIdx.x_1*3), 7)) < 8)), data_3[(((cse_var_2 + (threadIdx.x_1*3)) + rx.outer.outer) + 3079)], 0f32, dtype=float32)
                }
                if @tir.likely((threadIdx.x_1 < 21), dtype=bool) {
                  pad_temp.shared_1[((threadIdx.x_1*3) + 3970)] = @tir.if_then_else(((((2 <= threadIdx.x_1) && (threadIdx.x_1 < 19)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 1), 7)) < 8)), data_3[(((cse_var_2 + ((threadIdx.x_1*3) + 1)) + rx.outer.outer) + 3079)], 0f32, dtype=float32)
                }
                if @tir.likely((threadIdx.x_1 < 21), dtype=bool) {
                  pad_temp.shared_1[((threadIdx.x_1*3) + 3971)] = @tir.if_then_else(((((1 < threadIdx.x_1) && (threadIdx.x_1 < 18)) && (1 <= (rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)))) && ((rx.outer.outer + floormod(((threadIdx.x_1*3) + 2), 7)) < 8)), data_3[(((cse_var_2 + ((threadIdx.x_1*3) + 2)) + rx.outer.outer) + 3079)], 0f32, dtype=float32)
                }
              }
              attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1: Buffer(kernel.shared, float32, [1536], [], scope="shared")[threadIdx.x_2] = kernel_3: Buffer(kernel_2, float32, [2359296], [])[((((blockIdx.x*36864) + cse_var_1) + (threadIdx.x_2*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 49)] = kernel_3[(((((blockIdx.x*36864) + cse_var_1) + (floordiv((threadIdx.x_2 + 49), 3)*9)) + (floormod((threadIdx.x_2 + 1), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 98)] = kernel_3[(((((blockIdx.x*36864) + cse_var_1) + (floordiv((threadIdx.x_2 + 98), 3)*9)) + (floormod((threadIdx.x_2 + 2), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 147)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 147), 192)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 49), 64)*9)) + (floormod(threadIdx.x_2, 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 196)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 196), 192)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 4), 192), 3)*9)) + (floormod((threadIdx.x_2 + 1), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 245)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 245), 192)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 53), 192), 3)*9)) + (floormod((threadIdx.x_2 + 2), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 294)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 294), 192)*4608)) + cse_var_1) + ((floordiv(threadIdx.x_2, 3) + 34)*9)) + (floormod(threadIdx.x_2, 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 343)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 343), 192)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 151), 192), 3)*9)) + (floormod((threadIdx.x_2 + 1), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 392)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 392), 192)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 8), 192), 3)*9)) + (floormod((threadIdx.x_2 + 2), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 441)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 441), 192)*4608)) + cse_var_1) + ((floordiv(threadIdx.x_2, 3) + 19)*9)) + (floormod(threadIdx.x_2, 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 490)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 490), 192)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 106), 192), 3)*9)) + (floormod((threadIdx.x_2 + 1), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 539)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 539), 192)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 155), 192), 3)*9)) + (floormod((threadIdx.x_2 + 2), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 588)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 588), 192)*4608)) + cse_var_1) + ((floordiv(threadIdx.x_2, 3) + 4)*9)) + (floormod(threadIdx.x_2, 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 637)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 637), 192)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 61), 192), 3)*9)) + (floormod((threadIdx.x_2 + 1), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 686)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 686), 192)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 110), 192), 3)*9)) + (floormod((threadIdx.x_2 + 2), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 735)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 735), 192)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 53), 64)*9)) + (floormod(threadIdx.x_2, 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 784)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 784), 192)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 16), 192), 3)*9)) + (floormod((threadIdx.x_2 + 1), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 833)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 833), 192)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 65), 192), 3)*9)) + (floormod((threadIdx.x_2 + 2), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 882)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 882), 192)*4608)) + cse_var_1) + ((floordiv(threadIdx.x_2, 3) + 38)*9)) + (floormod(threadIdx.x_2, 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 931)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 931), 192)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 163), 192), 3)*9)) + (floormod((threadIdx.x_2 + 1), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 980)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 980), 192)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 20), 192), 3)*9)) + (floormod((threadIdx.x_2 + 2), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 1029)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1029), 192)*4608)) + cse_var_1) + ((floordiv(threadIdx.x_2, 3) + 23)*9)) + (floormod(threadIdx.x_2, 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 1078)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1078), 192)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 118), 192), 3)*9)) + (floormod((threadIdx.x_2 + 1), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 1127)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1127), 192)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 167), 192), 3)*9)) + (floormod((threadIdx.x_2 + 2), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 1176)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1176), 192)*4608)) + cse_var_1) + ((floordiv(threadIdx.x_2, 3) + 8)*9)) + (floormod(threadIdx.x_2, 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 1225)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1225), 192)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 73), 192), 3)*9)) + (floormod((threadIdx.x_2 + 1), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 1274)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1274), 192)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 122), 192), 3)*9)) + (floormod((threadIdx.x_2 + 2), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 1323)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1323), 192)*4608)) + cse_var_1) + (floormod((floordiv(threadIdx.x_2, 3) + 57), 64)*9)) + (floormod(threadIdx.x_2, 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 1372)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1372), 192)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 28), 192), 3)*9)) + (floormod((threadIdx.x_2 + 1), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 1421)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1421), 192)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 77), 192), 3)*9)) + (floormod((threadIdx.x_2 + 2), 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              kernel.shared_1[(threadIdx.x_2 + 1470)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1470), 192)*4608)) + cse_var_1) + ((floordiv(threadIdx.x_2, 3) + 42)*9)) + (floormod(threadIdx.x_2, 3)*3)) + rx.outer.outer)]
              attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 49;
              if @tir.likely((threadIdx.x_2 < 17), dtype=bool) {
                kernel.shared_1[(threadIdx.x_2 + 1519)] = kernel_3[((((((blockIdx.x*36864) + (floordiv((threadIdx.x_2 + 1519), 192)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 175), 192), 3)*9)) + (floormod((threadIdx.x_2 + 1), 3)*3)) + rx.outer.outer)]
              }
              for (rc.inner: int32, 0, 64) {
                let cse_var_3: int32 = (rc.inner*3)
                 {
                  conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((rc.inner*63) + threadIdx.x)]*kernel.shared_1[cse_var_3]))
                  conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((rc.inner*63) + threadIdx.x)]*kernel.shared_1[(cse_var_3 + 192)]))
                  conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((rc.inner*63) + threadIdx.x)]*kernel.shared_1[(cse_var_3 + 384)]))
                  conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((rc.inner*63) + threadIdx.x)]*kernel.shared_1[(cse_var_3 + 576)]))
                  conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((rc.inner*63) + threadIdx.x)]*kernel.shared_1[(cse_var_3 + 768)]))
                  conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((rc.inner*63) + threadIdx.x)]*kernel.shared_1[(cse_var_3 + 960)]))
                  conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((rc.inner*63) + threadIdx.x)]*kernel.shared_1[(cse_var_3 + 1152)]))
                  conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[((rc.inner*63) + threadIdx.x)]*kernel.shared_1[(cse_var_3 + 1344)]))
                  conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((rc.inner*63) + threadIdx.x) + 7)]*kernel.shared_1[(cse_var_3 + 1)]))
                  conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((rc.inner*63) + threadIdx.x) + 7)]*kernel.shared_1[(cse_var_3 + 193)]))
                  conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((rc.inner*63) + threadIdx.x) + 7)]*kernel.shared_1[(cse_var_3 + 385)]))
                  conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((rc.inner*63) + threadIdx.x) + 7)]*kernel.shared_1[(cse_var_3 + 577)]))
                  conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((rc.inner*63) + threadIdx.x) + 7)]*kernel.shared_1[(cse_var_3 + 769)]))
                  conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((rc.inner*63) + threadIdx.x) + 7)]*kernel.shared_1[(cse_var_3 + 961)]))
                  conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((rc.inner*63) + threadIdx.x) + 7)]*kernel.shared_1[(cse_var_3 + 1153)]))
                  conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((rc.inner*63) + threadIdx.x) + 7)]*kernel.shared_1[(cse_var_3 + 1345)]))
                  conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(((rc.inner*63) + threadIdx.x) + 14)]*kernel.shared_1[(cse_var_3 + 2)]))
                  conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[(((rc.inner*63) + threadIdx.x) + 14)]*kernel.shared_1[(cse_var_3 + 194)]))
                  conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[(((rc.inner*63) + threadIdx.x) + 14)]*kernel.shared_1[(cse_var_3 + 386)]))
                  conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[(((rc.inner*63) + threadIdx.x) + 14)]*kernel.shared_1[(cse_var_3 + 578)]))
                  conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[(((rc.inner*63) + threadIdx.x) + 14)]*kernel.shared_1[(cse_var_3 + 770)]))
                  conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[(((rc.inner*63) + threadIdx.x) + 14)]*kernel.shared_1[(cse_var_3 + 962)]))
                  conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[(((rc.inner*63) + threadIdx.x) + 14)]*kernel.shared_1[(cse_var_3 + 1154)]))
                  conv2d_nchw_1[7] = (conv2d_nchw_1[7] + (pad_temp.shared_1[(((rc.inner*63) + threadIdx.x) + 14)]*kernel.shared_1[(cse_var_3 + 1346)]))
                }
              }
            }
          }
        }
        for (i1.inner: int32, 0, 8) {
          compute_3: Buffer(compute_2, float32, [25088], [])[(((blockIdx.x*392) + (i1.inner*49)) + threadIdx.x)] = max((conv2d_nchw_1[i1.inner] + bias_3: Buffer(bias_2, float32, [512], [])[((blockIdx.x*8) + i1.inner)]), 0f32)
        }
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 142-145

Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.

.. GENERATED FROM PYTHON SOURCE LINES 145-172

.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Execution time of this operator: 0.289 ms




.. GENERATED FROM PYTHON SOURCE LINES 173-178

Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

.. GENERATED FROM PYTHON SOURCE LINES 180-183

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.

.. GENERATED FROM PYTHON SOURCE LINES 183-190

.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=8)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=1)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=7)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=7)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=64)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=1)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=3)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=1)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=1)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=1)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=8)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=1)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=7)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=7)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=49)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=3)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=49)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 1024)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(49) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[8];
      __shared__ float pad_temp_shared[4032];
      __shared__ float kernel_shared[1536];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      conv2d_nchw[4] = 0.000000e+00f;
      conv2d_nchw[5] = 0.000000e+00f;
      conv2d_nchw[6] = 0.000000e+00f;
      conv2d_nchw[7] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 8; ++rc_outer_outer) {
        for (int rx_outer_outer = 0; rx_outer_outer < 3; ++rx_outer_outer) {
          __syncthreads();
          pad_temp_shared[(((int)threadIdx.x) * 3)] = (((((2 < (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 19)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 1)] = (((((2 <= (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 19)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) - 7)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 2)] = (((((1 < (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 18)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) - 6)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 49) / 21) * 63) + (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) * 7)) + ((((int)threadIdx.x) * 3) % 7))] = (((((1 <= ((((((int)threadIdx.x) * 3) / 7) + 3) % 9)) && (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 49) / 21) * 49)) + (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) * 7)) + rx_outer_outer) + ((((int)threadIdx.x) * 3) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 49) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 1) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9)) && ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 49) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 1) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 49) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 2) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9)) && ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 49) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 2) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 98) / 21) * 63) + (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) * 7)) + ((((int)threadIdx.x) * 3) % 7))] = (((((1 <= ((((((int)threadIdx.x) * 3) / 7) + 6) % 9)) && (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 98) / 21) * 49)) + (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) * 7)) + rx_outer_outer) + ((((int)threadIdx.x) * 3) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 98) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 1) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9)) && ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 98) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 1) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 98) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 2) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9)) && ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 98) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 2) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 441)] = (((((2 < (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 19)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 335)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 442)] = (((((2 <= (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 19)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 336)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 443)] = (((((1 < (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 18)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 337)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 196) / 21) * 63) + (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) * 7)) + ((((int)threadIdx.x) * 3) % 7))] = (((((1 <= ((((((int)threadIdx.x) * 3) / 7) + 3) % 9)) && (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 196) / 21) * 49)) + (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) * 7)) + rx_outer_outer) + ((((int)threadIdx.x) * 3) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 196) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 1) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9)) && ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 196) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 1) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 196) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 2) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9)) && ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 196) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 2) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 245) / 21) * 63) + (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) * 7)) + ((((int)threadIdx.x) * 3) % 7))] = (((((1 <= ((((((int)threadIdx.x) * 3) / 7) + 6) % 9)) && (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 245) / 21) * 49)) + (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) * 7)) + rx_outer_outer) + ((((int)threadIdx.x) * 3) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 245) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 1) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9)) && ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 245) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 1) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 245) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 2) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9)) && ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 245) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 2) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 882)] = (((((2 < (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 19)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 678)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 883)] = (((((2 <= (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 19)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 679)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 884)] = (((((1 < (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 18)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 680)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 343) / 21) * 63) + (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) * 7)) + ((((int)threadIdx.x) * 3) % 7))] = (((((1 <= ((((((int)threadIdx.x) * 3) / 7) + 3) % 9)) && (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 343) / 21) * 49)) + (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) * 7)) + rx_outer_outer) + ((((int)threadIdx.x) * 3) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 343) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 1) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9)) && ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 343) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 1) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 343) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 2) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9)) && ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 343) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 2) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 392) / 21) * 63) + (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) * 7)) + ((((int)threadIdx.x) * 3) % 7))] = (((((1 <= ((((((int)threadIdx.x) * 3) / 7) + 6) % 9)) && (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 392) / 21) * 49)) + (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) * 7)) + rx_outer_outer) + ((((int)threadIdx.x) * 3) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 392) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 1) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9)) && ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 392) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 1) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 392) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 2) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9)) && ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 392) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 2) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 1323)] = (((((2 < (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 19)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 1021)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 1324)] = (((((2 <= (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 19)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 1022)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 1325)] = (((((1 < (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 18)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 1023)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 490) / 21) * 63) + (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) * 7)) + ((((int)threadIdx.x) * 3) % 7))] = (((((1 <= ((((((int)threadIdx.x) * 3) / 7) + 3) % 9)) && (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 490) / 21) * 49)) + (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) * 7)) + rx_outer_outer) + ((((int)threadIdx.x) * 3) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 490) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 1) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9)) && ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 490) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 1) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 490) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 2) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9)) && ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 490) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 2) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 539) / 21) * 63) + (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) * 7)) + ((((int)threadIdx.x) * 3) % 7))] = (((((1 <= ((((((int)threadIdx.x) * 3) / 7) + 6) % 9)) && (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 539) / 21) * 49)) + (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) * 7)) + rx_outer_outer) + ((((int)threadIdx.x) * 3) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 539) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 1) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9)) && ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 539) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 1) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 539) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 2) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9)) && ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 539) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 2) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 1764)] = (((((2 < (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 19)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 1364)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 1765)] = (((((2 <= (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 19)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 1365)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 1766)] = (((((1 < (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 18)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 1366)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 637) / 21) * 63) + (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) * 7)) + ((((int)threadIdx.x) * 3) % 7))] = (((((1 <= ((((((int)threadIdx.x) * 3) / 7) + 3) % 9)) && (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 637) / 21) * 49)) + (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) * 7)) + rx_outer_outer) + ((((int)threadIdx.x) * 3) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 637) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 1) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9)) && ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 637) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 1) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 637) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 2) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9)) && ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 637) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 2) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 686) / 21) * 63) + (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) * 7)) + ((((int)threadIdx.x) * 3) % 7))] = (((((1 <= ((((((int)threadIdx.x) * 3) / 7) + 6) % 9)) && (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 686) / 21) * 49)) + (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) * 7)) + rx_outer_outer) + ((((int)threadIdx.x) * 3) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 686) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 1) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9)) && ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 686) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 1) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 686) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 2) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9)) && ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 686) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 2) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 2205)] = (((((2 < (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 19)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 1707)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 2206)] = (((((2 <= (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 19)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 1708)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 2207)] = (((((1 < (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 18)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 1709)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 784) / 21) * 63) + (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) * 7)) + ((((int)threadIdx.x) * 3) % 7))] = (((((1 <= ((((((int)threadIdx.x) * 3) / 7) + 3) % 9)) && (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 784) / 21) * 49)) + (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) * 7)) + rx_outer_outer) + ((((int)threadIdx.x) * 3) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 784) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 1) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9)) && ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 784) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 1) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 784) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 2) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9)) && ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 784) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 2) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 833) / 21) * 63) + (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) * 7)) + ((((int)threadIdx.x) * 3) % 7))] = (((((1 <= ((((((int)threadIdx.x) * 3) / 7) + 6) % 9)) && (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 833) / 21) * 49)) + (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) * 7)) + rx_outer_outer) + ((((int)threadIdx.x) * 3) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 833) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 1) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9)) && ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 833) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 1) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 833) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 2) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9)) && ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 833) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 2) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 2646)] = (((((2 < (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 19)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 2050)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 2647)] = (((((2 <= (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 19)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 2051)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 2648)] = (((((1 < (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 18)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 2052)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 931) / 21) * 63) + (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) * 7)) + ((((int)threadIdx.x) * 3) % 7))] = (((((1 <= ((((((int)threadIdx.x) * 3) / 7) + 3) % 9)) && (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 931) / 21) * 49)) + (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) * 7)) + rx_outer_outer) + ((((int)threadIdx.x) * 3) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 931) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 1) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9)) && ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 931) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 1) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 931) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 2) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9)) && ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 931) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 2) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 980) / 21) * 63) + (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) * 7)) + ((((int)threadIdx.x) * 3) % 7))] = (((((1 <= ((((((int)threadIdx.x) * 3) / 7) + 6) % 9)) && (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 980) / 21) * 49)) + (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) * 7)) + rx_outer_outer) + ((((int)threadIdx.x) * 3) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 980) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 1) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9)) && ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 980) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 1) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 980) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 2) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9)) && ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 980) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 2) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 3087)] = (((((2 < (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 19)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 2393)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 3088)] = (((((2 <= (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 19)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 2394)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 3089)] = (((((1 < (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 18)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 2395)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 1078) / 21) * 63) + (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) * 7)) + ((((int)threadIdx.x) * 3) % 7))] = (((((1 <= ((((((int)threadIdx.x) * 3) / 7) + 3) % 9)) && (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 1078) / 21) * 49)) + (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) * 7)) + rx_outer_outer) + ((((int)threadIdx.x) * 3) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 1078) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 1) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9)) && ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 1078) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 1) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 1078) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 2) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9)) && ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 1078) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 2) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 1127) / 21) * 63) + (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) * 7)) + ((((int)threadIdx.x) * 3) % 7))] = (((((1 <= ((((((int)threadIdx.x) * 3) / 7) + 6) % 9)) && (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 1127) / 21) * 49)) + (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) * 7)) + rx_outer_outer) + ((((int)threadIdx.x) * 3) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 1127) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 1) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9)) && ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 1127) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 1) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 1127) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 2) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9)) && ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 1127) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 2) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 3528)] = (((((2 < (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 19)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 2736)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 3529)] = (((((2 <= (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 19)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 2737)] : 0.000000e+00f);
          pad_temp_shared[((((int)threadIdx.x) * 3) + 3530)] = (((((1 < (((int)threadIdx.x) % 21)) && ((((int)threadIdx.x) % 21) < 18)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[(((((rc_outer_outer * 3136) + ((((int)threadIdx.x) / 21) * 49)) + ((((int)threadIdx.x) % 21) * 3)) + rx_outer_outer) + 2738)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 1225) / 21) * 63) + (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) * 7)) + ((((int)threadIdx.x) * 3) % 7))] = (((((1 <= ((((((int)threadIdx.x) * 3) / 7) + 3) % 9)) && (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 1225) / 21) * 49)) + (((((((int)threadIdx.x) * 3) / 7) + 3) % 9) * 7)) + rx_outer_outer) + ((((int)threadIdx.x) * 3) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 1225) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 1) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9)) && ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 1225) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 3) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 1) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 1225) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 2) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9)) && ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 1225) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 3) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 2) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 1274) / 21) * 63) + (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) * 7)) + ((((int)threadIdx.x) * 3) % 7))] = (((((1 <= ((((((int)threadIdx.x) * 3) / 7) + 6) % 9)) && (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 1274) / 21) * 49)) + (((((((int)threadIdx.x) * 3) / 7) + 6) % 9) * 7)) + rx_outer_outer) + ((((int)threadIdx.x) * 3) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 1274) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 1) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9)) && ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 1274) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 1) / 7) + 6) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 1) % 7)) - 8)] : 0.000000e+00f);
          pad_temp_shared[(((((((int)threadIdx.x) + 1274) / 21) * 63) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) * 7)) + (((((int)threadIdx.x) * 3) + 2) % 7))] = (((((1 <= (((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9)) && ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) < 8)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[((((((rc_outer_outer * 3136) + (((((int)threadIdx.x) + 1274) / 21) * 49)) + ((((((((int)threadIdx.x) * 3) + 2) / 7) + 6) % 9) * 7)) + rx_outer_outer) + (((((int)threadIdx.x) * 3) + 2) % 7)) - 8)] : 0.000000e+00f);
          if (((int)threadIdx.x) < 21) {
            pad_temp_shared[((((int)threadIdx.x) * 3) + 3969)] = (((((2 < ((int)threadIdx.x)) && (((int)threadIdx.x) < 19)) && (1 <= (rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)))) && ((rx_outer_outer + ((((int)threadIdx.x) * 3) % 7)) < 8)) ? data[((((rc_outer_outer * 3136) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 3079)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 21) {
            pad_temp_shared[((((int)threadIdx.x) * 3) + 3970)] = (((((2 <= ((int)threadIdx.x)) && (((int)threadIdx.x) < 19)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 1) % 7)) < 8)) ? data[((((rc_outer_outer * 3136) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 3080)] : 0.000000e+00f);
          }
          if (((int)threadIdx.x) < 21) {
            pad_temp_shared[((((int)threadIdx.x) * 3) + 3971)] = (((((1 < ((int)threadIdx.x)) && (((int)threadIdx.x) < 18)) && (1 <= (rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)))) && ((rx_outer_outer + (((((int)threadIdx.x) * 3) + 2) % 7)) < 8)) ? data[((((rc_outer_outer * 3136) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 3081)] : 0.000000e+00f);
          }
          kernel_shared[((int)threadIdx.x)] = kernel[((((((int)blockIdx.x) * 36864) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 49)] = kernel[(((((((int)blockIdx.x) * 36864) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 49) / 3) * 9)) + (((((int)threadIdx.x) + 1) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 98)] = kernel[(((((((int)blockIdx.x) * 36864) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 98) / 3) * 9)) + (((((int)threadIdx.x) + 2) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 147)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 147) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) / 3) + 49) & 63) * 9)) + ((((int)threadIdx.x) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 196)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 196) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 4) / 3) * 9)) + (((((int)threadIdx.x) + 1) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 245)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 245) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 53) / 3) * 9)) + (((((int)threadIdx.x) + 2) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 294)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 294) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 306)];
          kernel_shared[(((int)threadIdx.x) + 343)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 343) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 151) % 192) / 3) * 9)) + (((((int)threadIdx.x) + 1) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 392)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 392) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 8) / 3) * 9)) + (((((int)threadIdx.x) + 2) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 441)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 441) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 171)];
          kernel_shared[(((int)threadIdx.x) + 490)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 490) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 106) / 3) * 9)) + (((((int)threadIdx.x) + 1) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 539)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 539) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 155) % 192) / 3) * 9)) + (((((int)threadIdx.x) + 2) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 588)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 588) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 36)];
          kernel_shared[(((int)threadIdx.x) + 637)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 637) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 61) / 3) * 9)) + (((((int)threadIdx.x) + 1) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 686)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 686) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 110) / 3) * 9)) + (((((int)threadIdx.x) + 2) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 735)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 735) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) / 3) + 53) & 63) * 9)) + ((((int)threadIdx.x) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 784)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 784) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 16) / 3) * 9)) + (((((int)threadIdx.x) + 1) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 833)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 833) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 65) / 3) * 9)) + (((((int)threadIdx.x) + 2) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 882)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 882) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 342)];
          kernel_shared[(((int)threadIdx.x) + 931)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 931) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 163) % 192) / 3) * 9)) + (((((int)threadIdx.x) + 1) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 980)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 980) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 20) / 3) * 9)) + (((((int)threadIdx.x) + 2) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 1029)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1029) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 207)];
          kernel_shared[(((int)threadIdx.x) + 1078)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1078) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 118) / 3) * 9)) + (((((int)threadIdx.x) + 1) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 1127)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1127) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) + 167) % 192) / 3) * 9)) + (((((int)threadIdx.x) + 2) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 1176)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1176) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 72)];
          kernel_shared[(((int)threadIdx.x) + 1225)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1225) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 73) / 3) * 9)) + (((((int)threadIdx.x) + 1) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 1274)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1274) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 122) / 3) * 9)) + (((((int)threadIdx.x) + 2) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 1323)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1323) / 192) * 4608)) + (rc_outer_outer * 576)) + ((((((int)threadIdx.x) / 3) + 57) & 63) * 9)) + ((((int)threadIdx.x) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 1372)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1372) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 28) / 3) * 9)) + (((((int)threadIdx.x) + 1) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 1421)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1421) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 77) / 3) * 9)) + (((((int)threadIdx.x) + 2) % 3) * 3)) + rx_outer_outer)];
          kernel_shared[(((int)threadIdx.x) + 1470)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1470) / 192) * 4608)) + (rc_outer_outer * 576)) + (((int)threadIdx.x) * 3)) + rx_outer_outer) + 378)];
          if (((int)threadIdx.x) < 17) {
            kernel_shared[(((int)threadIdx.x) + 1519)] = kernel[((((((((int)blockIdx.x) * 36864) + (((((int)threadIdx.x) + 1519) / 192) * 4608)) + (rc_outer_outer * 576)) + (((((int)threadIdx.x) + 175) / 3) * 9)) + (((((int)threadIdx.x) + 1) % 3) * 3)) + rx_outer_outer)];
          }
          __syncthreads();
          for (int rc_inner = 0; rc_inner < 64; ++rc_inner) {
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((rc_inner * 63) + ((int)threadIdx.x))] * kernel_shared[(rc_inner * 3)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[((rc_inner * 63) + ((int)threadIdx.x))] * kernel_shared[((rc_inner * 3) + 192)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[((rc_inner * 63) + ((int)threadIdx.x))] * kernel_shared[((rc_inner * 3) + 384)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[((rc_inner * 63) + ((int)threadIdx.x))] * kernel_shared[((rc_inner * 3) + 576)]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[((rc_inner * 63) + ((int)threadIdx.x))] * kernel_shared[((rc_inner * 3) + 768)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[((rc_inner * 63) + ((int)threadIdx.x))] * kernel_shared[((rc_inner * 3) + 960)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[((rc_inner * 63) + ((int)threadIdx.x))] * kernel_shared[((rc_inner * 3) + 1152)]));
            conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[((rc_inner * 63) + ((int)threadIdx.x))] * kernel_shared[((rc_inner * 3) + 1344)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((rc_inner * 63) + ((int)threadIdx.x)) + 7)] * kernel_shared[((rc_inner * 3) + 1)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((rc_inner * 63) + ((int)threadIdx.x)) + 7)] * kernel_shared[((rc_inner * 3) + 193)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((rc_inner * 63) + ((int)threadIdx.x)) + 7)] * kernel_shared[((rc_inner * 3) + 385)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((rc_inner * 63) + ((int)threadIdx.x)) + 7)] * kernel_shared[((rc_inner * 3) + 577)]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((rc_inner * 63) + ((int)threadIdx.x)) + 7)] * kernel_shared[((rc_inner * 3) + 769)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((rc_inner * 63) + ((int)threadIdx.x)) + 7)] * kernel_shared[((rc_inner * 3) + 961)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((rc_inner * 63) + ((int)threadIdx.x)) + 7)] * kernel_shared[((rc_inner * 3) + 1153)]));
            conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((rc_inner * 63) + ((int)threadIdx.x)) + 7)] * kernel_shared[((rc_inner * 3) + 1345)]));
            conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((rc_inner * 63) + ((int)threadIdx.x)) + 14)] * kernel_shared[((rc_inner * 3) + 2)]));
            conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((rc_inner * 63) + ((int)threadIdx.x)) + 14)] * kernel_shared[((rc_inner * 3) + 194)]));
            conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((rc_inner * 63) + ((int)threadIdx.x)) + 14)] * kernel_shared[((rc_inner * 3) + 386)]));
            conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((rc_inner * 63) + ((int)threadIdx.x)) + 14)] * kernel_shared[((rc_inner * 3) + 578)]));
            conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((rc_inner * 63) + ((int)threadIdx.x)) + 14)] * kernel_shared[((rc_inner * 3) + 770)]));
            conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((rc_inner * 63) + ((int)threadIdx.x)) + 14)] * kernel_shared[((rc_inner * 3) + 962)]));
            conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((rc_inner * 63) + ((int)threadIdx.x)) + 14)] * kernel_shared[((rc_inner * 3) + 1154)]));
            conv2d_nchw[7] = (conv2d_nchw[7] + (pad_temp_shared[(((rc_inner * 63) + ((int)threadIdx.x)) + 14)] * kernel_shared[((rc_inner * 3) + 1346)]));
          }
        }
      }
      for (int i1_inner = 0; i1_inner < 8; ++i1_inner) {
        compute[(((((int)blockIdx.x) * 392) + (i1_inner * 49)) + ((int)threadIdx.x))] = max((conv2d_nchw[i1_inner] + bias[((((int)blockIdx.x) * 8) + i1_inner)]), 0.000000e+00f);
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 191-195

A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.

.. GENERATED FROM PYTHON SOURCE LINES 195-217

.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resume search:
    /venv/apache-tvm-py3.7/lib/python3.7/site-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  29.809 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
