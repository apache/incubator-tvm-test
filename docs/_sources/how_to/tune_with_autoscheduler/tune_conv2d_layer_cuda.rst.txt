
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.

.. GENERATED FROM PYTHON SOURCE LINES 39-48

.. code-block:: default



    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python








.. GENERATED FROM PYTHON SOURCE LINES 54-59

Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.

.. GENERATED FROM PYTHON SOURCE LINES 59-71

.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]









.. GENERATED FROM PYTHON SOURCE LINES 72-75

Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.

.. GENERATED FROM PYTHON SOURCE LINES 75-88

.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)





.. GENERATED FROM PYTHON SOURCE LINES 89-106

Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the main process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.

.. GENERATED FROM PYTHON SOURCE LINES 106-116

.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Get devices for measurement successfully!




.. GENERATED FROM PYTHON SOURCE LINES 117-123

Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.

.. GENERATED FROM PYTHON SOURCE LINES 123-132

.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx








.. GENERATED FROM PYTHON SOURCE LINES 133-136

We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.

.. GENERATED FROM PYTHON SOURCE LINES 136-140

.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Lowered TIR:
    @main = primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {data: Buffer(data_2: Pointer(float32), float32, [25088], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [2359296], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [512], []),
                 compute: Buffer(compute_2: Pointer(float32), float32, [25088], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute}
      preflattened_buffer_map = {data_1: data_3: Buffer(data_2, float32, [1, 512, 7, 7], []), kernel_1: kernel_3: Buffer(kernel_2, float32, [512, 512, 3, 3], []), bias_1: bias_3: Buffer(bias_2, float32, [1, 512, 1, 1], []), compute_1: compute_3: Buffer(compute_2, float32, [1, 512, 7, 7], [])} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 8;
      allocate(conv2d_nchw: Pointer(local float32), float32, [7]), storage_scope = local;
      allocate(pad_temp.shared: Pointer(shared float32), float32, [648]), storage_scope = shared;
      allocate(kernel.shared: Pointer(shared float32), float32, [4608]), storage_scope = shared;
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 448 {
        conv2d_nchw_1: Buffer(conv2d_nchw, float32, [1], [], scope="local", align=4)[0] = 0f32
        conv2d_nchw_1[1] = 0f32
        conv2d_nchw_1[2] = 0f32
        conv2d_nchw_1[3] = 0f32
        conv2d_nchw_1[4] = 0f32
        conv2d_nchw_1[5] = 0f32
        conv2d_nchw_1[6] = 0f32
        for (rc.outer.outer: int32, 0, 64) {
          let cse_var_1: int32 = (rc.outer.outer*72)
           {
            attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 448;
            pad_temp.shared_1: Buffer(pad_temp.shared, float32, [648], [], scope="shared")[threadIdx.x_1] = @tir.if_then_else(((((9 <= floormod(threadIdx.x_1, 81)) && (floormod(threadIdx.x_1, 81) < 72)) && (1 <= floormod(threadIdx.x_1, 9))) && (floormod(threadIdx.x_1, 9) < 8)), data[(((((rc.outer.outer*392) + (floordiv(threadIdx.x_1, 81)*49)) + (floordiv(floormod(threadIdx.x_1, 81), 9)*7)) + floormod(threadIdx.x_1, 9)) - 8)], 0f32, dtype=float32)
            attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 448;
            if @tir.likely((threadIdx.x_1 < 200), dtype=bool) {
              pad_temp.shared_1[(threadIdx.x_1 + 448)] = @tir.if_then_else(((((9 <= floormod((threadIdx.x_1 + 43), 81)) && (floormod((threadIdx.x_1 + 43), 81) < 72)) && (1 <= floormod((threadIdx.x_1 + 7), 9))) && (floormod((threadIdx.x_1 + 7), 9) < 8)), data[(((((rc.outer.outer*392) + (floordiv((threadIdx.x_1 + 448), 81)*49)) + (floordiv(floormod((threadIdx.x_1 + 43), 81), 9)*7)) + floormod((threadIdx.x_1 + 7), 9)) - 8)], 0f32, dtype=float32)
            }
            attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 448;
            kernel.shared_1: Buffer(kernel.shared, float32, [4608], [], scope="shared")[threadIdx.x_2] = kernel[((((blockIdx.x*294912) + (floordiv(threadIdx.x_2, 72)*4608)) + cse_var_1) + floormod(threadIdx.x_2, 72))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 448;
            kernel.shared_1[(threadIdx.x_2 + 448)] = kernel[((((((blockIdx.x*294912) + (floordiv((threadIdx.x_2 + 448), 72)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 16), 72), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 7), 9), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 448;
            kernel.shared_1[(threadIdx.x_2 + 896)] = kernel[((((((blockIdx.x*294912) + (floordiv((threadIdx.x_2 + 896), 72)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 32), 72), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 5), 9), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 448;
            kernel.shared_1[(threadIdx.x_2 + 1344)] = kernel[((((((blockIdx.x*294912) + (floordiv((threadIdx.x_2 + 1344), 72)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 48), 72), 9)*9)) + (floormod((floordiv(threadIdx.x_2, 3) + 1), 3)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 448;
            kernel.shared_1[(threadIdx.x_2 + 1792)] = kernel[(((((blockIdx.x*294912) + (floordiv((threadIdx.x_2 + 1792), 72)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 64), 72), 9)*9)) + floormod((threadIdx.x_2 + 1), 9))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 448;
            kernel.shared_1[(threadIdx.x_2 + 2240)] = kernel[(((((blockIdx.x*294912) + (floordiv((threadIdx.x_2 + 2240), 72)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 8), 72), 3)*3)) + floormod((threadIdx.x_2 + 2), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 448;
            kernel.shared_1[(threadIdx.x_2 + 2688)] = kernel[((((((blockIdx.x*294912) + (floordiv((threadIdx.x_2 + 2688), 72)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 24), 72), 9)*9)) + (floormod((floordiv(threadIdx.x_2, 3) + 2), 3)*3)) + floormod(threadIdx.x_2, 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 448;
            kernel.shared_1[(threadIdx.x_2 + 3136)] = kernel[((((((blockIdx.x*294912) + (floordiv((threadIdx.x_2 + 3136), 72)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 40), 72), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 4), 9), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 448;
            kernel.shared_1[(threadIdx.x_2 + 3584)] = kernel[(((((blockIdx.x*294912) + (floordiv((threadIdx.x_2 + 3584), 72)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 56), 72), 9)*9)) + floormod((threadIdx.x_2 + 2), 9))]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 448;
            kernel.shared_1[(threadIdx.x_2 + 4032)] = kernel[(((((blockIdx.x*294912) + (floordiv(threadIdx.x_2, 72)*4608)) + cse_var_1) + floormod(threadIdx.x_2, 72)) + 258048)]
            attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 448;
            if @tir.likely((threadIdx.x_2 < 128), dtype=bool) {
              kernel.shared_1[(threadIdx.x_2 + 4480)] = kernel[((((((blockIdx.x*294912) + (floordiv((threadIdx.x_2 + 4480), 72)*4608)) + cse_var_1) + (floordiv(floormod((threadIdx.x_2 + 16), 72), 9)*9)) + (floordiv(floormod((threadIdx.x_2 + 7), 9), 3)*3)) + floormod((threadIdx.x_2 + 1), 3))]
            }
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[(floormod(threadIdx.x, 7)*9)]*kernel.shared_1[(floordiv(threadIdx.x, 7)*72)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 1)]*kernel.shared_1[(floordiv(threadIdx.x, 7)*72)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 2)]*kernel.shared_1[(floordiv(threadIdx.x, 7)*72)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 3)]*kernel.shared_1[(floordiv(threadIdx.x, 7)*72)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 4)]*kernel.shared_1[(floordiv(threadIdx.x, 7)*72)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 5)]*kernel.shared_1[(floordiv(threadIdx.x, 7)*72)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 6)]*kernel.shared_1[(floordiv(threadIdx.x, 7)*72)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 9)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 3)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 10)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 3)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 11)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 3)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 12)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 3)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 13)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 3)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 3)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 15)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 3)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 18)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 6)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 19)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 6)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 20)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 6)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 6)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 22)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 6)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 23)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 6)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 24)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 6)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 81)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 9)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 82)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 9)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 83)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 9)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 9)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 85)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 9)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 86)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 9)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 87)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 9)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 90)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 12)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 12)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 92)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 12)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 93)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 12)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 94)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 12)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 95)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 12)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 96)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 12)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 99)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 15)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 100)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 15)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 101)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 15)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 102)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 15)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 103)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 15)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 104)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 15)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 15)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 162)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 18)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 163)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 18)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 164)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 18)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 165)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 18)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 166)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 18)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 167)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 18)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 168)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 18)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 171)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 21)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 172)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 21)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 173)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 21)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 174)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 21)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 175)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 21)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 176)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 21)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 177)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 21)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 180)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 24)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 181)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 24)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 182)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 24)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 183)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 24)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 184)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 24)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 185)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 24)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 186)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 24)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 243)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 27)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 244)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 27)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 245)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 27)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 246)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 27)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 247)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 27)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 248)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 27)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 249)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 27)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 252)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 30)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 253)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 30)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 254)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 30)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 255)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 30)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 256)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 30)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 257)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 30)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 258)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 30)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 261)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 33)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 262)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 33)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 263)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 33)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 264)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 33)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 265)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 33)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 266)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 33)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 267)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 33)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 1)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 1)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 2)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 1)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 3)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 1)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 4)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 1)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 5)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 1)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 6)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 1)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 1)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 10)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 4)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 11)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 4)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 12)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 4)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 13)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 4)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 4)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 15)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 4)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 16)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 4)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 19)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 7)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 20)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 7)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 7)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 22)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 7)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 23)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 7)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 24)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 7)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 25)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 7)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 82)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 10)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 83)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 10)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 10)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 85)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 10)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 86)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 10)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 87)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 10)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 88)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 10)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 91)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 13)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 92)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 13)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 93)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 13)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 94)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 13)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 95)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 13)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 96)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 13)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 97)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 13)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 100)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 16)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 101)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 16)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 102)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 16)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 103)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 16)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 104)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 16)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 16)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 106)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 16)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 163)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 19)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 164)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 19)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 165)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 19)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 166)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 19)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 167)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 19)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 168)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 19)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 169)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 19)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 172)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 22)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 173)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 22)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 174)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 22)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 175)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 22)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 176)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 22)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 177)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 22)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 178)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 22)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 181)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 25)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 182)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 25)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 183)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 25)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 184)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 25)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 185)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 25)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 186)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 25)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 187)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 25)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 244)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 28)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 245)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 28)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 246)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 28)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 247)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 28)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 248)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 28)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 249)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 28)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 250)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 28)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 253)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 31)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 254)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 31)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 255)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 31)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 256)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 31)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 257)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 31)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 258)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 31)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 259)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 31)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 262)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 34)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 263)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 34)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 264)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 34)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 265)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 34)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 266)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 34)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 267)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 34)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 268)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 34)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 2)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 2)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 3)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 2)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 4)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 2)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 5)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 2)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 6)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 2)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 7)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 2)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 8)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 2)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 11)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 5)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 12)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 5)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 13)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 5)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 14)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 5)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 15)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 5)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 16)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 5)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 17)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 5)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 20)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 8)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 21)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 8)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 22)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 8)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 23)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 8)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 24)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 8)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 25)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 8)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 26)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 8)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 83)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 11)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 84)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 11)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 85)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 11)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 86)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 11)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 87)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 11)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 88)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 11)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 89)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 11)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 92)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 14)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 93)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 14)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 94)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 14)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 95)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 14)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 96)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 14)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 97)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 14)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 98)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 14)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 101)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 17)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 102)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 17)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 103)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 17)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 104)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 17)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 105)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 17)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 106)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 17)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 107)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 17)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 164)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 20)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 165)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 20)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 166)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 20)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 167)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 20)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 168)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 20)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 169)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 20)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 170)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 20)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 173)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 23)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 174)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 23)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 175)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 23)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 176)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 23)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 177)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 23)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 178)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 23)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 179)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 23)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 182)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 26)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 183)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 26)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 184)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 26)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 185)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 26)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 186)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 26)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 187)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 26)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 188)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 26)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 245)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 29)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 246)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 29)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 247)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 29)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 248)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 29)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 249)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 29)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 250)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 29)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 251)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 29)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 254)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 32)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 255)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 32)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 256)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 32)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 257)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 32)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 258)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 32)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 259)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 32)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 260)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 32)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 263)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 35)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 264)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 35)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 265)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 35)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 266)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 35)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 267)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 35)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 268)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 35)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 269)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 35)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 324)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 36)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 325)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 36)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 326)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 36)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 327)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 36)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 328)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 36)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 329)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 36)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 330)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 36)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 333)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 39)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 334)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 39)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 335)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 39)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 336)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 39)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 337)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 39)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 338)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 39)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 339)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 39)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 342)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 42)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 343)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 42)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 344)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 42)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 345)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 42)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 346)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 42)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 347)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 42)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 348)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 42)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 405)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 45)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 406)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 45)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 407)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 45)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 408)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 45)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 409)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 45)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 410)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 45)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 411)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 45)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 414)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 48)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 415)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 48)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 416)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 48)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 417)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 48)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 418)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 48)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 419)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 48)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 420)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 48)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 423)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 51)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 424)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 51)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 425)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 51)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 426)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 51)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 427)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 51)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 428)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 51)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 429)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 51)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 486)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 54)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 487)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 54)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 488)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 54)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 489)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 54)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 490)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 54)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 491)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 54)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 492)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 54)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 495)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 57)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 496)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 57)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 497)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 57)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 498)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 57)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 499)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 57)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 500)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 57)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 501)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 57)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 504)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 60)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 505)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 60)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 506)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 60)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 507)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 60)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 508)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 60)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 509)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 60)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 510)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 60)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 567)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 63)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 568)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 63)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 569)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 63)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 570)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 63)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 571)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 63)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 572)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 63)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 573)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 63)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 576)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 66)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 577)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 66)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 578)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 66)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 579)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 66)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 580)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 66)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 581)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 66)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 582)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 66)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 585)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 69)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 586)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 69)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 587)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 69)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 588)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 69)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 589)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 69)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 590)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 69)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 591)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 69)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 325)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 37)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 326)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 37)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 327)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 37)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 328)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 37)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 329)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 37)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 330)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 37)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 331)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 37)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 334)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 40)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 335)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 40)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 336)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 40)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 337)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 40)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 338)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 40)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 339)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 40)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 340)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 40)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 343)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 43)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 344)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 43)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 345)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 43)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 346)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 43)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 347)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 43)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 348)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 43)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 349)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 43)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 406)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 46)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 407)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 46)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 408)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 46)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 409)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 46)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 410)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 46)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 411)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 46)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 412)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 46)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 415)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 49)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 416)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 49)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 417)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 49)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 418)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 49)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 419)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 49)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 420)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 49)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 421)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 49)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 424)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 52)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 425)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 52)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 426)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 52)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 427)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 52)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 428)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 52)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 429)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 52)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 430)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 52)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 487)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 55)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 488)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 55)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 489)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 55)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 490)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 55)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 491)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 55)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 492)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 55)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 493)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 55)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 496)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 58)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 497)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 58)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 498)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 58)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 499)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 58)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 500)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 58)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 501)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 58)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 502)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 58)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 505)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 61)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 506)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 61)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 507)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 61)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 508)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 61)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 509)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 61)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 510)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 61)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 511)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 61)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 568)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 64)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 569)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 64)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 570)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 64)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 571)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 64)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 572)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 64)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 573)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 64)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 574)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 64)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 577)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 67)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 578)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 67)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 579)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 67)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 580)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 67)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 581)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 67)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 582)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 67)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 583)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 67)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 586)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 70)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 587)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 70)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 588)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 70)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 589)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 70)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 590)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 70)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 591)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 70)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 592)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 70)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 326)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 38)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 327)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 38)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 328)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 38)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 329)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 38)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 330)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 38)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 331)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 38)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 332)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 38)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 335)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 41)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 336)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 41)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 337)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 41)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 338)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 41)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 339)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 41)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 340)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 41)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 341)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 41)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 344)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 44)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 345)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 44)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 346)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 44)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 347)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 44)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 348)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 44)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 349)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 44)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 350)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 44)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 407)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 47)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 408)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 47)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 409)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 47)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 410)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 47)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 411)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 47)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 412)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 47)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 413)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 47)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 416)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 50)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 417)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 50)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 418)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 50)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 419)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 50)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 420)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 50)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 421)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 50)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 422)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 50)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 425)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 53)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 426)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 53)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 427)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 53)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 428)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 53)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 429)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 53)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 430)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 53)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 431)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 53)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 488)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 56)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 489)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 56)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 490)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 56)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 491)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 56)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 492)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 56)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 493)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 56)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 494)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 56)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 497)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 59)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 498)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 59)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 499)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 59)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 500)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 59)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 501)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 59)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 502)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 59)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 503)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 59)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 506)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 62)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 507)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 62)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 508)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 62)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 509)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 62)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 510)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 62)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 511)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 62)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 512)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 62)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 569)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 65)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 570)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 65)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 571)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 65)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 572)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 65)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 573)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 65)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 574)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 65)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 575)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 65)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 578)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 68)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 579)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 68)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 580)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 68)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 581)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 68)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 582)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 68)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 583)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 68)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 584)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 68)]))
            conv2d_nchw_1[0] = (conv2d_nchw_1[0] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 587)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 71)]))
            conv2d_nchw_1[1] = (conv2d_nchw_1[1] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 588)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 71)]))
            conv2d_nchw_1[2] = (conv2d_nchw_1[2] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 589)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 71)]))
            conv2d_nchw_1[3] = (conv2d_nchw_1[3] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 590)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 71)]))
            conv2d_nchw_1[4] = (conv2d_nchw_1[4] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 591)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 71)]))
            conv2d_nchw_1[5] = (conv2d_nchw_1[5] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 592)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 71)]))
            conv2d_nchw_1[6] = (conv2d_nchw_1[6] + (pad_temp.shared_1[((floormod(threadIdx.x, 7)*9) + 593)]*kernel.shared_1[((floordiv(threadIdx.x, 7)*72) + 71)]))
          }
        }
        compute[((blockIdx.x*3136) + (threadIdx.x*7))] = max((conv2d_nchw_1[0] + bias[((blockIdx.x*64) + floordiv(threadIdx.x, 7))]), 0f32)
        compute[(((blockIdx.x*3136) + (threadIdx.x*7)) + 1)] = max((conv2d_nchw_1[1] + bias[((blockIdx.x*64) + floordiv(threadIdx.x, 7))]), 0f32)
        compute[(((blockIdx.x*3136) + (threadIdx.x*7)) + 2)] = max((conv2d_nchw_1[2] + bias[((blockIdx.x*64) + floordiv(threadIdx.x, 7))]), 0f32)
        compute[(((blockIdx.x*3136) + (threadIdx.x*7)) + 3)] = max((conv2d_nchw_1[3] + bias[((blockIdx.x*64) + floordiv(threadIdx.x, 7))]), 0f32)
        compute[(((blockIdx.x*3136) + (threadIdx.x*7)) + 4)] = max((conv2d_nchw_1[4] + bias[((blockIdx.x*64) + floordiv(threadIdx.x, 7))]), 0f32)
        compute[(((blockIdx.x*3136) + (threadIdx.x*7)) + 5)] = max((conv2d_nchw_1[5] + bias[((blockIdx.x*64) + floordiv(threadIdx.x, 7))]), 0f32)
        compute[(((blockIdx.x*3136) + (threadIdx.x*7)) + 6)] = max((conv2d_nchw_1[6] + bias[((blockIdx.x*64) + floordiv(threadIdx.x, 7))]), 0f32)
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 141-144

Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.

.. GENERATED FROM PYTHON SOURCE LINES 144-171

.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Execution time of this operator: 0.412 ms




.. GENERATED FROM PYTHON SOURCE LINES 172-177

Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

.. GENERATED FROM PYTHON SOURCE LINES 179-182

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.

.. GENERATED FROM PYTHON SOURCE LINES 182-189

.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=1)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=1)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=64)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=1)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=1)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=7)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=7)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=4)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=2)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=3)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=1)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=1)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=3)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=1)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=64)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=7)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=1)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=7)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=448)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=448)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 512)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(448) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[7];
      __shared__ float pad_temp_shared[648];
      __shared__ float kernel_shared[4608];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      conv2d_nchw[4] = 0.000000e+00f;
      conv2d_nchw[5] = 0.000000e+00f;
      conv2d_nchw[6] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 64; ++rc_outer_outer) {
        __syncthreads();
        pad_temp_shared[((int)threadIdx.x)] = (((((9 <= (((int)threadIdx.x) % 81)) && ((((int)threadIdx.x) % 81) < 72)) && (1 <= (((int)threadIdx.x) % 9))) && ((((int)threadIdx.x) % 9) < 8)) ? data[(((((rc_outer_outer * 392) + ((((int)threadIdx.x) / 81) * 49)) + (((((int)threadIdx.x) % 81) / 9) * 7)) + (((int)threadIdx.x) % 9)) - 8)] : 0.000000e+00f);
        if (((int)threadIdx.x) < 200) {
          pad_temp_shared[(((int)threadIdx.x) + 448)] = (((((9 <= ((((int)threadIdx.x) + 43) % 81)) && (((((int)threadIdx.x) + 43) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 7) % 9))) && (((((int)threadIdx.x) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 392) + (((((int)threadIdx.x) + 448) / 81) * 49)) + ((((((int)threadIdx.x) + 43) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 7) % 9)) - 8)] : 0.000000e+00f);
        }
        kernel_shared[((int)threadIdx.x)] = kernel[((((((int)blockIdx.x) * 294912) + ((((int)threadIdx.x) / 72) * 4608)) + (rc_outer_outer * 72)) + (((int)threadIdx.x) % 72))];
        kernel_shared[(((int)threadIdx.x) + 448)] = kernel[((((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 448) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) + 16) % 72) / 9) * 9)) + ((((((int)threadIdx.x) + 7) % 9) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 896)] = kernel[((((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 896) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) + 32) % 72) / 9) * 9)) + ((((((int)threadIdx.x) + 5) % 9) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1344)] = kernel[((((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 1344) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) + 48) % 72) / 9) * 9)) + ((((((int)threadIdx.x) / 3) + 1) % 3) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 1792)] = kernel[(((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 1792) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) + 64) % 72) / 9) * 9)) + ((((int)threadIdx.x) + 1) % 9))];
        kernel_shared[(((int)threadIdx.x) + 2240)] = kernel[(((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 2240) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) + 8) % 72) / 3) * 3)) + ((((int)threadIdx.x) + 2) % 3))];
        kernel_shared[(((int)threadIdx.x) + 2688)] = kernel[((((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 2688) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) + 24) % 72) / 9) * 9)) + ((((((int)threadIdx.x) / 3) + 2) % 3) * 3)) + (((int)threadIdx.x) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3136)] = kernel[((((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 3136) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) + 40) % 72) / 9) * 9)) + ((((((int)threadIdx.x) + 4) % 9) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        kernel_shared[(((int)threadIdx.x) + 3584)] = kernel[(((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 3584) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) + 56) % 72) / 9) * 9)) + ((((int)threadIdx.x) + 2) % 9))];
        kernel_shared[(((int)threadIdx.x) + 4032)] = kernel[(((((((int)blockIdx.x) * 294912) + ((((int)threadIdx.x) / 72) * 4608)) + (rc_outer_outer * 72)) + (((int)threadIdx.x) % 72)) + 258048)];
        if (((int)threadIdx.x) < 128) {
          kernel_shared[(((int)threadIdx.x) + 4480)] = kernel[((((((((int)blockIdx.x) * 294912) + (((((int)threadIdx.x) + 4480) / 72) * 4608)) + (rc_outer_outer * 72)) + ((((((int)threadIdx.x) + 16) % 72) / 9) * 9)) + ((((((int)threadIdx.x) + 7) % 9) / 3) * 3)) + ((((int)threadIdx.x) + 1) % 3))];
        }
        __syncthreads();
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[((((int)threadIdx.x) % 7) * 9)] * kernel_shared[((((int)threadIdx.x) / 7) * 72)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 1)] * kernel_shared[((((int)threadIdx.x) / 7) * 72)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 2)] * kernel_shared[((((int)threadIdx.x) / 7) * 72)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 3)] * kernel_shared[((((int)threadIdx.x) / 7) * 72)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 4)] * kernel_shared[((((int)threadIdx.x) / 7) * 72)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 5)] * kernel_shared[((((int)threadIdx.x) / 7) * 72)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 6)] * kernel_shared[((((int)threadIdx.x) / 7) * 72)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 9)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 3)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 10)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 3)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 11)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 3)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 12)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 3)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 13)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 3)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 3)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 15)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 3)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 18)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 6)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 19)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 6)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 20)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 6)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 6)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 22)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 6)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 23)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 6)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 24)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 6)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 81)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 9)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 82)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 9)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 83)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 9)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 9)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 85)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 9)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 86)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 9)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 87)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 9)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 90)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 12)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 12)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 92)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 12)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 93)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 12)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 94)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 12)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 95)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 12)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 96)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 12)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 99)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 15)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 100)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 15)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 101)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 15)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 102)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 15)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 103)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 15)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 104)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 15)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 15)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 162)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 18)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 163)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 18)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 164)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 18)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 165)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 18)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 166)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 18)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 167)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 18)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 168)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 18)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 171)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 21)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 172)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 21)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 173)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 21)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 174)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 21)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 175)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 21)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 176)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 21)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 177)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 21)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 180)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 24)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 181)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 24)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 182)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 24)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 183)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 24)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 184)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 24)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 185)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 24)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 186)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 24)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 243)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 27)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 244)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 27)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 245)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 27)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 246)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 27)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 247)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 27)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 248)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 27)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 249)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 27)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 252)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 30)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 253)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 30)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 254)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 30)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 255)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 30)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 256)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 30)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 257)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 30)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 258)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 30)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 261)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 33)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 262)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 33)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 263)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 33)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 264)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 33)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 265)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 33)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 266)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 33)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 267)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 33)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 1)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 1)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 2)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 1)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 3)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 1)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 4)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 1)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 5)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 1)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 6)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 1)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 1)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 10)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 4)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 11)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 4)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 12)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 4)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 13)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 4)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 4)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 15)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 4)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 16)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 4)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 19)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 7)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 20)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 7)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 7)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 22)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 7)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 23)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 7)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 24)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 7)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 25)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 7)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 82)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 10)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 83)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 10)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 10)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 85)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 10)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 86)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 10)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 87)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 10)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 88)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 10)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 91)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 13)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 92)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 13)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 93)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 13)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 94)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 13)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 95)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 13)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 96)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 13)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 97)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 13)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 100)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 16)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 101)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 16)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 102)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 16)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 103)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 16)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 104)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 16)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 16)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 106)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 16)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 163)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 19)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 164)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 19)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 165)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 19)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 166)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 19)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 167)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 19)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 168)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 19)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 169)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 19)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 172)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 22)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 173)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 22)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 174)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 22)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 175)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 22)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 176)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 22)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 177)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 22)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 178)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 22)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 181)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 25)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 182)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 25)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 183)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 25)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 184)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 25)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 185)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 25)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 186)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 25)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 187)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 25)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 244)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 28)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 245)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 28)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 246)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 28)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 247)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 28)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 248)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 28)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 249)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 28)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 250)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 28)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 253)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 31)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 254)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 31)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 255)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 31)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 256)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 31)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 257)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 31)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 258)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 31)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 259)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 31)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 262)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 34)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 263)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 34)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 264)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 34)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 265)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 34)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 266)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 34)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 267)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 34)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 268)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 34)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 2)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 2)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 3)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 2)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 4)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 2)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 5)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 2)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 6)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 2)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 7)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 2)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 8)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 2)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 11)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 5)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 12)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 5)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 13)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 5)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 14)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 5)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 15)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 5)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 16)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 5)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 17)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 5)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 20)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 8)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 21)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 8)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 22)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 8)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 23)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 8)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 24)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 8)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 25)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 8)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 26)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 8)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 83)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 11)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 84)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 11)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 85)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 11)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 86)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 11)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 87)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 11)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 88)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 11)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 89)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 11)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 92)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 14)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 93)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 14)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 94)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 14)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 95)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 14)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 96)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 14)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 97)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 14)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 98)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 14)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 101)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 17)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 102)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 17)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 103)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 17)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 104)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 17)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 105)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 17)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 106)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 17)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 107)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 17)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 164)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 20)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 165)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 20)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 166)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 20)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 167)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 20)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 168)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 20)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 169)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 20)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 170)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 20)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 173)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 23)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 174)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 23)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 175)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 23)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 176)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 23)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 177)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 23)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 178)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 23)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 179)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 23)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 182)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 26)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 183)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 26)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 184)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 26)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 185)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 26)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 186)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 26)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 187)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 26)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 188)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 26)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 245)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 29)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 246)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 29)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 247)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 29)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 248)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 29)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 249)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 29)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 250)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 29)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 251)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 29)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 254)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 32)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 255)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 32)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 256)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 32)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 257)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 32)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 258)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 32)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 259)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 32)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 260)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 32)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 263)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 35)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 264)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 35)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 265)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 35)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 266)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 35)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 267)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 35)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 268)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 35)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 269)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 35)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 324)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 36)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 325)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 36)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 326)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 36)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 327)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 36)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 328)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 36)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 329)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 36)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 330)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 36)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 333)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 39)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 334)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 39)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 335)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 39)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 336)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 39)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 337)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 39)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 338)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 39)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 339)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 39)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 342)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 42)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 343)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 42)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 344)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 42)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 345)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 42)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 346)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 42)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 347)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 42)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 348)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 42)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 405)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 45)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 406)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 45)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 407)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 45)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 408)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 45)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 409)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 45)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 410)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 45)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 411)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 45)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 414)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 48)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 415)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 48)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 416)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 48)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 417)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 48)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 418)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 48)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 419)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 48)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 420)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 48)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 423)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 51)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 424)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 51)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 425)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 51)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 426)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 51)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 427)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 51)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 428)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 51)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 429)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 51)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 486)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 54)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 487)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 54)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 488)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 54)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 489)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 54)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 490)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 54)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 491)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 54)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 492)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 54)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 495)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 57)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 496)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 57)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 497)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 57)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 498)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 57)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 499)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 57)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 500)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 57)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 501)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 57)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 504)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 60)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 505)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 60)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 506)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 60)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 507)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 60)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 508)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 60)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 509)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 60)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 510)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 60)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 567)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 63)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 568)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 63)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 569)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 63)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 570)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 63)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 571)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 63)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 572)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 63)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 573)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 63)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 576)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 66)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 577)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 66)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 578)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 66)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 579)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 66)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 580)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 66)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 581)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 66)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 582)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 66)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 585)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 69)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 586)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 69)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 587)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 69)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 588)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 69)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 589)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 69)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 590)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 69)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 591)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 69)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 325)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 37)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 326)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 37)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 327)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 37)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 328)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 37)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 329)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 37)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 330)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 37)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 331)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 37)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 334)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 40)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 335)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 40)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 336)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 40)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 337)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 40)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 338)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 40)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 339)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 40)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 340)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 40)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 343)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 43)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 344)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 43)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 345)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 43)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 346)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 43)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 347)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 43)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 348)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 43)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 349)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 43)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 406)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 46)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 407)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 46)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 408)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 46)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 409)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 46)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 410)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 46)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 411)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 46)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 412)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 46)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 415)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 49)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 416)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 49)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 417)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 49)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 418)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 49)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 419)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 49)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 420)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 49)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 421)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 49)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 424)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 52)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 425)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 52)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 426)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 52)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 427)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 52)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 428)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 52)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 429)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 52)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 430)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 52)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 487)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 55)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 488)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 55)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 489)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 55)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 490)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 55)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 491)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 55)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 492)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 55)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 493)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 55)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 496)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 58)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 497)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 58)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 498)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 58)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 499)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 58)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 500)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 58)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 501)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 58)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 502)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 58)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 505)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 61)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 506)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 61)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 507)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 61)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 508)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 61)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 509)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 61)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 510)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 61)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 511)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 61)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 568)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 64)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 569)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 64)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 570)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 64)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 571)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 64)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 572)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 64)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 573)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 64)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 574)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 64)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 577)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 67)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 578)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 67)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 579)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 67)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 580)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 67)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 581)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 67)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 582)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 67)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 583)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 67)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 586)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 70)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 587)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 70)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 588)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 70)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 589)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 70)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 590)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 70)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 591)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 70)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 592)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 70)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 326)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 38)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 327)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 38)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 328)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 38)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 329)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 38)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 330)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 38)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 331)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 38)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 332)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 38)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 335)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 41)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 336)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 41)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 337)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 41)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 338)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 41)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 339)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 41)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 340)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 41)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 341)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 41)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 344)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 44)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 345)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 44)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 346)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 44)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 347)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 44)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 348)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 44)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 349)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 44)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 350)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 44)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 407)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 47)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 408)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 47)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 409)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 47)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 410)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 47)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 411)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 47)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 412)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 47)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 413)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 47)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 416)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 50)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 417)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 50)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 418)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 50)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 419)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 50)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 420)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 50)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 421)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 50)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 422)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 50)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 425)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 53)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 426)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 53)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 427)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 53)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 428)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 53)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 429)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 53)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 430)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 53)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 431)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 53)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 488)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 56)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 489)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 56)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 490)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 56)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 491)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 56)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 492)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 56)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 493)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 56)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 494)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 56)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 497)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 59)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 498)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 59)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 499)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 59)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 500)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 59)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 501)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 59)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 502)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 59)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 503)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 59)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 506)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 62)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 507)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 62)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 508)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 62)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 509)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 62)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 510)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 62)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 511)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 62)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 512)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 62)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 569)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 65)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 570)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 65)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 571)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 65)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 572)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 65)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 573)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 65)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 574)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 65)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 575)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 65)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 578)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 68)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 579)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 68)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 580)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 68)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 581)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 68)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 582)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 68)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 583)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 68)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 584)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 68)]));
        conv2d_nchw[0] = (conv2d_nchw[0] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 587)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 71)]));
        conv2d_nchw[1] = (conv2d_nchw[1] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 588)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 71)]));
        conv2d_nchw[2] = (conv2d_nchw[2] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 589)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 71)]));
        conv2d_nchw[3] = (conv2d_nchw[3] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 590)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 71)]));
        conv2d_nchw[4] = (conv2d_nchw[4] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 591)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 71)]));
        conv2d_nchw[5] = (conv2d_nchw[5] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 592)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 71)]));
        conv2d_nchw[6] = (conv2d_nchw[6] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 9) + 593)] * kernel_shared[(((((int)threadIdx.x) / 7) * 72) + 71)]));
      }
      compute[((((int)blockIdx.x) * 3136) + (((int)threadIdx.x) * 7))] = max((conv2d_nchw[0] + bias[((((int)blockIdx.x) * 64) + (((int)threadIdx.x) / 7))]), 0.000000e+00f);
      compute[(((((int)blockIdx.x) * 3136) + (((int)threadIdx.x) * 7)) + 1)] = max((conv2d_nchw[1] + bias[((((int)blockIdx.x) * 64) + (((int)threadIdx.x) / 7))]), 0.000000e+00f);
      compute[(((((int)blockIdx.x) * 3136) + (((int)threadIdx.x) * 7)) + 2)] = max((conv2d_nchw[2] + bias[((((int)blockIdx.x) * 64) + (((int)threadIdx.x) / 7))]), 0.000000e+00f);
      compute[(((((int)blockIdx.x) * 3136) + (((int)threadIdx.x) * 7)) + 3)] = max((conv2d_nchw[3] + bias[((((int)blockIdx.x) * 64) + (((int)threadIdx.x) / 7))]), 0.000000e+00f);
      compute[(((((int)blockIdx.x) * 3136) + (((int)threadIdx.x) * 7)) + 4)] = max((conv2d_nchw[4] + bias[((((int)blockIdx.x) * 64) + (((int)threadIdx.x) / 7))]), 0.000000e+00f);
      compute[(((((int)blockIdx.x) * 3136) + (((int)threadIdx.x) * 7)) + 5)] = max((conv2d_nchw[5] + bias[((((int)blockIdx.x) * 64) + (((int)threadIdx.x) / 7))]), 0.000000e+00f);
      compute[(((((int)blockIdx.x) * 3136) + (((int)threadIdx.x) * 7)) + 6)] = max((conv2d_nchw[6] + bias[((((int)blockIdx.x) * 64) + (((int)threadIdx.x) / 7))]), 0.000000e+00f);
    }






.. GENERATED FROM PYTHON SOURCE LINES 190-194

A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.

.. GENERATED FROM PYTHON SOURCE LINES 194-216

.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resume search:
    /venv/apache-tvm-py3.7/lib/python3.7/site-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  57.652 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
