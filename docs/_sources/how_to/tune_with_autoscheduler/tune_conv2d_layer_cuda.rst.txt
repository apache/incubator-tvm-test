
.. DO NOT EDIT. THIS FILE WAS AUTOMATICALLY GENERATED BY
.. TVM'S MONKEY-PATCHED VERSION OF SPHINX-GALLERY. TO MAKE
.. CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.py"

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        This tutorial can be used interactively with Google Colab! You can also click
        :ref:`here <sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>` to run the Jupyter notebook locally.

        .. image:: https://raw.githubusercontent.com/tlc-pack/web-data/main/images/utilities/colab_button.svg
            :align: center
            :target: https://colab.research.google.com/github/apache/tvm-site/blob/asf-site/docs/_downloads/5f1f7bd7d90710fd404f7bcdc4965622/tune_conv2d_layer_cuda.ipynb
            :width: 300px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.

.. GENERATED FROM PYTHON SOURCE LINES 39-47

.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python








.. GENERATED FROM PYTHON SOURCE LINES 51-56

Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.

.. GENERATED FROM PYTHON SOURCE LINES 56-68

.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]









.. GENERATED FROM PYTHON SOURCE LINES 69-72

Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.

.. GENERATED FROM PYTHON SOURCE LINES 72-85

.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    conv2d_nchw(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (conv2d_nchw[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)





.. GENERATED FROM PYTHON SOURCE LINES 86-103

Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the main process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.

.. GENERATED FROM PYTHON SOURCE LINES 103-113

.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Get devices for measurement successfully!




.. GENERATED FROM PYTHON SOURCE LINES 114-120

Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.

.. GENERATED FROM PYTHON SOURCE LINES 120-129

.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx








.. GENERATED FROM PYTHON SOURCE LINES 130-133

We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.

.. GENERATED FROM PYTHON SOURCE LINES 133-137

.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Lowered TIR:
    @I.ir_module
    class Module:
        @T.prim_func
        def main(data: T.handle, kernel: T.handle, bias: T.handle, compute: T.handle):
            T.func_attr({"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True})
            data_1 = T.match_buffer(data, (1, 512, 7, 7))
            kernel_1 = T.match_buffer(kernel, (512, 512, 3, 3))
            bias_1 = T.match_buffer(bias, (1, 512, 1, 1))
            compute_1 = T.match_buffer(compute, (1, 512, 7, 7))
            blockIdx_x = T.env_thread("blockIdx.x")
            T.launch_thread(blockIdx_x, 16)
            conv2d_nchw = T.allocate([14], "float32", "local")
            pad_temp_shared = T.allocate([2592], "float32", "shared")
            kernel_shared = T.allocate([9216], "float32", "shared")
            threadIdx_x = T.env_thread("threadIdx.x")
            T.launch_thread(threadIdx_x, 112)
            conv2d_nchw_1 = T.buffer_decl((14,), data=conv2d_nchw, scope="local", align=32)
            conv2d_nchw_1[0] = T.float32(0)
            conv2d_nchw_1[1] = T.float32(0)
            conv2d_nchw_1[2] = T.float32(0)
            conv2d_nchw_1[3] = T.float32(0)
            conv2d_nchw_1[4] = T.float32(0)
            conv2d_nchw_1[5] = T.float32(0)
            conv2d_nchw_1[6] = T.float32(0)
            conv2d_nchw_1[7] = T.float32(0)
            conv2d_nchw_1[8] = T.float32(0)
            conv2d_nchw_1[9] = T.float32(0)
            conv2d_nchw_1[10] = T.float32(0)
            conv2d_nchw_1[11] = T.float32(0)
            conv2d_nchw_1[12] = T.float32(0)
            conv2d_nchw_1[13] = T.float32(0)
            for rc_outer_outer in range(16):
                cse_var_1: T.int32 = rc_outer_outer * 1568
                threadIdx_x_1 = T.env_thread("threadIdx.x")
                pad_temp_shared_1 = T.buffer_decl((2592,), data=pad_temp_shared, scope="shared")
                data_2 = T.buffer_decl((25088,), data=data_1.data)
                with T.launch_thread(threadIdx_x_1, 112):
                    pad_temp_shared_1[threadIdx_x_1] = T.if_then_else(9 <= threadIdx_x_1 % 81 and threadIdx_x_1 % 81 < 72 and 1 <= threadIdx_x_1 % 9 and threadIdx_x_1 % 9 < 8, data_2[cse_var_1 + threadIdx_x_1 // 81 * 49 + threadIdx_x_1 % 81 // 9 * 7 + threadIdx_x_1 % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 112):
                    pad_temp_shared_1[threadIdx_x_1 + 112] = T.if_then_else(9 <= (threadIdx_x_1 + 31) % 81 and (threadIdx_x_1 + 31) % 81 < 72 and 1 <= (threadIdx_x_1 + 4) % 9 and (threadIdx_x_1 + 4) % 9 < 8, data_2[cse_var_1 + (threadIdx_x_1 + 112) // 81 * 49 + (threadIdx_x_1 + 31) % 81 // 9 * 7 + (threadIdx_x_1 + 4) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 112):
                    pad_temp_shared_1[threadIdx_x_1 + 224] = T.if_then_else(9 <= (threadIdx_x_1 + 62) % 81 and (threadIdx_x_1 + 62) % 81 < 72 and 1 <= (threadIdx_x_1 + 8) % 9 and (threadIdx_x_1 + 8) % 9 < 8, data_2[cse_var_1 + (threadIdx_x_1 + 224) // 81 * 49 + (threadIdx_x_1 + 62) % 81 // 9 * 7 + (threadIdx_x_1 + 8) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 112):
                    pad_temp_shared_1[threadIdx_x_1 + 336] = T.if_then_else(9 <= (threadIdx_x_1 + 12) % 81 and (threadIdx_x_1 + 12) % 81 < 72 and 1 <= (threadIdx_x_1 + 3) % 9 and (threadIdx_x_1 + 3) % 9 < 8, data_2[cse_var_1 + (threadIdx_x_1 + 336) // 81 * 49 + (threadIdx_x_1 + 12) % 81 // 9 * 7 + (threadIdx_x_1 + 3) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 112):
                    pad_temp_shared_1[threadIdx_x_1 + 448] = T.if_then_else(9 <= (threadIdx_x_1 + 43) % 81 and (threadIdx_x_1 + 43) % 81 < 72 and 1 <= (threadIdx_x_1 + 7) % 9 and (threadIdx_x_1 + 7) % 9 < 8, data_2[cse_var_1 + (threadIdx_x_1 + 448) // 81 * 49 + (threadIdx_x_1 + 43) % 81 // 9 * 7 + (threadIdx_x_1 + 7) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 112):
                    pad_temp_shared_1[threadIdx_x_1 + 560] = T.if_then_else(9 <= (threadIdx_x_1 + 74) % 81 and (threadIdx_x_1 + 74) % 81 < 72 and 1 <= (threadIdx_x_1 + 2) % 9 and (threadIdx_x_1 + 2) % 9 < 8, data_2[cse_var_1 + (threadIdx_x_1 + 560) // 81 * 49 + (threadIdx_x_1 + 74) % 81 // 9 * 7 + (threadIdx_x_1 + 2) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 112):
                    pad_temp_shared_1[threadIdx_x_1 + 672] = T.if_then_else(9 <= (threadIdx_x_1 + 24) % 81 and (threadIdx_x_1 + 24) % 81 < 72 and 1 <= (threadIdx_x_1 + 6) % 9 and (threadIdx_x_1 + 6) % 9 < 8, data_2[cse_var_1 + (threadIdx_x_1 + 672) // 81 * 49 + (threadIdx_x_1 + 24) % 81 // 9 * 7 + (threadIdx_x_1 + 6) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 112):
                    pad_temp_shared_1[threadIdx_x_1 + 784] = T.if_then_else(9 <= (threadIdx_x_1 + 55) % 81 and (threadIdx_x_1 + 55) % 81 < 72 and 1 <= (threadIdx_x_1 + 1) % 9 and (threadIdx_x_1 + 1) % 9 < 8, data_2[cse_var_1 + (threadIdx_x_1 + 784) // 81 * 49 + (threadIdx_x_1 + 55) % 81 // 9 * 7 + (threadIdx_x_1 + 1) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 112):
                    pad_temp_shared_1[threadIdx_x_1 + 896] = T.if_then_else(9 <= (threadIdx_x_1 + 5) % 81 and (threadIdx_x_1 + 5) % 81 < 72 and 1 <= (threadIdx_x_1 + 5) % 9 and (threadIdx_x_1 + 5) % 9 < 8, data_2[cse_var_1 + (threadIdx_x_1 + 896) // 81 * 49 + (threadIdx_x_1 + 5) % 81 // 9 * 7 + (threadIdx_x_1 + 5) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 112):
                    pad_temp_shared_1[threadIdx_x_1 + 1008] = T.if_then_else(1 <= (threadIdx_x_1 // 9 + 4) % 9 and (threadIdx_x_1 + 36) % 81 < 72 and 1 <= threadIdx_x_1 % 9 and threadIdx_x_1 % 9 < 8, data_2[cse_var_1 + (threadIdx_x_1 + 1008) // 81 * 49 + (threadIdx_x_1 // 9 + 4) % 9 * 7 + threadIdx_x_1 % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 112):
                    pad_temp_shared_1[threadIdx_x_1 + 1120] = T.if_then_else(9 <= (threadIdx_x_1 + 67) % 81 and (threadIdx_x_1 + 67) % 81 < 72 and 1 <= (threadIdx_x_1 + 4) % 9 and (threadIdx_x_1 + 4) % 9 < 8, data_2[cse_var_1 + (threadIdx_x_1 + 1120) // 81 * 49 + (threadIdx_x_1 + 67) % 81 // 9 * 7 + (threadIdx_x_1 + 4) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 112):
                    pad_temp_shared_1[threadIdx_x_1 + 1232] = T.if_then_else(9 <= (threadIdx_x_1 + 17) % 81 and (threadIdx_x_1 + 17) % 81 < 72 and 1 <= (threadIdx_x_1 + 8) % 9 and (threadIdx_x_1 + 8) % 9 < 8, data_2[cse_var_1 + (threadIdx_x_1 + 1232) // 81 * 49 + (threadIdx_x_1 + 17) % 81 // 9 * 7 + (threadIdx_x_1 + 8) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 112):
                    pad_temp_shared_1[threadIdx_x_1 + 1344] = T.if_then_else(9 <= (threadIdx_x_1 + 48) % 81 and (threadIdx_x_1 + 48) % 81 < 72 and 1 <= (threadIdx_x_1 + 3) % 9 and (threadIdx_x_1 + 3) % 9 < 8, data_2[cse_var_1 + (threadIdx_x_1 + 1344) // 81 * 49 + (threadIdx_x_1 + 48) % 81 // 9 * 7 + (threadIdx_x_1 + 3) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 112):
                    pad_temp_shared_1[threadIdx_x_1 + 1456] = T.if_then_else(9 <= (threadIdx_x_1 + 79) % 81 and (threadIdx_x_1 + 79) % 81 < 72 and 1 <= (threadIdx_x_1 + 7) % 9 and (threadIdx_x_1 + 7) % 9 < 8, data_2[cse_var_1 + (threadIdx_x_1 + 1456) // 81 * 49 + (threadIdx_x_1 + 79) % 81 // 9 * 7 + (threadIdx_x_1 + 7) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 112):
                    pad_temp_shared_1[threadIdx_x_1 + 1568] = T.if_then_else(9 <= (threadIdx_x_1 + 29) % 81 and (threadIdx_x_1 + 29) % 81 < 72 and 1 <= (threadIdx_x_1 + 2) % 9 and (threadIdx_x_1 + 2) % 9 < 8, data_2[cse_var_1 + (threadIdx_x_1 + 1568) // 81 * 49 + (threadIdx_x_1 + 29) % 81 // 9 * 7 + (threadIdx_x_1 + 2) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 112):
                    pad_temp_shared_1[threadIdx_x_1 + 1680] = T.if_then_else(9 <= (threadIdx_x_1 + 60) % 81 and (threadIdx_x_1 + 60) % 81 < 72 and 1 <= (threadIdx_x_1 + 6) % 9 and (threadIdx_x_1 + 6) % 9 < 8, data_2[cse_var_1 + (threadIdx_x_1 + 1680) // 81 * 49 + (threadIdx_x_1 + 60) % 81 // 9 * 7 + (threadIdx_x_1 + 6) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 112):
                    pad_temp_shared_1[threadIdx_x_1 + 1792] = T.if_then_else(9 <= (threadIdx_x_1 + 10) % 81 and (threadIdx_x_1 + 10) % 81 < 72 and 1 <= (threadIdx_x_1 + 1) % 9 and (threadIdx_x_1 + 1) % 9 < 8, data_2[cse_var_1 + (threadIdx_x_1 + 1792) // 81 * 49 + (threadIdx_x_1 + 10) % 81 // 9 * 7 + (threadIdx_x_1 + 1) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 112):
                    pad_temp_shared_1[threadIdx_x_1 + 1904] = T.if_then_else(9 <= (threadIdx_x_1 + 41) % 81 and (threadIdx_x_1 + 41) % 81 < 72 and 1 <= (threadIdx_x_1 + 5) % 9 and (threadIdx_x_1 + 5) % 9 < 8, data_2[cse_var_1 + (threadIdx_x_1 + 1904) // 81 * 49 + (threadIdx_x_1 + 41) % 81 // 9 * 7 + (threadIdx_x_1 + 5) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 112):
                    pad_temp_shared_1[threadIdx_x_1 + 2016] = T.if_then_else(1 <= (threadIdx_x_1 // 9 + 8) % 9 and (threadIdx_x_1 + 72) % 81 < 72 and 1 <= threadIdx_x_1 % 9 and threadIdx_x_1 % 9 < 8, data_2[cse_var_1 + (threadIdx_x_1 + 2016) // 81 * 49 + (threadIdx_x_1 // 9 + 8) % 9 * 7 + threadIdx_x_1 % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 112):
                    pad_temp_shared_1[threadIdx_x_1 + 2128] = T.if_then_else(9 <= (threadIdx_x_1 + 22) % 81 and (threadIdx_x_1 + 22) % 81 < 72 and 1 <= (threadIdx_x_1 + 4) % 9 and (threadIdx_x_1 + 4) % 9 < 8, data_2[cse_var_1 + (threadIdx_x_1 + 2128) // 81 * 49 + (threadIdx_x_1 + 22) % 81 // 9 * 7 + (threadIdx_x_1 + 4) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 112):
                    pad_temp_shared_1[threadIdx_x_1 + 2240] = T.if_then_else(9 <= (threadIdx_x_1 + 53) % 81 and (threadIdx_x_1 + 53) % 81 < 72 and 1 <= (threadIdx_x_1 + 8) % 9 and (threadIdx_x_1 + 8) % 9 < 8, data_2[cse_var_1 + (threadIdx_x_1 + 2240) // 81 * 49 + (threadIdx_x_1 + 53) % 81 // 9 * 7 + (threadIdx_x_1 + 8) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 112):
                    pad_temp_shared_1[threadIdx_x_1 + 2352] = T.if_then_else(9 <= (threadIdx_x_1 + 3) % 81 and (threadIdx_x_1 + 3) % 81 < 72 and 1 <= (threadIdx_x_1 + 3) % 9 and (threadIdx_x_1 + 3) % 9 < 8, data_2[cse_var_1 + (threadIdx_x_1 + 2352) // 81 * 49 + (threadIdx_x_1 + 3) % 81 // 9 * 7 + (threadIdx_x_1 + 3) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 112):
                    pad_temp_shared_1[threadIdx_x_1 + 2464] = T.if_then_else(9 <= (threadIdx_x_1 + 34) % 81 and (threadIdx_x_1 + 34) % 81 < 72 and 1 <= (threadIdx_x_1 + 7) % 9 and (threadIdx_x_1 + 7) % 9 < 8, data_2[cse_var_1 + (threadIdx_x_1 + 2464) // 81 * 49 + (threadIdx_x_1 + 34) % 81 // 9 * 7 + (threadIdx_x_1 + 7) % 9 - 8], T.float32(0))
                with T.launch_thread(threadIdx_x_1, 112):
                    if T.likely(threadIdx_x_1 < 16):
                        pad_temp_shared_1[threadIdx_x_1 + 2576] = T.if_then_else(threadIdx_x_1 < 7 and 1 <= (threadIdx_x_1 + 2) % 9 and (threadIdx_x_1 + 2) % 9 < 8, data_2[cse_var_1 + (threadIdx_x_1 + 2576) // 81 * 49 + (threadIdx_x_1 + 65) % 81 // 9 * 7 + (threadIdx_x_1 + 2) - 8], T.float32(0))
                kernel_shared_1 = T.buffer_decl((9216,), data=kernel_shared, scope="shared")
                for ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer in range(4):
                    threadIdx_x_2 = T.env_thread("threadIdx.x")
                    T.launch_thread(threadIdx_x_2, 112)
                    kernel_2 = T.buffer_decl((2359296,), data=kernel_1.data)
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 32 + threadIdx_x_2 * 8) % 96 // 3 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2 + threadIdx_x_2 * 2) % 3 * 3]
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24 + 1] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 32 + threadIdx_x_2 * 8) % 96 // 3 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2 + threadIdx_x_2 * 2) % 3 * 3 + 1]
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24 + 2] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 32 + threadIdx_x_2 * 8) % 96 // 3 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2 + threadIdx_x_2 * 2) % 3 * 3 + 2]
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24 + 3] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896 + threadIdx_x_2 * 8 + 1) % 96 // 3 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224 + threadIdx_x_2 * 2 + 1) % 3 * 3]
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24 + 4] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896 + threadIdx_x_2 * 8 + 1) % 96 // 3 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224 + threadIdx_x_2 * 2 + 1) % 3 * 3 + 1]
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24 + 5] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896 + threadIdx_x_2 * 8 + 1) % 96 // 3 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224 + threadIdx_x_2 * 2 + 1) % 3 * 3 + 2]
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24 + 6] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896 + threadIdx_x_2 * 8 + 2) % 96 // 3 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224 + threadIdx_x_2 * 2 + 2) % 3 * 3]
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24 + 7] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896 + threadIdx_x_2 * 8 + 2) % 96 // 3 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224 + threadIdx_x_2 * 2 + 2) % 3 * 3 + 1]
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24 + 8] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896 + threadIdx_x_2 * 8 + 2) % 96 // 3 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224 + threadIdx_x_2 * 2 + 2) % 3 * 3 + 2]
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24 + 9] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + ((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896 + threadIdx_x_2 * 8) // 3 + 1) % 32 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2 + threadIdx_x_2 * 2) % 3 * 3]
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24 + 10] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + ((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896 + threadIdx_x_2 * 8) // 3 + 1) % 32 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2 + threadIdx_x_2 * 2) % 3 * 3 + 1]
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24 + 11] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + ((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896 + threadIdx_x_2 * 8) // 3 + 1) % 32 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2 + threadIdx_x_2 * 2) % 3 * 3 + 2]
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24 + 12] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896 + threadIdx_x_2 * 8 + 4) % 96 // 3 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224 + threadIdx_x_2 * 2 + 1) % 3 * 3]
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24 + 13] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896 + threadIdx_x_2 * 8 + 4) % 96 // 3 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224 + threadIdx_x_2 * 2 + 1) % 3 * 3 + 1]
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24 + 14] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896 + threadIdx_x_2 * 8 + 4) % 96 // 3 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224 + threadIdx_x_2 * 2 + 1) % 3 * 3 + 2]
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24 + 15] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896 + threadIdx_x_2 * 8 + 5) % 96 // 3 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224 + threadIdx_x_2 * 2 + 2) % 3 * 3]
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24 + 16] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896 + threadIdx_x_2 * 8 + 5) % 96 // 3 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224 + threadIdx_x_2 * 2 + 2) % 3 * 3 + 1]
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24 + 17] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896 + threadIdx_x_2 * 8 + 5) % 96 // 3 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224 + threadIdx_x_2 * 2 + 2) % 3 * 3 + 2]
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24 + 18] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + ((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896 + threadIdx_x_2 * 8) // 3 + 2) % 32 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2 + threadIdx_x_2 * 2) % 3 * 3]
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24 + 19] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + ((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896 + threadIdx_x_2 * 8) // 3 + 2) % 32 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2 + threadIdx_x_2 * 2) % 3 * 3 + 1]
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24 + 20] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + ((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896 + threadIdx_x_2 * 8) // 3 + 2) % 32 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2 + threadIdx_x_2 * 2) % 3 * 3 + 2]
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24 + 21] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896 + threadIdx_x_2 * 8 + 7) % 96 // 3 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224 + threadIdx_x_2 * 2 + 1) % 3 * 3]
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24 + 22] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896 + threadIdx_x_2 * 8 + 7) % 96 // 3 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224 + threadIdx_x_2 * 2 + 1) % 3 * 3 + 1]
                    if T.likely(ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7 + threadIdx_x_2 // 16 < 24):
                        kernel_shared_1[ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688 + threadIdx_x_2 * 24 + 23] = kernel_2[blockIdx_x * 147456 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28 + threadIdx_x_2 // 4) // 3 * 4608 + rc_outer_outer * 288 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896 + threadIdx_x_2 * 8 + 7) % 96 // 3 * 9 + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224 + threadIdx_x_2 * 2 + 1) % 3 * 3 + 2]
                for rc_outer_inner, rx_outer_inner, ff_outer_inner, rc_inner in T.grid(2, 3, 2, 16):
                    cse_var_8: T.int32 = ff_outer_inner * 7
                    cse_var_7: T.int32 = cse_var_8 + 6
                    cse_var_6: T.int32 = cse_var_8 + 5
                    cse_var_5: T.int32 = cse_var_8 + 4
                    cse_var_4: T.int32 = cse_var_8 + 3
                    cse_var_3: T.int32 = cse_var_8 + 2
                    cse_var_2: T.int32 = cse_var_8 + 1
                    conv2d_nchw_1[cse_var_8] = conv2d_nchw_1[cse_var_8] + pad_temp_shared_1[rc_outer_inner * 1296 + rc_inner * 81 + rx_outer_inner + threadIdx_x % 7] * kernel_shared_1[threadIdx_x // 7 * 576 + ff_outer_inner * 288 + rc_outer_inner * 144 + rc_inner * 9 + rx_outer_inner]
                    conv2d_nchw_1[cse_var_2] = conv2d_nchw_1[cse_var_2] + pad_temp_shared_1[rc_outer_inner * 1296 + rc_inner * 81 + rx_outer_inner + threadIdx_x % 7 + 9] * kernel_shared_1[threadIdx_x // 7 * 576 + ff_outer_inner * 288 + rc_outer_inner * 144 + rc_inner * 9 + rx_outer_inner]
                    conv2d_nchw_1[cse_var_3] = conv2d_nchw_1[cse_var_3] + pad_temp_shared_1[rc_outer_inner * 1296 + rc_inner * 81 + rx_outer_inner + threadIdx_x % 7 + 18] * kernel_shared_1[threadIdx_x // 7 * 576 + ff_outer_inner * 288 + rc_outer_inner * 144 + rc_inner * 9 + rx_outer_inner]
                    conv2d_nchw_1[cse_var_4] = conv2d_nchw_1[cse_var_4] + pad_temp_shared_1[rc_outer_inner * 1296 + rc_inner * 81 + rx_outer_inner + threadIdx_x % 7 + 27] * kernel_shared_1[threadIdx_x // 7 * 576 + ff_outer_inner * 288 + rc_outer_inner * 144 + rc_inner * 9 + rx_outer_inner]
                    conv2d_nchw_1[cse_var_5] = conv2d_nchw_1[cse_var_5] + pad_temp_shared_1[rc_outer_inner * 1296 + rc_inner * 81 + rx_outer_inner + threadIdx_x % 7 + 36] * kernel_shared_1[threadIdx_x // 7 * 576 + ff_outer_inner * 288 + rc_outer_inner * 144 + rc_inner * 9 + rx_outer_inner]
                    conv2d_nchw_1[cse_var_6] = conv2d_nchw_1[cse_var_6] + pad_temp_shared_1[rc_outer_inner * 1296 + rc_inner * 81 + rx_outer_inner + threadIdx_x % 7 + 45] * kernel_shared_1[threadIdx_x // 7 * 576 + ff_outer_inner * 288 + rc_outer_inner * 144 + rc_inner * 9 + rx_outer_inner]
                    conv2d_nchw_1[cse_var_7] = conv2d_nchw_1[cse_var_7] + pad_temp_shared_1[rc_outer_inner * 1296 + rc_inner * 81 + rx_outer_inner + threadIdx_x % 7 + 54] * kernel_shared_1[threadIdx_x // 7 * 576 + ff_outer_inner * 288 + rc_outer_inner * 144 + rc_inner * 9 + rx_outer_inner]
                    conv2d_nchw_1[cse_var_8] = conv2d_nchw_1[cse_var_8] + pad_temp_shared_1[rc_outer_inner * 1296 + rc_inner * 81 + rx_outer_inner + threadIdx_x % 7 + 9] * kernel_shared_1[threadIdx_x // 7 * 576 + ff_outer_inner * 288 + rc_outer_inner * 144 + rc_inner * 9 + rx_outer_inner + 3]
                    conv2d_nchw_1[cse_var_2] = conv2d_nchw_1[cse_var_2] + pad_temp_shared_1[rc_outer_inner * 1296 + rc_inner * 81 + rx_outer_inner + threadIdx_x % 7 + 18] * kernel_shared_1[threadIdx_x // 7 * 576 + ff_outer_inner * 288 + rc_outer_inner * 144 + rc_inner * 9 + rx_outer_inner + 3]
                    conv2d_nchw_1[cse_var_3] = conv2d_nchw_1[cse_var_3] + pad_temp_shared_1[rc_outer_inner * 1296 + rc_inner * 81 + rx_outer_inner + threadIdx_x % 7 + 27] * kernel_shared_1[threadIdx_x // 7 * 576 + ff_outer_inner * 288 + rc_outer_inner * 144 + rc_inner * 9 + rx_outer_inner + 3]
                    conv2d_nchw_1[cse_var_4] = conv2d_nchw_1[cse_var_4] + pad_temp_shared_1[rc_outer_inner * 1296 + rc_inner * 81 + rx_outer_inner + threadIdx_x % 7 + 36] * kernel_shared_1[threadIdx_x // 7 * 576 + ff_outer_inner * 288 + rc_outer_inner * 144 + rc_inner * 9 + rx_outer_inner + 3]
                    conv2d_nchw_1[cse_var_5] = conv2d_nchw_1[cse_var_5] + pad_temp_shared_1[rc_outer_inner * 1296 + rc_inner * 81 + rx_outer_inner + threadIdx_x % 7 + 45] * kernel_shared_1[threadIdx_x // 7 * 576 + ff_outer_inner * 288 + rc_outer_inner * 144 + rc_inner * 9 + rx_outer_inner + 3]
                    conv2d_nchw_1[cse_var_6] = conv2d_nchw_1[cse_var_6] + pad_temp_shared_1[rc_outer_inner * 1296 + rc_inner * 81 + rx_outer_inner + threadIdx_x % 7 + 54] * kernel_shared_1[threadIdx_x // 7 * 576 + ff_outer_inner * 288 + rc_outer_inner * 144 + rc_inner * 9 + rx_outer_inner + 3]
                    conv2d_nchw_1[cse_var_7] = conv2d_nchw_1[cse_var_7] + pad_temp_shared_1[rc_outer_inner * 1296 + rc_inner * 81 + rx_outer_inner + threadIdx_x % 7 + 63] * kernel_shared_1[threadIdx_x // 7 * 576 + ff_outer_inner * 288 + rc_outer_inner * 144 + rc_inner * 9 + rx_outer_inner + 3]
                    conv2d_nchw_1[cse_var_8] = conv2d_nchw_1[cse_var_8] + pad_temp_shared_1[rc_outer_inner * 1296 + rc_inner * 81 + rx_outer_inner + threadIdx_x % 7 + 18] * kernel_shared_1[threadIdx_x // 7 * 576 + ff_outer_inner * 288 + rc_outer_inner * 144 + rc_inner * 9 + rx_outer_inner + 6]
                    conv2d_nchw_1[cse_var_2] = conv2d_nchw_1[cse_var_2] + pad_temp_shared_1[rc_outer_inner * 1296 + rc_inner * 81 + rx_outer_inner + threadIdx_x % 7 + 27] * kernel_shared_1[threadIdx_x // 7 * 576 + ff_outer_inner * 288 + rc_outer_inner * 144 + rc_inner * 9 + rx_outer_inner + 6]
                    conv2d_nchw_1[cse_var_3] = conv2d_nchw_1[cse_var_3] + pad_temp_shared_1[rc_outer_inner * 1296 + rc_inner * 81 + rx_outer_inner + threadIdx_x % 7 + 36] * kernel_shared_1[threadIdx_x // 7 * 576 + ff_outer_inner * 288 + rc_outer_inner * 144 + rc_inner * 9 + rx_outer_inner + 6]
                    conv2d_nchw_1[cse_var_4] = conv2d_nchw_1[cse_var_4] + pad_temp_shared_1[rc_outer_inner * 1296 + rc_inner * 81 + rx_outer_inner + threadIdx_x % 7 + 45] * kernel_shared_1[threadIdx_x // 7 * 576 + ff_outer_inner * 288 + rc_outer_inner * 144 + rc_inner * 9 + rx_outer_inner + 6]
                    conv2d_nchw_1[cse_var_5] = conv2d_nchw_1[cse_var_5] + pad_temp_shared_1[rc_outer_inner * 1296 + rc_inner * 81 + rx_outer_inner + threadIdx_x % 7 + 54] * kernel_shared_1[threadIdx_x // 7 * 576 + ff_outer_inner * 288 + rc_outer_inner * 144 + rc_inner * 9 + rx_outer_inner + 6]
                    conv2d_nchw_1[cse_var_6] = conv2d_nchw_1[cse_var_6] + pad_temp_shared_1[rc_outer_inner * 1296 + rc_inner * 81 + rx_outer_inner + threadIdx_x % 7 + 63] * kernel_shared_1[threadIdx_x // 7 * 576 + ff_outer_inner * 288 + rc_outer_inner * 144 + rc_inner * 9 + rx_outer_inner + 6]
                    conv2d_nchw_1[cse_var_7] = conv2d_nchw_1[cse_var_7] + pad_temp_shared_1[rc_outer_inner * 1296 + rc_inner * 81 + rx_outer_inner + threadIdx_x % 7 + 72] * kernel_shared_1[threadIdx_x // 7 * 576 + ff_outer_inner * 288 + rc_outer_inner * 144 + rc_inner * 9 + rx_outer_inner + 6]
            for i1_inner, i2_inner in T.grid(2, 7):
                compute_2 = T.buffer_decl((25088,), data=compute_1.data)
                bias_2 = T.buffer_decl((512,), data=bias_1.data)
                compute_2[blockIdx_x * 1568 + threadIdx_x // 7 * 98 + i1_inner * 49 + i2_inner * 7 + threadIdx_x % 7] = T.max(conv2d_nchw_1[i1_inner * 7 + i2_inner] + bias_2[blockIdx_x * 32 + threadIdx_x // 7 * 2 + i1_inner], T.float32(0))




.. GENERATED FROM PYTHON SOURCE LINES 138-141

Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.

.. GENERATED FROM PYTHON SOURCE LINES 141-168

.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Execution time of this operator: 0.325 ms




.. GENERATED FROM PYTHON SOURCE LINES 169-174

Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

.. GENERATED FROM PYTHON SOURCE LINES 176-179

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.

.. GENERATED FROM PYTHON SOURCE LINES 179-186

.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    conv2d_nchw_nn, conv2d_nchw_ff, conv2d_nchw_yy, conv2d_nchw_xx, conv2d_nchw_rc, conv2d_nchw_ry, conv2d_nchw_rx = tuple(conv2d_nchw.op.axis) + tuple(conv2d_nchw.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    conv2d_nchw_nn_o_i, conv2d_nchw_nn_i = s[conv2d_nchw].split(conv2d_nchw_nn, factor=1)
    conv2d_nchw_nn_o_o_i, conv2d_nchw_nn_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_i, conv2d_nchw_nn_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_i, factor=1)
    conv2d_nchw_nn_o_o_o_o, conv2d_nchw_nn_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_nn_o_o_o_i, factor=1)
    conv2d_nchw_ff_o_i, conv2d_nchw_ff_i = s[conv2d_nchw].split(conv2d_nchw_ff, factor=1)
    conv2d_nchw_ff_o_o_i, conv2d_nchw_ff_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_i, factor=2)
    conv2d_nchw_ff_o_o_o_i, conv2d_nchw_ff_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_i, factor=16)
    conv2d_nchw_ff_o_o_o_o, conv2d_nchw_ff_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_ff_o_o_o_i, factor=1)
    conv2d_nchw_yy_o_i, conv2d_nchw_yy_i = s[conv2d_nchw].split(conv2d_nchw_yy, factor=7)
    conv2d_nchw_yy_o_o_i, conv2d_nchw_yy_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_i, conv2d_nchw_yy_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_i, factor=1)
    conv2d_nchw_yy_o_o_o_o, conv2d_nchw_yy_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_yy_o_o_o_i, factor=1)
    conv2d_nchw_xx_o_i, conv2d_nchw_xx_i = s[conv2d_nchw].split(conv2d_nchw_xx, factor=1)
    conv2d_nchw_xx_o_o_i, conv2d_nchw_xx_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_i, factor=1)
    conv2d_nchw_xx_o_o_o_i, conv2d_nchw_xx_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_i, factor=7)
    conv2d_nchw_xx_o_o_o_o, conv2d_nchw_xx_o_o_o_i = s[conv2d_nchw].split(conv2d_nchw_xx_o_o_o_i, factor=1)
    conv2d_nchw_rc_o_i, conv2d_nchw_rc_i = s[conv2d_nchw].split(conv2d_nchw_rc, factor=16)
    conv2d_nchw_rc_o_o, conv2d_nchw_rc_o_i = s[conv2d_nchw].split(conv2d_nchw_rc_o_i, factor=2)
    conv2d_nchw_ry_o_i, conv2d_nchw_ry_i = s[conv2d_nchw].split(conv2d_nchw_ry, factor=3)
    conv2d_nchw_ry_o_o, conv2d_nchw_ry_o_i = s[conv2d_nchw].split(conv2d_nchw_ry_o_i, factor=1)
    conv2d_nchw_rx_o_i, conv2d_nchw_rx_i = s[conv2d_nchw].split(conv2d_nchw_rx, factor=1)
    conv2d_nchw_rx_o_o, conv2d_nchw_rx_o_i = s[conv2d_nchw].split(conv2d_nchw_rx_o_i, factor=3)
    s[conv2d_nchw].reorder(conv2d_nchw_nn_o_o_o_o, conv2d_nchw_ff_o_o_o_o, conv2d_nchw_yy_o_o_o_o, conv2d_nchw_xx_o_o_o_o, conv2d_nchw_nn_o_o_o_i, conv2d_nchw_ff_o_o_o_i, conv2d_nchw_yy_o_o_o_i, conv2d_nchw_xx_o_o_o_i, conv2d_nchw_nn_o_o_i, conv2d_nchw_ff_o_o_i, conv2d_nchw_yy_o_o_i, conv2d_nchw_xx_o_o_i, conv2d_nchw_rc_o_o, conv2d_nchw_ry_o_o, conv2d_nchw_rx_o_o, conv2d_nchw_rc_o_i, conv2d_nchw_ry_o_i, conv2d_nchw_rx_o_i, conv2d_nchw_nn_o_i, conv2d_nchw_ff_o_i, conv2d_nchw_yy_o_i, conv2d_nchw_xx_o_i, conv2d_nchw_rc_i, conv2d_nchw_ry_i, conv2d_nchw_rx_i, conv2d_nchw_nn_i, conv2d_nchw_ff_i, conv2d_nchw_yy_i, conv2d_nchw_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=2)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=16)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=7)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=1)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=7)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[conv2d_nchw].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [conv2d_nchw])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [conv2d_nchw])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[conv2d_nchw], conv2d_nchw_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=24)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=112)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=112)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "auto_unroll_max_step", 64)
    s[conv2d_nchw].pragma(conv2d_nchw_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(112) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float conv2d_nchw[14];
      __shared__ float pad_temp_shared[2592];
      __shared__ float kernel_shared[9216];
      conv2d_nchw[0] = 0.000000e+00f;
      conv2d_nchw[1] = 0.000000e+00f;
      conv2d_nchw[2] = 0.000000e+00f;
      conv2d_nchw[3] = 0.000000e+00f;
      conv2d_nchw[4] = 0.000000e+00f;
      conv2d_nchw[5] = 0.000000e+00f;
      conv2d_nchw[6] = 0.000000e+00f;
      conv2d_nchw[7] = 0.000000e+00f;
      conv2d_nchw[8] = 0.000000e+00f;
      conv2d_nchw[9] = 0.000000e+00f;
      conv2d_nchw[10] = 0.000000e+00f;
      conv2d_nchw[11] = 0.000000e+00f;
      conv2d_nchw[12] = 0.000000e+00f;
      conv2d_nchw[13] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 16; ++rc_outer_outer) {
        __syncthreads();
        pad_temp_shared[((int)threadIdx.x)] = (((((9 <= (((int)threadIdx.x) % 81)) && ((((int)threadIdx.x) % 81) < 72)) && (1 <= (((int)threadIdx.x) % 9))) && ((((int)threadIdx.x) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + ((((int)threadIdx.x) / 81) * 49)) + (((((int)threadIdx.x) % 81) / 9) * 7)) + (((int)threadIdx.x) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 112)] = (((((9 <= ((((int)threadIdx.x) + 31) % 81)) && (((((int)threadIdx.x) + 31) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 4) % 9))) && (((((int)threadIdx.x) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 112) / 81) * 49)) + ((((((int)threadIdx.x) + 31) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 224)] = (((((9 <= ((((int)threadIdx.x) + 62) % 81)) && (((((int)threadIdx.x) + 62) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 8) % 9))) && (((((int)threadIdx.x) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 224) / 81) * 49)) + ((((((int)threadIdx.x) + 62) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 8) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 336)] = (((((9 <= ((((int)threadIdx.x) + 12) % 81)) && (((((int)threadIdx.x) + 12) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 3) % 9))) && (((((int)threadIdx.x) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 336) / 81) * 49)) + ((((((int)threadIdx.x) + 12) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 3) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 448)] = (((((9 <= ((((int)threadIdx.x) + 43) % 81)) && (((((int)threadIdx.x) + 43) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 7) % 9))) && (((((int)threadIdx.x) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 448) / 81) * 49)) + ((((((int)threadIdx.x) + 43) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 7) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 560)] = (((((9 <= ((((int)threadIdx.x) + 74) % 81)) && (((((int)threadIdx.x) + 74) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 2) % 9))) && (((((int)threadIdx.x) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 560) / 81) * 49)) + ((((((int)threadIdx.x) + 74) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 2) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 672)] = (((((9 <= ((((int)threadIdx.x) + 24) % 81)) && (((((int)threadIdx.x) + 24) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 6) % 9))) && (((((int)threadIdx.x) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 672) / 81) * 49)) + ((((((int)threadIdx.x) + 24) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 6) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 784)] = (((((9 <= ((((int)threadIdx.x) + 55) % 81)) && (((((int)threadIdx.x) + 55) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 1) % 9))) && (((((int)threadIdx.x) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 784) / 81) * 49)) + ((((((int)threadIdx.x) + 55) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 1) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 896)] = (((((9 <= ((((int)threadIdx.x) + 5) % 81)) && (((((int)threadIdx.x) + 5) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 5) % 9))) && (((((int)threadIdx.x) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 896) / 81) * 49)) + ((((((int)threadIdx.x) + 5) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 5) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 1008)] = (((((1 <= (((((int)threadIdx.x) / 9) + 4) % 9)) && (((((int)threadIdx.x) + 36) % 81) < 72)) && (1 <= (((int)threadIdx.x) % 9))) && ((((int)threadIdx.x) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 1008) / 81) * 49)) + ((((((int)threadIdx.x) / 9) + 4) % 9) * 7)) + (((int)threadIdx.x) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 1120)] = (((((9 <= ((((int)threadIdx.x) + 67) % 81)) && (((((int)threadIdx.x) + 67) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 4) % 9))) && (((((int)threadIdx.x) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 1120) / 81) * 49)) + ((((((int)threadIdx.x) + 67) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 1232)] = (((((9 <= ((((int)threadIdx.x) + 17) % 81)) && (((((int)threadIdx.x) + 17) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 8) % 9))) && (((((int)threadIdx.x) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 1232) / 81) * 49)) + ((((((int)threadIdx.x) + 17) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 8) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 1344)] = (((((9 <= ((((int)threadIdx.x) + 48) % 81)) && (((((int)threadIdx.x) + 48) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 3) % 9))) && (((((int)threadIdx.x) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 1344) / 81) * 49)) + ((((((int)threadIdx.x) + 48) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 3) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 1456)] = (((((9 <= ((((int)threadIdx.x) + 79) % 81)) && (((((int)threadIdx.x) + 79) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 7) % 9))) && (((((int)threadIdx.x) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 1456) / 81) * 49)) + ((((((int)threadIdx.x) + 79) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 7) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 1568)] = (((((9 <= ((((int)threadIdx.x) + 29) % 81)) && (((((int)threadIdx.x) + 29) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 2) % 9))) && (((((int)threadIdx.x) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 1568) / 81) * 49)) + ((((((int)threadIdx.x) + 29) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 2) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 1680)] = (((((9 <= ((((int)threadIdx.x) + 60) % 81)) && (((((int)threadIdx.x) + 60) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 6) % 9))) && (((((int)threadIdx.x) + 6) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 1680) / 81) * 49)) + ((((((int)threadIdx.x) + 60) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 6) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 1792)] = (((((9 <= ((((int)threadIdx.x) + 10) % 81)) && (((((int)threadIdx.x) + 10) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 1) % 9))) && (((((int)threadIdx.x) + 1) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 1792) / 81) * 49)) + ((((((int)threadIdx.x) + 10) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 1) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 1904)] = (((((9 <= ((((int)threadIdx.x) + 41) % 81)) && (((((int)threadIdx.x) + 41) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 5) % 9))) && (((((int)threadIdx.x) + 5) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 1904) / 81) * 49)) + ((((((int)threadIdx.x) + 41) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 5) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 2016)] = (((((1 <= (((((int)threadIdx.x) / 9) + 8) % 9)) && (((((int)threadIdx.x) + 72) % 81) < 72)) && (1 <= (((int)threadIdx.x) % 9))) && ((((int)threadIdx.x) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 2016) / 81) * 49)) + ((((((int)threadIdx.x) / 9) + 8) % 9) * 7)) + (((int)threadIdx.x) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 2128)] = (((((9 <= ((((int)threadIdx.x) + 22) % 81)) && (((((int)threadIdx.x) + 22) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 4) % 9))) && (((((int)threadIdx.x) + 4) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 2128) / 81) * 49)) + ((((((int)threadIdx.x) + 22) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 4) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 2240)] = (((((9 <= ((((int)threadIdx.x) + 53) % 81)) && (((((int)threadIdx.x) + 53) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 8) % 9))) && (((((int)threadIdx.x) + 8) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 2240) / 81) * 49)) + ((((((int)threadIdx.x) + 53) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 8) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 2352)] = (((((9 <= ((((int)threadIdx.x) + 3) % 81)) && (((((int)threadIdx.x) + 3) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 3) % 9))) && (((((int)threadIdx.x) + 3) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 2352) / 81) * 49)) + ((((((int)threadIdx.x) + 3) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 3) % 9)) - 8)] : 0.000000e+00f);
        pad_temp_shared[(((int)threadIdx.x) + 2464)] = (((((9 <= ((((int)threadIdx.x) + 34) % 81)) && (((((int)threadIdx.x) + 34) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 7) % 9))) && (((((int)threadIdx.x) + 7) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 2464) / 81) * 49)) + ((((((int)threadIdx.x) + 34) % 81) / 9) * 7)) + ((((int)threadIdx.x) + 7) % 9)) - 8)] : 0.000000e+00f);
        if (((int)threadIdx.x) < 16) {
          pad_temp_shared[(((int)threadIdx.x) + 2576)] = ((((((int)threadIdx.x) < 7) && (1 <= ((((int)threadIdx.x) + 2) % 9))) && (((((int)threadIdx.x) + 2) % 9) < 8)) ? data[(((((rc_outer_outer * 1568) + (((((int)threadIdx.x) + 2576) / 81) * 49)) + (((((int)threadIdx.x) + 65) / 9) * 7)) + ((int)threadIdx.x)) - 6)] : 0.000000e+00f);
        }
        for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer < 4; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer) {
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24))] = kernel[(((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 32) + (((int)threadIdx.x) * 8)) % 96) / 3) * 9)) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2) + (((int)threadIdx.x) * 2)) % 3) * 3))];
          }
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24)) + 1)] = kernel[((((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 32) + (((int)threadIdx.x) * 8)) % 96) / 3) * 9)) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2) + (((int)threadIdx.x) * 2)) % 3) * 3)) + 1)];
          }
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24)) + 2)] = kernel[((((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 32) + (((int)threadIdx.x) * 8)) % 96) / 3) * 9)) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2) + (((int)threadIdx.x) * 2)) % 3) * 3)) + 2)];
          }
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24)) + 3)] = kernel[(((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896) + (((int)threadIdx.x) * 8)) + 1) % 96) / 3) * 9)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224) + (((int)threadIdx.x) * 2)) + 1) % 3) * 3))];
          }
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24)) + 4)] = kernel[((((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896) + (((int)threadIdx.x) * 8)) + 1) % 96) / 3) * 9)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224) + (((int)threadIdx.x) * 2)) + 1) % 3) * 3)) + 1)];
          }
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24)) + 5)] = kernel[((((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896) + (((int)threadIdx.x) * 8)) + 1) % 96) / 3) * 9)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224) + (((int)threadIdx.x) * 2)) + 1) % 3) * 3)) + 2)];
          }
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24)) + 6)] = kernel[(((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896) + (((int)threadIdx.x) * 8)) + 2) % 96) / 3) * 9)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224) + (((int)threadIdx.x) * 2)) + 2) % 3) * 3))];
          }
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24)) + 7)] = kernel[((((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896) + (((int)threadIdx.x) * 8)) + 2) % 96) / 3) * 9)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224) + (((int)threadIdx.x) * 2)) + 2) % 3) * 3)) + 1)];
          }
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24)) + 8)] = kernel[((((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896) + (((int)threadIdx.x) * 8)) + 2) % 96) / 3) * 9)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224) + (((int)threadIdx.x) * 2)) + 2) % 3) * 3)) + 2)];
          }
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24)) + 9)] = kernel[(((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896) + (((int)threadIdx.x) * 8)) / 3) + 1) & 31) * 9)) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2) + (((int)threadIdx.x) * 2)) % 3) * 3))];
          }
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24)) + 10)] = kernel[((((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896) + (((int)threadIdx.x) * 8)) / 3) + 1) & 31) * 9)) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2) + (((int)threadIdx.x) * 2)) % 3) * 3)) + 1)];
          }
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24)) + 11)] = kernel[((((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896) + (((int)threadIdx.x) * 8)) / 3) + 1) & 31) * 9)) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2) + (((int)threadIdx.x) * 2)) % 3) * 3)) + 2)];
          }
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24)) + 12)] = kernel[(((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896) + (((int)threadIdx.x) * 8)) + 4) % 96) / 3) * 9)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224) + (((int)threadIdx.x) * 2)) + 1) % 3) * 3))];
          }
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24)) + 13)] = kernel[((((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896) + (((int)threadIdx.x) * 8)) + 4) % 96) / 3) * 9)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224) + (((int)threadIdx.x) * 2)) + 1) % 3) * 3)) + 1)];
          }
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24)) + 14)] = kernel[((((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896) + (((int)threadIdx.x) * 8)) + 4) % 96) / 3) * 9)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224) + (((int)threadIdx.x) * 2)) + 1) % 3) * 3)) + 2)];
          }
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24)) + 15)] = kernel[(((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896) + (((int)threadIdx.x) * 8)) + 5) % 96) / 3) * 9)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224) + (((int)threadIdx.x) * 2)) + 2) % 3) * 3))];
          }
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24)) + 16)] = kernel[((((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896) + (((int)threadIdx.x) * 8)) + 5) % 96) / 3) * 9)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224) + (((int)threadIdx.x) * 2)) + 2) % 3) * 3)) + 1)];
          }
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24)) + 17)] = kernel[((((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896) + (((int)threadIdx.x) * 8)) + 5) % 96) / 3) * 9)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224) + (((int)threadIdx.x) * 2)) + 2) % 3) * 3)) + 2)];
          }
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24)) + 18)] = kernel[(((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896) + (((int)threadIdx.x) * 8)) / 3) + 2) & 31) * 9)) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2) + (((int)threadIdx.x) * 2)) % 3) * 3))];
          }
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24)) + 19)] = kernel[((((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896) + (((int)threadIdx.x) * 8)) / 3) + 2) & 31) * 9)) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2) + (((int)threadIdx.x) * 2)) % 3) * 3)) + 1)];
          }
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24)) + 20)] = kernel[((((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896) + (((int)threadIdx.x) * 8)) / 3) + 2) & 31) * 9)) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2) + (((int)threadIdx.x) * 2)) % 3) * 3)) + 2)];
          }
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24)) + 21)] = kernel[(((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896) + (((int)threadIdx.x) * 8)) + 7) % 96) / 3) * 9)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224) + (((int)threadIdx.x) * 2)) + 1) % 3) * 3))];
          }
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24)) + 22)] = kernel[((((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896) + (((int)threadIdx.x) * 8)) + 7) % 96) / 3) * 9)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224) + (((int)threadIdx.x) * 2)) + 1) % 3) * 3)) + 1)];
          }
          if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 7) + (((int)threadIdx.x) >> 4)) < 24) {
            kernel_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 2688) + (((int)threadIdx.x) * 24)) + 23)] = kernel[((((((((int)blockIdx.x) * 147456) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 28) + (((int)threadIdx.x) >> 2)) / 3) * 4608)) + (rc_outer_outer * 288)) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 896) + (((int)threadIdx.x) * 8)) + 7) % 96) / 3) * 9)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 224) + (((int)threadIdx.x) * 2)) + 1) % 3) * 3)) + 2)];
          }
        }
        __syncthreads();
        for (int rc_outer_inner = 0; rc_outer_inner < 2; ++rc_outer_inner) {
          for (int rx_outer_inner = 0; rx_outer_inner < 3; ++rx_outer_inner) {
            for (int ff_outer_inner = 0; ff_outer_inner < 2; ++ff_outer_inner) {
              for (int rc_inner = 0; rc_inner < 16; ++rc_inner) {
                conv2d_nchw[(ff_outer_inner * 7)] = (conv2d_nchw[(ff_outer_inner * 7)] + (pad_temp_shared[((((rc_outer_inner * 1296) + (rc_inner * 81)) + rx_outer_inner) + (((int)threadIdx.x) % 7))] * kernel_shared[((((((((int)threadIdx.x) / 7) * 576) + (ff_outer_inner * 288)) + (rc_outer_inner * 144)) + (rc_inner * 9)) + rx_outer_inner)]));
                conv2d_nchw[((ff_outer_inner * 7) + 1)] = (conv2d_nchw[((ff_outer_inner * 7) + 1)] + (pad_temp_shared[(((((rc_outer_inner * 1296) + (rc_inner * 81)) + rx_outer_inner) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[((((((((int)threadIdx.x) / 7) * 576) + (ff_outer_inner * 288)) + (rc_outer_inner * 144)) + (rc_inner * 9)) + rx_outer_inner)]));
                conv2d_nchw[((ff_outer_inner * 7) + 2)] = (conv2d_nchw[((ff_outer_inner * 7) + 2)] + (pad_temp_shared[(((((rc_outer_inner * 1296) + (rc_inner * 81)) + rx_outer_inner) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[((((((((int)threadIdx.x) / 7) * 576) + (ff_outer_inner * 288)) + (rc_outer_inner * 144)) + (rc_inner * 9)) + rx_outer_inner)]));
                conv2d_nchw[((ff_outer_inner * 7) + 3)] = (conv2d_nchw[((ff_outer_inner * 7) + 3)] + (pad_temp_shared[(((((rc_outer_inner * 1296) + (rc_inner * 81)) + rx_outer_inner) + (((int)threadIdx.x) % 7)) + 27)] * kernel_shared[((((((((int)threadIdx.x) / 7) * 576) + (ff_outer_inner * 288)) + (rc_outer_inner * 144)) + (rc_inner * 9)) + rx_outer_inner)]));
                conv2d_nchw[((ff_outer_inner * 7) + 4)] = (conv2d_nchw[((ff_outer_inner * 7) + 4)] + (pad_temp_shared[(((((rc_outer_inner * 1296) + (rc_inner * 81)) + rx_outer_inner) + (((int)threadIdx.x) % 7)) + 36)] * kernel_shared[((((((((int)threadIdx.x) / 7) * 576) + (ff_outer_inner * 288)) + (rc_outer_inner * 144)) + (rc_inner * 9)) + rx_outer_inner)]));
                conv2d_nchw[((ff_outer_inner * 7) + 5)] = (conv2d_nchw[((ff_outer_inner * 7) + 5)] + (pad_temp_shared[(((((rc_outer_inner * 1296) + (rc_inner * 81)) + rx_outer_inner) + (((int)threadIdx.x) % 7)) + 45)] * kernel_shared[((((((((int)threadIdx.x) / 7) * 576) + (ff_outer_inner * 288)) + (rc_outer_inner * 144)) + (rc_inner * 9)) + rx_outer_inner)]));
                conv2d_nchw[((ff_outer_inner * 7) + 6)] = (conv2d_nchw[((ff_outer_inner * 7) + 6)] + (pad_temp_shared[(((((rc_outer_inner * 1296) + (rc_inner * 81)) + rx_outer_inner) + (((int)threadIdx.x) % 7)) + 54)] * kernel_shared[((((((((int)threadIdx.x) / 7) * 576) + (ff_outer_inner * 288)) + (rc_outer_inner * 144)) + (rc_inner * 9)) + rx_outer_inner)]));
                conv2d_nchw[(ff_outer_inner * 7)] = (conv2d_nchw[(ff_outer_inner * 7)] + (pad_temp_shared[(((((rc_outer_inner * 1296) + (rc_inner * 81)) + rx_outer_inner) + (((int)threadIdx.x) % 7)) + 9)] * kernel_shared[(((((((((int)threadIdx.x) / 7) * 576) + (ff_outer_inner * 288)) + (rc_outer_inner * 144)) + (rc_inner * 9)) + rx_outer_inner) + 3)]));
                conv2d_nchw[((ff_outer_inner * 7) + 1)] = (conv2d_nchw[((ff_outer_inner * 7) + 1)] + (pad_temp_shared[(((((rc_outer_inner * 1296) + (rc_inner * 81)) + rx_outer_inner) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[(((((((((int)threadIdx.x) / 7) * 576) + (ff_outer_inner * 288)) + (rc_outer_inner * 144)) + (rc_inner * 9)) + rx_outer_inner) + 3)]));
                conv2d_nchw[((ff_outer_inner * 7) + 2)] = (conv2d_nchw[((ff_outer_inner * 7) + 2)] + (pad_temp_shared[(((((rc_outer_inner * 1296) + (rc_inner * 81)) + rx_outer_inner) + (((int)threadIdx.x) % 7)) + 27)] * kernel_shared[(((((((((int)threadIdx.x) / 7) * 576) + (ff_outer_inner * 288)) + (rc_outer_inner * 144)) + (rc_inner * 9)) + rx_outer_inner) + 3)]));
                conv2d_nchw[((ff_outer_inner * 7) + 3)] = (conv2d_nchw[((ff_outer_inner * 7) + 3)] + (pad_temp_shared[(((((rc_outer_inner * 1296) + (rc_inner * 81)) + rx_outer_inner) + (((int)threadIdx.x) % 7)) + 36)] * kernel_shared[(((((((((int)threadIdx.x) / 7) * 576) + (ff_outer_inner * 288)) + (rc_outer_inner * 144)) + (rc_inner * 9)) + rx_outer_inner) + 3)]));
                conv2d_nchw[((ff_outer_inner * 7) + 4)] = (conv2d_nchw[((ff_outer_inner * 7) + 4)] + (pad_temp_shared[(((((rc_outer_inner * 1296) + (rc_inner * 81)) + rx_outer_inner) + (((int)threadIdx.x) % 7)) + 45)] * kernel_shared[(((((((((int)threadIdx.x) / 7) * 576) + (ff_outer_inner * 288)) + (rc_outer_inner * 144)) + (rc_inner * 9)) + rx_outer_inner) + 3)]));
                conv2d_nchw[((ff_outer_inner * 7) + 5)] = (conv2d_nchw[((ff_outer_inner * 7) + 5)] + (pad_temp_shared[(((((rc_outer_inner * 1296) + (rc_inner * 81)) + rx_outer_inner) + (((int)threadIdx.x) % 7)) + 54)] * kernel_shared[(((((((((int)threadIdx.x) / 7) * 576) + (ff_outer_inner * 288)) + (rc_outer_inner * 144)) + (rc_inner * 9)) + rx_outer_inner) + 3)]));
                conv2d_nchw[((ff_outer_inner * 7) + 6)] = (conv2d_nchw[((ff_outer_inner * 7) + 6)] + (pad_temp_shared[(((((rc_outer_inner * 1296) + (rc_inner * 81)) + rx_outer_inner) + (((int)threadIdx.x) % 7)) + 63)] * kernel_shared[(((((((((int)threadIdx.x) / 7) * 576) + (ff_outer_inner * 288)) + (rc_outer_inner * 144)) + (rc_inner * 9)) + rx_outer_inner) + 3)]));
                conv2d_nchw[(ff_outer_inner * 7)] = (conv2d_nchw[(ff_outer_inner * 7)] + (pad_temp_shared[(((((rc_outer_inner * 1296) + (rc_inner * 81)) + rx_outer_inner) + (((int)threadIdx.x) % 7)) + 18)] * kernel_shared[(((((((((int)threadIdx.x) / 7) * 576) + (ff_outer_inner * 288)) + (rc_outer_inner * 144)) + (rc_inner * 9)) + rx_outer_inner) + 6)]));
                conv2d_nchw[((ff_outer_inner * 7) + 1)] = (conv2d_nchw[((ff_outer_inner * 7) + 1)] + (pad_temp_shared[(((((rc_outer_inner * 1296) + (rc_inner * 81)) + rx_outer_inner) + (((int)threadIdx.x) % 7)) + 27)] * kernel_shared[(((((((((int)threadIdx.x) / 7) * 576) + (ff_outer_inner * 288)) + (rc_outer_inner * 144)) + (rc_inner * 9)) + rx_outer_inner) + 6)]));
                conv2d_nchw[((ff_outer_inner * 7) + 2)] = (conv2d_nchw[((ff_outer_inner * 7) + 2)] + (pad_temp_shared[(((((rc_outer_inner * 1296) + (rc_inner * 81)) + rx_outer_inner) + (((int)threadIdx.x) % 7)) + 36)] * kernel_shared[(((((((((int)threadIdx.x) / 7) * 576) + (ff_outer_inner * 288)) + (rc_outer_inner * 144)) + (rc_inner * 9)) + rx_outer_inner) + 6)]));
                conv2d_nchw[((ff_outer_inner * 7) + 3)] = (conv2d_nchw[((ff_outer_inner * 7) + 3)] + (pad_temp_shared[(((((rc_outer_inner * 1296) + (rc_inner * 81)) + rx_outer_inner) + (((int)threadIdx.x) % 7)) + 45)] * kernel_shared[(((((((((int)threadIdx.x) / 7) * 576) + (ff_outer_inner * 288)) + (rc_outer_inner * 144)) + (rc_inner * 9)) + rx_outer_inner) + 6)]));
                conv2d_nchw[((ff_outer_inner * 7) + 4)] = (conv2d_nchw[((ff_outer_inner * 7) + 4)] + (pad_temp_shared[(((((rc_outer_inner * 1296) + (rc_inner * 81)) + rx_outer_inner) + (((int)threadIdx.x) % 7)) + 54)] * kernel_shared[(((((((((int)threadIdx.x) / 7) * 576) + (ff_outer_inner * 288)) + (rc_outer_inner * 144)) + (rc_inner * 9)) + rx_outer_inner) + 6)]));
                conv2d_nchw[((ff_outer_inner * 7) + 5)] = (conv2d_nchw[((ff_outer_inner * 7) + 5)] + (pad_temp_shared[(((((rc_outer_inner * 1296) + (rc_inner * 81)) + rx_outer_inner) + (((int)threadIdx.x) % 7)) + 63)] * kernel_shared[(((((((((int)threadIdx.x) / 7) * 576) + (ff_outer_inner * 288)) + (rc_outer_inner * 144)) + (rc_inner * 9)) + rx_outer_inner) + 6)]));
                conv2d_nchw[((ff_outer_inner * 7) + 6)] = (conv2d_nchw[((ff_outer_inner * 7) + 6)] + (pad_temp_shared[(((((rc_outer_inner * 1296) + (rc_inner * 81)) + rx_outer_inner) + (((int)threadIdx.x) % 7)) + 72)] * kernel_shared[(((((((((int)threadIdx.x) / 7) * 576) + (ff_outer_inner * 288)) + (rc_outer_inner * 144)) + (rc_inner * 9)) + rx_outer_inner) + 6)]));
              }
            }
          }
        }
      }
      for (int i1_inner = 0; i1_inner < 2; ++i1_inner) {
        for (int i2_inner = 0; i2_inner < 7; ++i2_inner) {
          compute[(((((((int)blockIdx.x) * 1568) + ((((int)threadIdx.x) / 7) * 98)) + (i1_inner * 49)) + (i2_inner * 7)) + (((int)threadIdx.x) % 7))] = max((conv2d_nchw[((i1_inner * 7) + i2_inner)] + bias[(((((int)blockIdx.x) * 32) + ((((int)threadIdx.x) / 7) * 2)) + i1_inner)]), 0.000000e+00f);
        }
      }
    }






.. GENERATED FROM PYTHON SOURCE LINES 187-191

A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.

.. GENERATED FROM PYTHON SOURCE LINES 191-213

.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resume search:
    /venv/apache-tvm-py3.7/lib/python3.7/site-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  46.341 seconds)


.. _sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
