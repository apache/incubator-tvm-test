
.. DO NOT EDIT. THIS FILE WAS AUTOMATICALLY GENERATED BY
.. TVM'S MONKEY-PATCHED VERSION OF SPHINX-GALLERY. TO MAKE
.. CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "how_to/deploy_models/deploy_object_detection_pytorch.py"

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        This tutorial can be used interactively with Google Colab! You can also click
        :ref:`here <sphx_glr_download_how_to_deploy_models_deploy_object_detection_pytorch.py>` to run the Jupyter notebook locally.

        .. image:: https://raw.githubusercontent.com/tlc-pack/web-data/main/images/utilities/colab_button.svg
            :align: center
            :target: https://colab.research.google.com/github/apache/tvm-site/blob/asf-site/docs/_downloads/399e1d7889ca66b69d51655784827503/deploy_object_detection_pytorch.ipynb
            :width: 300px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_how_to_deploy_models_deploy_object_detection_pytorch.py:


Compile PyTorch Object Detection Models
=======================================
This article is an introductory tutorial to deploy PyTorch object
detection models with Relay VM.

For us to begin with, PyTorch should be installed.
TorchVision is also required since we will be using it as our model zoo.

A quick solution is to install via pip

.. code-block:: bash

    pip install torch
    pip install torchvision

or please refer to official site
https://pytorch.org/get-started/locally/

PyTorch versions should be backwards compatible but should be used
with the proper TorchVision version.

Currently, TVM supports PyTorch 1.7 and 1.4. Other versions may
be unstable.

.. GENERATED FROM PYTHON SOURCE LINES 42-56

.. code-block:: default


    import tvm
    from tvm import relay
    from tvm import relay
    from tvm.runtime.vm import VirtualMachine
    from tvm.contrib.download import download_testdata

    import numpy as np
    import cv2

    # PyTorch imports
    import torch
    import torchvision








.. GENERATED FROM PYTHON SOURCE LINES 57-59

Load pre-trained maskrcnn from torchvision and do tracing
---------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 59-96

.. code-block:: default

    in_size = 300

    input_shape = (1, 3, in_size, in_size)


    def do_trace(model, inp):
        model_trace = torch.jit.trace(model, inp)
        model_trace.eval()
        return model_trace


    def dict_to_tuple(out_dict):
        if "masks" in out_dict.keys():
            return out_dict["boxes"], out_dict["scores"], out_dict["labels"], out_dict["masks"]
        return out_dict["boxes"], out_dict["scores"], out_dict["labels"]


    class TraceWrapper(torch.nn.Module):
        def __init__(self, model):
            super().__init__()
            self.model = model

        def forward(self, inp):
            out = self.model(inp)
            return dict_to_tuple(out[0])


    model_func = torchvision.models.detection.maskrcnn_resnet50_fpn
    model = TraceWrapper(model_func(pretrained=True))

    model.eval()
    inp = torch.Tensor(np.random.uniform(0.0, 250.0, size=(1, 3, in_size, in_size)))

    with torch.no_grad():
        out = model(inp)
        script_module = do_trace(model, inp)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /venv/apache-tvm-py3.8/lib/python3.8/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
      warnings.warn(
    /venv/apache-tvm-py3.8/lib/python3.8/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=MaskRCNN_ResNet50_FPN_Weights.COCO_V1`. You can also use `weights=MaskRCNN_ResNet50_FPN_Weights.DEFAULT` to get the most up-to-date weights.
      warnings.warn(msg)
    Downloading: "https://download.pytorch.org/models/maskrcnn_resnet50_fpn_coco-bf2d0c1e.pth" to /workspace/.cache/torch/hub/checkpoints/maskrcnn_resnet50_fpn_coco-bf2d0c1e.pth
      0%|          | 0.00/170M [00:00<?, ?B/s]      4%|3         | 6.30M/170M [00:00<00:04, 35.7MB/s]      6%|5         | 9.71M/170M [00:00<00:06, 27.6MB/s]      8%|8         | 14.3M/170M [00:00<00:06, 27.1MB/s]     10%|9         | 16.9M/170M [00:00<00:07, 21.7MB/s]     13%|#3        | 22.3M/170M [00:00<00:05, 28.5MB/s]     15%|#4        | 25.2M/170M [00:00<00:05, 26.5MB/s]     18%|#7        | 30.3M/170M [00:01<00:05, 26.4MB/s]     19%|#9        | 32.9M/170M [00:01<00:06, 23.1MB/s]     24%|##3       | 40.0M/170M [00:01<00:04, 30.3MB/s]     27%|##7       | 46.3M/170M [00:01<00:03, 35.5MB/s]     29%|##9       | 49.8M/170M [00:01<00:03, 33.2MB/s]     33%|###2      | 56.0M/170M [00:01<00:03, 38.9MB/s]     37%|###6      | 62.3M/170M [00:02<00:02, 40.5MB/s]     39%|###9      | 66.3M/170M [00:02<00:03, 35.6MB/s]     42%|####2     | 72.0M/170M [00:02<00:02, 34.4MB/s]     44%|####4     | 75.4M/170M [00:02<00:03, 31.2MB/s]     46%|####6     | 78.4M/170M [00:02<00:03, 30.2MB/s]     48%|####7     | 81.3M/170M [00:02<00:03, 27.2MB/s]     51%|#####     | 86.3M/170M [00:02<00:02, 29.4MB/s]     52%|#####2    | 89.1M/170M [00:03<00:03, 26.4MB/s]     57%|#####6    | 96.0M/170M [00:03<00:02, 29.0MB/s]     60%|######    | 102M/170M [00:03<00:02, 34.0MB/s]      62%|######2   | 106M/170M [00:03<00:02, 31.3MB/s]     66%|######5   | 112M/170M [00:03<00:01, 34.8MB/s]     71%|#######   | 120M/170M [00:04<00:01, 34.3MB/s]     74%|#######4  | 126M/170M [00:04<00:01, 37.9MB/s]     77%|#######6  | 130M/170M [00:04<00:01, 32.7MB/s]     80%|########  | 136M/170M [00:04<00:01, 32.6MB/s]     85%|########4 | 144M/170M [00:04<00:00, 35.8MB/s]     87%|########6 | 147M/170M [00:04<00:00, 32.8MB/s]     89%|########8 | 151M/170M [00:05<00:00, 29.1MB/s]     90%|######### | 153M/170M [00:05<00:00, 25.1MB/s]     93%|#########3| 158M/170M [00:05<00:00, 26.0MB/s]     95%|#########4| 161M/170M [00:05<00:00, 21.6MB/s]     98%|#########7| 166M/170M [00:05<00:00, 22.0MB/s]     99%|#########9| 168M/170M [00:05<00:00, 21.0MB/s]    100%|##########| 170M/170M [00:06<00:00, 29.7MB/s]
    /venv/apache-tvm-py3.8/lib/python3.8/site-packages/torch/nn/functional.py:3912: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
      (torch.floor((input.size(i + 2).float() * torch.tensor(scale_factors[i], dtype=torch.float32)).float()))
    /venv/apache-tvm-py3.8/lib/python3.8/site-packages/torchvision/ops/boxes.py:157: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
      boxes_x = torch.min(boxes_x, torch.tensor(width, dtype=boxes.dtype, device=boxes.device))
    /venv/apache-tvm-py3.8/lib/python3.8/site-packages/torchvision/ops/boxes.py:159: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
      boxes_y = torch.min(boxes_y, torch.tensor(height, dtype=boxes.dtype, device=boxes.device))
    /venv/apache-tvm-py3.8/lib/python3.8/site-packages/torch/__init__.py:1209: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
      assert condition, message
    /venv/apache-tvm-py3.8/lib/python3.8/site-packages/torchvision/models/detection/transform.py:298: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
      torch.tensor(s, dtype=torch.float32, device=boxes.device)
    /venv/apache-tvm-py3.8/lib/python3.8/site-packages/torchvision/models/detection/transform.py:299: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
      / torch.tensor(s_orig, dtype=torch.float32, device=boxes.device)
    /venv/apache-tvm-py3.8/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:389: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
      return torch.tensor(M + 2 * padding).to(torch.float32) / torch.tensor(M).to(torch.float32)




.. GENERATED FROM PYTHON SOURCE LINES 97-99

Download a test image and pre-process
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 99-110

.. code-block:: default

    img_url = (
        "https://raw.githubusercontent.com/dmlc/web-data/master/gluoncv/detection/street_small.jpg"
    )
    img_path = download_testdata(img_url, "test_street_small.jpg", module="data")

    img = cv2.imread(img_path).astype("float32")
    img = cv2.resize(img, (in_size, in_size))
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    img = np.transpose(img / 255.0, [2, 0, 1])
    img = np.expand_dims(img, axis=0)








.. GENERATED FROM PYTHON SOURCE LINES 111-113

Import the graph to Relay
-------------------------

.. GENERATED FROM PYTHON SOURCE LINES 113-117

.. code-block:: default

    input_name = "input0"
    shape_list = [(input_name, input_shape)]
    mod, params = relay.frontend.from_pytorch(script_module, shape_list)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /workspace/python/tvm/relay/frontend/pytorch_utils.py:47: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
      return LooseVersion(torch_ver) > ver
    /venv/apache-tvm-py3.8/lib/python3.8/site-packages/setuptools/_distutils/version.py:346: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
      other = LooseVersion(other)
    /workspace/python/tvm/relay/build_module.py:345: DeprecationWarning: Please use input parameter mod (tvm.IRModule) instead of deprecated parameter mod (tvm.relay.function.Function)
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 118-124

Compile with Relay VM
---------------------
Note: Currently only CPU target is supported. For x86 target, it is
highly recommended to build TVM with Intel MKL and Intel OpenMP to get
best performance, due to the existence of large dense operator in
torchvision rcnn models.

.. GENERATED FROM PYTHON SOURCE LINES 124-133

.. code-block:: default


    # Add "-libs=mkl" to get best performance on x86 target.
    # For x86 machine supports AVX512, the complete target is
    # "llvm -mcpu=skylake-avx512 -libs=mkl"
    target = "llvm"

    with tvm.transform.PassContext(opt_level=3, disabled_pass=["FoldScaleAxis"]):
        vm_exec = relay.vm.compile(mod, target=target, params=params)








.. GENERATED FROM PYTHON SOURCE LINES 134-136

Inference with Relay VM
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 136-141

.. code-block:: default

    dev = tvm.cpu()
    vm = VirtualMachine(vm_exec, dev)
    vm.set_input("main", **{input_name: img})
    tvm_res = vm.run()








.. GENERATED FROM PYTHON SOURCE LINES 142-144

Get boxes with score larger than 0.9
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 144-154

.. code-block:: default

    score_threshold = 0.9
    boxes = tvm_res[0].numpy().tolist()
    valid_boxes = []
    for i, score in enumerate(tvm_res[1].numpy().tolist()):
        if score > score_threshold:
            valid_boxes.append(boxes[i])
        else:
            break

    print("Get {} valid boxes".format(len(valid_boxes)))




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Get 9 valid boxes





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  34.250 seconds)


.. _sphx_glr_download_how_to_deploy_models_deploy_object_detection_pytorch.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: deploy_object_detection_pytorch.py <deploy_object_detection_pytorch.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: deploy_object_detection_pytorch.ipynb <deploy_object_detection_pytorch.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
