:orphan:

User Tutorial
-------------

This tutorial provides an introduction to TVM, meant to address user who is new
to the TVM project. It begins with some basic information on how TVM works,
then works through installing TVM, compiling and optimizing models, then
digging in deeper to the Tensor Expression language and the tuning and
optimization tools that are built on top of it. After completing the tutorial,
a new user should be familiar enough with TVM to optimize models, and will be
prepared to dig into TVM more deeply.



.. raw:: html

    <div class="sphx-glr-thumbnails">

.. thumbnail-parent-div-open

.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="Apache TVM is an open source machine learning compiler framework for CPUs, GPUs, and machine learning accelerators. It aims to enable machine learning engineers to optimize and run computations efficiently on any hardware backend. The purpose of this tutorial is to take a guided tour through all of the major features of TVM by defining and demonstrating key concepts. A new user should be able to work through the tutorial from start to finish and be able to operate TVM for automatic model optimization, while having a basic understanding of the TVM architecture and how it works.">

.. only:: html

  .. image:: /tutorial/images/thumb/sphx_glr_introduction_thumb.png
    :alt:

  :ref:`sphx_glr_tutorial_introduction.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Introduction</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="In this section, we will work with TVMC, the TVM command line driver. TVMC is a tool that exposes TVM features such as auto-tuning, compiling, profiling and execution of models through a command line interface.">

.. only:: html

  .. image:: /tutorial/images/thumb/sphx_glr_tvmc_command_line_driver_thumb.png
    :alt:

  :ref:`sphx_glr_tutorial_tvmc_command_line_driver.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Compiling and Optimizing a Model with TVMC</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="Hi! Here we explain the scripting tool designed for the complete TVM beginner. ðŸ™‚">

.. only:: html

  .. image:: /tutorial/images/thumb/sphx_glr_tvmc_python_thumb.png
    :alt:

  :ref:`sphx_glr_tutorial_tvmc_python.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Getting Starting using TVMC Python: a high-level API for TVM</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="In the TVMC Tutorial, we covered how to compile, run, and tune a pre-trained vision model, ResNet-50 v2 using the command line interface for TVM, TVMC. TVM is more that just a command-line tool though, it is an optimizing framework with APIs available for a number of different languages that gives you tremendous flexibility in working with machine learning models.">

.. only:: html

  .. image:: /tutorial/images/thumb/sphx_glr_autotvm_relay_x86_thumb.png
    :alt:

  :ref:`sphx_glr_tutorial_autotvm_relay_x86.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Compiling and Optimizing a Model with the Python Interface (AutoTVM)</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="In this tutorial we will turn our attention to how TVM works with Tensor Expression (TE) to define tensor computations and apply loop optimizations. TE describes tensor computations in a pure functional language (that is each expression has no side effects). When viewed in context of the TVM as a whole, Relay describes a computation as a set of operators, and each of these operators can be represented as a TE expression where each TE expression takes input tensors and produces an output tensor.">

.. only:: html

  .. image:: /tutorial/images/thumb/sphx_glr_tensor_expr_get_started_thumb.png
    :alt:

  :ref:`sphx_glr_tutorial_tensor_expr_get_started.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Working with Operators Using Tensor Expression</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="In this tutorial, we show how the TVM Tensor Expression (TE) language can be used to write schedule templates that can be searched by AutoTVM to find the optimal schedule. This process is called Auto-Tuning, which helps automate the process of optimizing tensor computation.">

.. only:: html

  .. image:: /tutorial/images/thumb/sphx_glr_autotvm_matmul_x86_thumb.png
    :alt:

  :ref:`sphx_glr_tutorial_autotvm_matmul_x86.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Optimizing Operators with Schedule Templates and AutoTVM</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="In this tutorial, we will show how TVM&#x27;s Auto Scheduling feature can find optimal schedules without the need for writing a custom template.">

.. only:: html

  .. image:: /tutorial/images/thumb/sphx_glr_auto_scheduler_matmul_x86_thumb.png
    :alt:

  :ref:`sphx_glr_tutorial_auto_scheduler_matmul_x86.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Optimizing Operators with Auto-scheduling</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="TensorIR is a domain specific language for deep learning programs serving two broad purposes:">

.. only:: html

  .. image:: /tutorial/images/thumb/sphx_glr_tensor_ir_blitz_course_thumb.png
    :alt:

  :ref:`sphx_glr_tutorial_tensor_ir_blitz_course.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Blitz Course to TensorIR</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="This example shows how to build a neural network with Relay python frontend and generates a runtime library for Nvidia GPU with TVM. Notice that you need to build TVM with cuda and llvm enabled.">

.. only:: html

  .. image:: /tutorial/images/thumb/sphx_glr_relay_quick_start_thumb.png
    :alt:

  :ref:`sphx_glr_tutorial_relay_quick_start.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Quick Start Tutorial for Compiling Deep Learning Models</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="Making your Hardware Accelerator TVM-ready with UMA">

.. only:: html

  .. image:: /tutorial/images/thumb/sphx_glr_uma_thumb.png
    :alt:

  :ref:`sphx_glr_tutorial_uma.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Making your Hardware Accelerator TVM-ready with UMA</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="This is an introductory tutorial to TVM Operator Inventory (TOPI). TOPI provides numpy-style generic operations and schedules with higher abstractions than TVM. In this tutorial, we will see how TOPI can save us from writing boilerplate code in TVM.">

.. only:: html

  .. image:: /tutorial/images/thumb/sphx_glr_intro_topi_thumb.png
    :alt:

  :ref:`sphx_glr_tutorial_intro_topi.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Introduction to TOPI</div>
    </div>


.. thumbnail-parent-div-close

.. raw:: html

    </div>


.. toctree::
   :hidden:

   /tutorial/introduction
   /tutorial/tvmc_command_line_driver
   /tutorial/tvmc_python
   /tutorial/autotvm_relay_x86
   /tutorial/tensor_expr_get_started
   /tutorial/autotvm_matmul_x86
   /tutorial/auto_scheduler_matmul_x86
   /tutorial/tensor_ir_blitz_course
   /tutorial/relay_quick_start
   /tutorial/uma
   /tutorial/intro_topi



.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
