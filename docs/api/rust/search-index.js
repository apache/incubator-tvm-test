var searchIndex = JSON.parse('{\
"array":{"doc":"","t":"FF","n":["main","sum"],"q":["array",""],"d":["",""],"i":[0,0],"f":[[[]],[[[2,[1]]],[[5,[3,4]]]]],"p":[[4,"ArgValue"],[3,"Vec"],[4,"RetValue"],[4,"Error"],[4,"Result"]]},\
"basics":{"doc":"","t":"F","n":["main"],"q":["basics"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"compiler_ext":{"doc":"","t":"F","n":["tvm_export"],"q":["compiler_ext"],"d":[""],"i":[0],"f":[[1,[[3,[2]]]]],"p":[[15,"str"],[4,"Error"],[4,"Result"]]},\
"error":{"doc":"","t":"FF","n":["error","main"],"q":["error",""],"d":["",""],"i":[0,0],"f":[[[[2,[1]]],[[5,[3,4]]]],[[]]],"p":[[4,"ArgValue"],[3,"Vec"],[4,"RetValue"],[4,"Error"],[4,"Result"]]},\
"float":{"doc":"","t":"FF","n":["main","sum"],"q":["float",""],"d":["",""],"i":[0,0],"f":[[[]],[[[2,[1]]],[[5,[3,4]]]]],"p":[[4,"ArgValue"],[3,"Vec"],[4,"RetValue"],[4,"Error"],[4,"Result"]]},\
"int":{"doc":"","t":"FF","n":["main","sum"],"q":["int",""],"d":["",""],"i":[0,0],"f":[[[]],[[[2,[1]]],[[5,[3,4]]]]],"p":[[4,"ArgValue"],[3,"Vec"],[4,"RetValue"],[4,"Error"],[4,"Result"]]},\
"resnet":{"doc":"","t":"F","n":["main"],"q":["resnet"],"d":[""],"i":[0],"f":[[[],1]],"p":[[6,"Result"]]},\
"string":{"doc":"","t":"FF","n":["concat_str","main"],"q":["string",""],"d":["",""],"i":[0,0],"f":[[[[2,[1]]],[[5,[3,4]]]],[[]]],"p":[[4,"ArgValue"],[3,"Vec"],[4,"RetValue"],[4,"Error"],[4,"Result"]]},\
"test_rt_nn":{"doc":"","t":"RROF","n":["BATCH_SIZE","IN_DIM","check_sum","main"],"q":["test_rt_nn","","",""],"d":["","","",""],"i":[0,0,0,0],"f":[0,0,0,[[]]],"p":[]},\
"test_rt_tvm_basic":{"doc":"","t":"FAFFFFFFFAFFFFFFF","n":["main","tvm_mod","__extendhfsf2","__truncsfhf2","__tvm_main__","__tvm_module_ctx","__tvm_module_startup","default_function","default_function_compute_","ext","__extendhfsf2","__truncsfhf2","__tvm_main__","__tvm_module_ctx","__tvm_module_startup","default_function","default_function_compute_"],"q":["test_rt_tvm_basic","","test_rt_tvm_basic::tvm_mod","","","","","","","","test_rt_tvm_basic::tvm_mod::ext","","","","","",""],"d":["","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[[[]],0,[[],[[3,[1,2]]]],[[],[[3,[1,2]]]],[[],[[3,[1,2]]]],[[],[[3,[1,2]]]],[[],[[3,[1,2]]]],[[],[[3,[1,2]]]],[[],[[3,[1,2]]]],0,0,0,0,0,0,0,0],"p":[[4,"RetValue"],[3,"FuncCallError"],[4,"Result"]]},\
"test_rt_tvm_dso":{"doc":"","t":"F","n":["main"],"q":["test_rt_tvm_dso"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"tvm":{"doc":"TVM is a compiler stack for deep learning systems.","t":"NNNNDNDENNNENNDDNNNDNDNENNNNNNNNDNNMLLLLLLLLLLLLLLLAAMMLLAMOOOLLLLLLLLLLLLLLLLLLLLLLLLLLLALOLLLLLLALLLAALLLLLLAALLLLLLLLALLLLLLLLLLLLLLLLLFMMADENNLLLLFFLLLLLLLLLLLLLLLLLLLNNNDENNNNDNNLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNENDNNNNENNNNNNDMMMMENNNNNNNNNNNNDNNQNNNNNNNNNNDGENNNNIINNKLLLLLLLLLKLLLLLLLKALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLFFFKLLLLLLLLLLLLLLLLLLLLLLLLGDGRRRRRRDGRRRRRRRRRRRRRRDRRDGRRRRRRRRRRRRRRRRRRRRRRRRRFGRRRRRRRRRRRRRRRRRRRFFFFFFGFFFFGFFFFFDFFFFFFFGRRRRRFGFFFFFFFGFFFFFGFFFGFFFGGDGFFFGFFTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRGGGGGGGGGGGGDGGRGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGMLLLLMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLMLLMMLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGGGGGGGGGLLLLLLLLMLMLMMLLMMGLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGLLLLLLLLGGGGGGGGGMMMMMMLGCAAAAAAAAAAAADDLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLDDLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLNDDDDEDDDNNNNLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLALLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFDDDDDDLLLLLLLLLLLLFLLMMMLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLDDGLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLENDDNLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMLLLDDMLLLLMMMLLLLLLLMLLLLLLLLLLLLMMMMLLLLLLLLLDDDDDDDDDDDDDCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAMLLMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMLLLLLLLLLLLLLLLLLLMMMMMMMMLMLMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMAAADDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMDDDDLLLLLLLLMMMMLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLMDDDDDDDDDDDDDDDDDDDDDDMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLMMLLLLLLLLLLLLMLLMMLLLLLLLLLLLLLLLLLLLLLLLLMMLMLLLLLLLLLLLLLLLLLLDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMNDDNDDDDDDDDDDDDNDDDDDNDDDNDEDDDMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFENNIENNNNNNDNNNDNNENNNENNNNNNNDDNNNNNNIINDNNNDNENNNNNNDQNNDDNNNNENNNNDNNDSNDNNNNMAKLLLLLKLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLFLLLAMMLLLLLLLAMOLLLLLLLLLLLLLLLLLLLLKLLLLAFALLLLLLLLLLKLLLLLLLLLAAALLALMALLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLFMMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNDENNNNDNNMMNNNNNENDNNNNENNNNNNDMMMMENNNNNNNNNNNNDNNQNNNNNNNNNNDGENNNNIINNKKKAKFFFKLLLGDGRRRRRRDGRRRRRRRRRRRRRRDRRDGRRRRRRRRRRRRRRRRRRRRRRRRRFGRRRRRRRRRRRRRRRRRRRFFFFFFGFFFFGFFFFFDFFFFFFFGRRRRRFGFFFFFFFGFFFFFGFFFGFFFGGDGFFFGFFTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRGGGGGGGGGGGGDGGRGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGMMMMMMMMMMMMGGGGGGGGGMMMMMMGMMGGGGGGGGGGMMMMMMGDLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDSDDIIIIDQDDSKKFLLKLLKLLMLDDGGGDDLLLLMLLLLLLLLLLLLLLLFLLLLMLMMLLLLLLLLL","n":["CPU","CUDA","CUDAHost","CallFailed","DataType","DataTypeMismatch","Device","DeviceType","DiagnosticError","Downcast","EmptyArray","Error","ExtDev","FromCString","Function","FunctionNotFoundError","Infallible","InvalidDatatype","Metal","Module","ModuleLoadPath","NDArray","NDArray","NDArrayError","Null","NullHandle","OpenCL","Panic","ROCM","Raw","ShapeError","ToCString","TypeMismatchError","VPI","Vulkan","actual","bits","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","code","compiler","device","device_id","device_type","downcast","eq","errors","expected","export","export_mod","export_pass","float","float32","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_raw_tvm","from_str","function","hash","initialize","int","into","into","into","into","into","ir","is_type","itemsize","lanes","module","ndarray","new","partial_cmp","provide","provide","provide","provide","python","runtime","source","source","to_owned","to_string","to_string","to_string","to_string","to_string","transform","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","uint","version","actual","expected","graph_rt","CompilerConfig","Error","IO","TVM","borrow","borrow","borrow_mut","borrow_mut","compile_from_disk","compile_module","default","fmt","fmt","fmt","from","from","from","from","into","into","provide","source","to_string","try_from","try_from","try_into","try_into","type_id","type_id","CPU","CUDA","CUDAHost","Device","DeviceType","ExtDev","Metal","OpenCL","ROCM","UnsupportedDeviceError","VPI","Vulkan","as_arg_value","as_arg_value","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cl","clone","clone","clone_into","clone_into","cpu","cuda","default","default","device_id","device_type","eq","eq","ext_dev","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_str","hash","hash","into","into","into","llvm","metal","n","new","nvptx","provide","rocm","stackvm","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vpi","CallFailed","DataTypeMismatch","DiagnosticError","Downcast","EmptyArray","Error","FromCString","FunctionNotFoundError","Infallible","InvalidDatatype","ModuleLoadPath","NDArray","NDArrayError","Null","NullHandle","Panic","Raw","ShapeError","ToCString","TypeMismatchError","actual","expected","actual","expected","ArgValue","ArrayHandle","ArrayHandle","Bytes","Bytes","DataType","DataType","Device","Device","Float","Float","FuncHandle","FuncHandle","Function","Handle","Handle","Handle","Int","Int","ModuleHandle","ModuleHandle","NDArrayHandle","NDArrayHandle","Null","Null","ObjectHandle","ObjectHandle","RawArgs","Result","RetValue","Str","Str","String","String","ToFunction","Typed","UInt","UInt","args","as_arg_value","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone","clone_into","clone_into","clone_into","default","drop","ffi","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_tvm_value","from_tvm_value","get","get_boxed","handle","hash","into","into","into","into","into_raw","invoke","null","register","register_override","register_untyped","ret","to_function","to_owned","to_owned","to_owned","to_tvm_value","to_tvm_value","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tvm_callback","tvm_finalizer","type_id","type_id","type_id","type_id","BackendPackedCFunc","DLDataType","DLDataTypeCode","DLDataTypeCode_kDLBfloat","DLDataTypeCode_kDLComplex","DLDataTypeCode_kDLFloat","DLDataTypeCode_kDLInt","DLDataTypeCode_kDLOpaqueHandle","DLDataTypeCode_kDLUInt","DLDevice","DLDeviceType","DLDeviceType_kDLCPU","DLDeviceType_kDLCUDA","DLDeviceType_kDLCUDAHost","DLDeviceType_kDLCUDAManaged","DLDeviceType_kDLExtDev","DLDeviceType_kDLHexagon","DLDeviceType_kDLMetal","DLDeviceType_kDLOneAPI","DLDeviceType_kDLOpenCL","DLDeviceType_kDLROCM","DLDeviceType_kDLROCMHost","DLDeviceType_kDLVPI","DLDeviceType_kDLVulkan","DLDeviceType_kDLWebGPU","DLManagedTensor","DLPACK_ABI_VERSION","DLPACK_VERSION","DLTensor","FTVMParallelLambda","INT16_MAX","INT16_MIN","INT32_MAX","INT32_MIN","INT8_MAX","INT8_MIN","INTPTR_MAX","INTPTR_MIN","INT_FAST16_MAX","INT_FAST16_MIN","INT_FAST32_MAX","INT_FAST32_MIN","INT_FAST8_MAX","INT_FAST8_MIN","INT_LEAST16_MAX","INT_LEAST16_MIN","INT_LEAST32_MAX","INT_LEAST32_MIN","INT_LEAST8_MAX","INT_LEAST8_MIN","PTRDIFF_MAX","PTRDIFF_MIN","SIG_ATOMIC_MAX","SIG_ATOMIC_MIN","SIZE_MAX","TVMAPISetLastError","TVMArgTypeCode","TVMArgTypeCode_kDLDevice","TVMArgTypeCode_kTVMArgFloat","TVMArgTypeCode_kTVMArgInt","TVMArgTypeCode_kTVMBytes","TVMArgTypeCode_kTVMDLTensorHandle","TVMArgTypeCode_kTVMDataType","TVMArgTypeCode_kTVMExtBegin","TVMArgTypeCode_kTVMExtEnd","TVMArgTypeCode_kTVMExtReserveEnd","TVMArgTypeCode_kTVMModuleHandle","TVMArgTypeCode_kTVMNDArrayHandle","TVMArgTypeCode_kTVMNNVMFirst","TVMArgTypeCode_kTVMNNVMLast","TVMArgTypeCode_kTVMNullptr","TVMArgTypeCode_kTVMObjectHandle","TVMArgTypeCode_kTVMObjectRValueRefArg","TVMArgTypeCode_kTVMOpaqueHandle","TVMArgTypeCode_kTVMPackedFuncHandle","TVMArgTypeCode_kTVMStr","TVMArrayAlloc","TVMArrayCopyFromBytes","TVMArrayCopyFromTo","TVMArrayCopyToBytes","TVMArrayFree","TVMArrayFromDLPack","TVMArrayHandle","TVMArrayToDLPack","TVMBackendAllocWorkspace","TVMBackendFreeWorkspace","TVMBackendGetFuncFromEnv","TVMBackendPackedCFunc","TVMBackendParallelBarrier","TVMBackendParallelLaunch","TVMBackendRegisterEnvCAPI","TVMBackendRegisterSystemLibSymbol","TVMBackendRunOnce","TVMByteArray","TVMByteArrayFree","TVMCFuncSetReturn","TVMCbArgToReturn","TVMDLManagedTensorCallDeleter","TVMDeviceAllocDataSpace","TVMDeviceAllocDataSpaceWithScope","TVMDeviceCopyDataFromTo","TVMDeviceExtType","TVMDeviceExtType_TVMDeviceExtType_End","TVMDeviceExtType_kDLAOCL","TVMDeviceExtType_kDLMicroDev","TVMDeviceExtType_kDLSDAccel","TVMDeviceExtType_kOpenGL","TVMDeviceFreeDataSpace","TVMExtensionFuncDeclarer","TVMFuncCall","TVMFuncCreateFromCFunc","TVMFuncFree","TVMFuncGetGlobal","TVMFuncListGlobalNames","TVMFuncRegisterGlobal","TVMFuncRemoveGlobal","TVMFunctionHandle","TVMGetLastError","TVMModFree","TVMModGetFunction","TVMModImport","TVMModLoadFromFile","TVMModuleHandle","TVMObjectDerivedFrom","TVMObjectFree","TVMObjectGetTypeIndex","TVMObjectHandle","TVMObjectRetain","TVMObjectTypeIndex2Key","TVMObjectTypeKey2Index","TVMPackedCFunc","TVMPackedCFuncFinalizer","TVMParallelGroupEnv","TVMRetValueHandle","TVMSetStream","TVMStreamCreate","TVMStreamFree","TVMStreamHandle","TVMStreamStreamSynchronize","TVMSynchronize","TVMValue","TVM_VERSION","UINT16_MAX","UINT32_MAX","UINT8_MAX","UINTPTR_MAX","UINT_FAST16_MAX","UINT_FAST32_MAX","UINT_FAST8_MAX","UINT_LEAST16_MAX","UINT_LEAST32_MAX","UINT_LEAST8_MAX","WINT_MAX","WINT_MIN","_ATFILE_SOURCE","_BITS_STDINT_INTN_H","_BITS_STDINT_UINTN_H","_BITS_TIME64_H","_BITS_TYPESIZES_H","_BITS_TYPES_H","_BITS_WCHAR_H","_DEFAULT_SOURCE","_FEATURES_H","_POSIX_C_SOURCE","_POSIX_SOURCE","_STDC_PREDEF_H","_STDINT_H","_SYS_CDEFS_H","__FD_SETSIZE","__GLIBC_MINOR__","__GLIBC_USE_DEPRECATED_GETS","__GLIBC_USE_DEPRECATED_SCANF","__GLIBC_USE_IEC_60559_BFP_EXT","__GLIBC_USE_IEC_60559_BFP_EXT_C2X","__GLIBC_USE_IEC_60559_EXT","__GLIBC_USE_IEC_60559_FUNCS_EXT","__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X","__GLIBC_USE_IEC_60559_TYPES_EXT","__GLIBC_USE_ISOC2X","__GLIBC_USE_LIB_EXT2","__GLIBC__","__GNU_LIBRARY__","__HAVE_GENERIC_SELECTION","__INO_T_MATCHES_INO64_T","__KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64","__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI","__OFF_T_MATCHES_OFF64_T","__RLIM_T_MATCHES_RLIM64_T","__STATFS_MATCHES_STATFS64","__STDC_IEC_559_COMPLEX__","__STDC_IEC_559__","__STDC_IEC_60559_BFP__","__STDC_IEC_60559_COMPLEX__","__STDC_ISO_10646__","__SYSCALL_WORDSIZE","__TIMESIZE","__USE_ATFILE","__USE_FORTIFY_LEVEL","__USE_ISOC11","__USE_ISOC95","__USE_ISOC99","__USE_MISC","__USE_POSIX","__USE_POSIX199309","__USE_POSIX199506","__USE_POSIX2","__USE_POSIX_IMPLICITLY","__USE_XOPEN2K","__USE_XOPEN2K8","__WORDSIZE","__WORDSIZE_TIME64_COMPAT32","__blkcnt64_t","__blkcnt_t","__blksize_t","__caddr_t","__clock_t","__clockid_t","__daddr_t","__dev_t","__fsblkcnt64_t","__fsblkcnt_t","__fsfilcnt64_t","__fsfilcnt_t","__fsid_t","__fsword_t","__gid_t","__glibc_c99_flexarr_available","__id_t","__ino64_t","__ino_t","__int16_t","__int32_t","__int64_t","__int8_t","__int_least16_t","__int_least32_t","__int_least64_t","__int_least8_t","__intmax_t","__intptr_t","__key_t","__loff_t","__mode_t","__nlink_t","__off64_t","__off_t","__pid_t","__quad_t","__rlim64_t","__rlim_t","__sig_atomic_t","__socklen_t","__ssize_t","__suseconds64_t","__suseconds_t","__syscall_slong_t","__syscall_ulong_t","__time_t","__timer_t","__u_char","__u_int","__u_long","__u_quad_t","__u_short","__uid_t","__uint16_t","__uint32_t","__uint64_t","__uint8_t","__uint_least16_t","__uint_least32_t","__uint_least64_t","__uint_least8_t","__uintmax_t","__useconds_t","__val","as_arg_value","as_arg_value","as_arg_value","as_arg_value","bits","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_offset","cl","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","code","cpu","cuda","data","data","default","default","default","default","default","default","default","default","deleter","device","device_id","device_type","dl_tensor","dtype","eq","eq","eq","eq","eq","eq","eq","ext_dev","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","int_fast16_t","int_fast32_t","int_fast64_t","int_fast8_t","int_least16_t","int_least32_t","int_least64_t","int_least8_t","intmax_t","into","into","into","into","into","into","into","into","lanes","llvm","manager_ctx","metal","ndim","num_task","nvptx","rocm","shape","size","size_t","stackvm","strides","sync_handle","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tvm_index_t","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uint_fast16_t","uint_fast32_t","uint_fast64_t","uint_fast8_t","uint_least16_t","uint_least32_t","uint_least64_t","uint_least8_t","uintmax_t","v_device","v_float64","v_handle","v_int64","v_str","v_type","vpi","wchar_t","IRModule","arith","attrs","diagnostics","expr","function","module","op","relay","source_map","span","tir","ty","ConstIntBound","ConstIntBoundNode","as_arg_value","as_ptr","as_ref","as_ref","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","eq","fmt","fmt","from","from","from","from","from_ptr","hash","into","into","into_ptr","max_value","min_value","new","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","Attrs","BaseAttrsNode","as_arg_value","as_ptr","as_ref","as_ref","base","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","eq","fmt","fmt","from","from","from","from","from_ptr","hash","into","into","into_ptr","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","Bug","Diagnostic","DiagnosticBuilder","DiagnosticContext","DiagnosticContextNode","DiagnosticLevel","DiagnosticNode","DiagnosticRenderer","DiagnosticRendererNode","Error","Help","Note","Warning","as_arg_value","as_arg_value","as_arg_value","as_ptr","as_ptr","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","base","base","base","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bug","clone","clone","clone","clone_into","clone_into","clone_into","codespan","default","deref","deref","deref","diagnostics","emit","emit_fatal","eq","eq","eq","eq","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ptr","from_ptr","from_ptr","hash","hash","hash","help","into","into","into","into","into","into","into","into","into_ptr","into_ptr","into_ptr","level","level","message","message","module","new","new","new","note","render","render","renderer","span","span","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warning","init","BaseExpr","BaseExprNode","GlobalVar","GlobalVarNode","PrimExpr","PrimExprNode","as_arg_value","as_arg_value","as_arg_value","as_ptr","as_ptr","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_text","base","base","base","base","base","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","datatype","deref","deref","deref","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ptr","from_ptr","from_ptr","hash","hash","hash","into","into","into","into","into","into","into_ptr","into_ptr","into_ptr","name_hint","new","span","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","BaseFunc","BaseFuncNode","DictAttrs","as_arg_value","as_ptr","as_ref","as_ref","attrs","base","base","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","eq","fmt","fmt","from","from","from","from","from_ptr","hash","into","into","into_ptr","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","Error","IO","IRModule","IRModuleNode","TVM","add","add_def","as_arg_value","as_ptr","as_ref","as_ref","base","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","contains_global_type_var","contains_global_var","deref","empty","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_expr","from_expr_with_items","from_ptr","functions","get_global_type_vars","get_global_var","get_global_vars","hash","import","import_from_std","into","into","into","into_ptr","lookup","lookup_def","lookup_def_str","lookup_str","lookup_tag","new","parse","parse_file","provide","source","source_map","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_definitions","type_id","type_id","type_id","Op","OpNode","arguments","as_arg_value","as_ptr","as_ref","as_ref","attrs_type_index","attrs_type_key","base","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","description","eq","fmt","fmt","from","from","from","from","from_ptr","hash","into","into","into_ptr","name","num_inputs","op_type","support_level","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","Call","CallNode","Clause","ClauseNode","Constant","ConstantNode","Constructor","ConstructorNode","DataType","Expr","ExprNode","Function","FunctionNode","GlobalVar","GlobalVarNode","Id","IdNode","If","IfNode","Let","LetNode","Match","MatchNode","Pattern","PatternConstructor","PatternConstructorNode","PatternNode","PatternTuple","PatternTupleNode","PatternVar","PatternVarNode","PatternWildcard","PatternWildcardNode","RefCreate","RefCreateNode","RefRead","RefReadNode","RefWrite","RefWriteNode","Tuple","TupleGetItem","TupleGetItemNode","TupleNode","Var","VarNode","args","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","attrs","attrs","base","base","base","base","base","base","base","base","base","base","base","base","base","base","base","base","base","base","base","base","base","base","base","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_type","clauses","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","complete","cond","constructor","data","data","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","false_branch","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","index","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","lhs","name_hint","name_hint","name_hint","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","op","params","patterns","patterns","ref_value","ref_value","ret_type","rhs","simple","span","static_tensor","tag","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","true_branch","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tuple","type_annotation","type_args","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","value","value","value","var","var","vid","virtual_device","nn","reduce","transform","AvgPool2DAttrs","AvgPool2DAttrsNode","BatchMatmulAttrs","BatchMatmulAttrsNode","BatchNormAttrs","BatchNormAttrsNode","BiasAddAttrs","BiasAddAttrsNode","Conv1DAttrs","Conv1DAttrsNode","Conv2DAttrs","Conv2DAttrsNode","Conv3DAttrs","Conv3DAttrsNode","Conv3DTransposeAttrs","Conv3DTransposeAttrsNode","DenseAttrs","DenseAttrsNode","DropoutAttrs","DropoutAttrsNode","GlobalPool2DAttrs","GlobalPool2DAttrsNode","LayerNormAttrs","LayerNormAttrsNode","LeakyReluAttrs","LeakyReluAttrsNode","MatmulAttrs","MatmulAttrsNode","MaxPool2DAttrs","MaxPool2DAttrsNode","PadAttrs","PadAttrsNode","SoftmaxAttrs","SoftmaxAttrsNode","UpSamplingAttrs","UpSamplingAttrsNode","align_corners","alpha","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","auto_scheduler_rewritten_layout","auto_scheduler_rewritten_layout","auto_scheduler_rewritten_layout","auto_scheduler_rewritten_layout","axis","axis","axis","axis","base","base","base","base","base","base","base","base","base","base","base","base","base","base","base","base","base","base","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil_mode","ceil_mode","center","center","channels","channels","channels","channels","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count_include_pad","data_layout","data_layout","data_layout","data_layout","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","dilation","dilation","dilation","dilation","dilation","dilation","epsilon","epsilon","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","groups","groups","groups","groups","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","kernel_layout","kernel_layout","kernel_layout","kernel_layout","kernel_size","kernel_size","kernel_size","kernel_size","layout","layout","layout","layout","method","out_dtype","out_dtype","out_dtype","out_dtype","out_dtype","out_dtype","out_dtype","out_layout","out_layout","out_layout","out_layout","output_padding","pad_mode","pad_width","padding","padding","padding","padding","padding","padding","pool_size","pool_size","rate","scale","scale","scale_h","scale_w","strides","strides","strides","strides","strides","strides","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transpose_a","transpose_b","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","units","units","ReduceAttrs","ReduceAttrsNode","VarianceAttrs","VarianceAttrsNode","as_arg_value","as_arg_value","as_ptr","as_ptr","as_ref","as_ref","as_ref","as_ref","axis","axis","base","base","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","eq","eq","exclude","exclude","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_ptr","from_ptr","hash","hash","into","into","into","into","into_ptr","into_ptr","keepdims","keepdims","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unbiased","CastAttrs","CastAttrsNode","ClipAttrs","ClipAttrsNode","ConcatenateAttrs","ConcatenateAttrsNode","ExpandDimsAttrs","ExpandDimsAttrsNode","ReshapeAttrs","ReshapeAttrsNode","SplitAttrs","SplitAttrsNode","SqueezeAttrs","SqueezeAttrsNode","StackAttrs","StackAttrsNode","StridedSliceAttrs","StridedSliceAttrsNode","TakeAttrs","TakeAttrsNode","TransposeAttrs","TransposeAttrsNode","a_max","a_min","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","axes","axis","axis","axis","axis","axis","axis","base","base","base","base","base","base","base","base","base","base","base","batch_dims","begin","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","dtype","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","indices_or_sections","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","mode","newshape","num_newaxis","reverse","slice_mode","strides","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Source","SourceMap","SourceMapNode","SourceNode","as_arg_value","as_arg_value","as_ptr","as_ptr","as_ref","as_ref","as_ref","as_ref","base","base","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_ptr","from_ptr","hash","hash","into","into","into","into","into_ptr","into_ptr","source","source_map","source_name","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","SourceName","SourceNameNode","Span","SpanNode","as_arg_value","as_arg_value","as_ptr","as_ptr","as_ref","as_ref","as_ref","as_ref","base","base","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","column","deref","deref","end_column","end_line","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_ptr","from_ptr","hash","hash","into","into","into","into","into_ptr","into_ptr","line","name","new","source_name","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Add","AddNode","And","AndNode","Cast","CastNode","Div","DivNode","Eq","EqNode","FloorDiv","FloorDivNode","FloorMod","FloorModNode","Ge","GeNode","Gt","GtNode","IntImm","IntImmNode","Le","LeNode","Let","LetNode","Lt","LtNode","Max","MaxNode","Min","MinNode","Mod","ModNode","Mul","MulNode","Ne","NeNode","Not","NotNode","Or","OrNode","Ramp","RampNode","Select","SelectNode","Sub","SubNode","Var","VarNode","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","condition","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","false_value","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","lanes","name_hint","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","start","stride","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","true_value","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","value","value","var","AdtHandle","BaseTensorType","BaseTensorTypeNode","Constraint","FuncType","FuncTypeNode","GlobalTypeVar","GlobalTypeVarNode","IncompleteType","IncompleteTypeNode","PointerType","PointerTypeNode","PrimType","PrimTypeNode","RefType","RelayRefTypeNode","ShapeVar","TensorType","TensorTypeNode","TupleType","TupleTypeNode","Type","Type","TypeConstraint","TypeConstraintNode","TypeData","TypeData","TypeDataNode","TypeKind","TypeNode","TypeVar","TypeVarNode","arg_types","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","base","base","base","base","base","base","base","base","base","base","base","base","base","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","constructors","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","dtype","dtype","element_type","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","into_ptr","kind","kind","kind","name_hint","name_hint","new","new","new","new","ret_type","shape","span","static_sh","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_constraints","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_name","type_params","type_vars","value","Module","ModuleNode","as_arg_value","as_ptr","as_ref","as_ref","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default_fn","deref","enabled","eq","export_library","fmt","fmt","from","from","from","from","from_ptr","get_function","handle","hash","import_module","into","into","into_ptr","load","save_to_file","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","BITS","NDArray","NDArrayContainer","Num32","as_arg_value","as_dltensor","as_mut_ptr","as_ptr","as_ref","as_ref","borrow","borrow","borrow_mut","borrow_mut","byte_offset","clone","clone_into","copy_from_buffer","copy_to_buffer","copy_to_device","copy_to_ndarray","deref","device","dtype","empty","eq","fill_from_iter","fmt","fmt","from","from","from","from","from_ptr","from_rust_ndarray","hash","into","into","into_ptr","is_contiguous","is_empty","is_view","leak","len","ndim","shape","shape_usize","size","strides","strides_usize","to_bytearray","to_owned","to_vec","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","zeroed","import","load","ArgValue","ArrayHandle","ArrayHandle","AsArgValue","ByteArray","Bytes","Bytes","CPU","CUDA","CUDAHost","CallFailed","DataType","DataType","DataType","DataTypeMismatch","Device","Device","Device","DeviceType","DiagnosticError","Downcast","EmptyArray","Error","ExtDev","External","Float","Float","FromCString","FuncHandle","FuncHandle","Function","FunctionNotFoundError","Handle","Handle","Infallible","Int","Int","InvalidDatatype","IsObject","IsObjectRef","Metal","Module","ModuleHandle","ModuleHandle","ModuleLoadPath","NDArray","NDArray","NDArrayError","NDArrayHandle","NDArrayHandle","Null","Null","Null","NullHandle","Object","Object","ObjectHandle","ObjectHandle","ObjectPtr","ObjectRef","OpenCL","Panic","ROCM","Raw","RetValue","Rust","ShapeError","Str","Str","String","String","String","StringObj","TYPE_KEY","ToCString","TypeMismatchError","UInt","UInt","VPI","Vulkan","actual","array","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_arg_value","as_bytes","as_ptr","as_ptr","as_ptr","as_ptr","as_ref","as_ref","as_ref","as_ref","as_str","base","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_call","clone","clone","clone","clone_into","clone_into","clone_into","cmp","count","count","data","debug_print","deref","deref","deref","device","device_id","device_type","downcast","downcast","drop","drop","eq","eq","eq","errors","expected","external","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_arg_value","from_ptr","from_ptr","from_ptr","from_raw","from_ret_value","function","get_last_error","graph_rt","hash","hash","hash","into","into","into","into","into","into","into_arg_value","into_ptr","into_ptr","into_ptr","into_raw","into_ret_value","is_empty","is_empty","leak","len","len","map","module","ndarray","new","null","object","partial_cmp","ptr","string","to_owned","to_owned","to_owned","to_string","to_string_lossy","to_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","tvm_call","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","version","actual","expected","Array","IntoIter","as_arg_value","as_ptr","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","from_iter","from_ptr","from_vec","get","into","into","into_iter","into_iter","into_ptr","into_py_dict","into_py_dict","len","next","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","CPU","CUDA","CUDAHost","Device","DeviceType","ExtDev","Metal","OpenCL","ROCM","UnsupportedDeviceError","VPI","Vulkan","device_id","device_type","CallFailed","DataTypeMismatch","DiagnosticError","Downcast","EmptyArray","Error","FromCString","FunctionNotFoundError","Infallible","InvalidDatatype","ModuleLoadPath","NDArray","NDArrayError","Null","NullHandle","Panic","Raw","ShapeError","ToCString","TypeMismatchError","actual","expected","actual","expected","ArgValue","ArrayHandle","ArrayHandle","Bytes","Bytes","DataType","DataType","Device","Device","Float","Float","FuncHandle","FuncHandle","Function","Handle","Handle","Handle","Int","Int","ModuleHandle","ModuleHandle","NDArrayHandle","NDArrayHandle","Null","Null","ObjectHandle","ObjectHandle","RawArgs","Result","RetValue","Str","Str","String","String","ToFunction","Typed","UInt","UInt","args","call","drop","ffi","into_raw","register","register_override","register_untyped","ret","to_function","tvm_callback","tvm_finalizer","BackendPackedCFunc","DLDataType","DLDataTypeCode","DLDataTypeCode_kDLBfloat","DLDataTypeCode_kDLComplex","DLDataTypeCode_kDLFloat","DLDataTypeCode_kDLInt","DLDataTypeCode_kDLOpaqueHandle","DLDataTypeCode_kDLUInt","DLDevice","DLDeviceType","DLDeviceType_kDLCPU","DLDeviceType_kDLCUDA","DLDeviceType_kDLCUDAHost","DLDeviceType_kDLCUDAManaged","DLDeviceType_kDLExtDev","DLDeviceType_kDLHexagon","DLDeviceType_kDLMetal","DLDeviceType_kDLOneAPI","DLDeviceType_kDLOpenCL","DLDeviceType_kDLROCM","DLDeviceType_kDLROCMHost","DLDeviceType_kDLVPI","DLDeviceType_kDLVulkan","DLDeviceType_kDLWebGPU","DLManagedTensor","DLPACK_ABI_VERSION","DLPACK_VERSION","DLTensor","FTVMParallelLambda","INT16_MAX","INT16_MIN","INT32_MAX","INT32_MIN","INT8_MAX","INT8_MIN","INTPTR_MAX","INTPTR_MIN","INT_FAST16_MAX","INT_FAST16_MIN","INT_FAST32_MAX","INT_FAST32_MIN","INT_FAST8_MAX","INT_FAST8_MIN","INT_LEAST16_MAX","INT_LEAST16_MIN","INT_LEAST32_MAX","INT_LEAST32_MIN","INT_LEAST8_MAX","INT_LEAST8_MIN","PTRDIFF_MAX","PTRDIFF_MIN","SIG_ATOMIC_MAX","SIG_ATOMIC_MIN","SIZE_MAX","TVMAPISetLastError","TVMArgTypeCode","TVMArgTypeCode_kDLDevice","TVMArgTypeCode_kTVMArgFloat","TVMArgTypeCode_kTVMArgInt","TVMArgTypeCode_kTVMBytes","TVMArgTypeCode_kTVMDLTensorHandle","TVMArgTypeCode_kTVMDataType","TVMArgTypeCode_kTVMExtBegin","TVMArgTypeCode_kTVMExtEnd","TVMArgTypeCode_kTVMExtReserveEnd","TVMArgTypeCode_kTVMModuleHandle","TVMArgTypeCode_kTVMNDArrayHandle","TVMArgTypeCode_kTVMNNVMFirst","TVMArgTypeCode_kTVMNNVMLast","TVMArgTypeCode_kTVMNullptr","TVMArgTypeCode_kTVMObjectHandle","TVMArgTypeCode_kTVMObjectRValueRefArg","TVMArgTypeCode_kTVMOpaqueHandle","TVMArgTypeCode_kTVMPackedFuncHandle","TVMArgTypeCode_kTVMStr","TVMArrayAlloc","TVMArrayCopyFromBytes","TVMArrayCopyFromTo","TVMArrayCopyToBytes","TVMArrayFree","TVMArrayFromDLPack","TVMArrayHandle","TVMArrayToDLPack","TVMBackendAllocWorkspace","TVMBackendFreeWorkspace","TVMBackendGetFuncFromEnv","TVMBackendPackedCFunc","TVMBackendParallelBarrier","TVMBackendParallelLaunch","TVMBackendRegisterEnvCAPI","TVMBackendRegisterSystemLibSymbol","TVMBackendRunOnce","TVMByteArray","TVMByteArrayFree","TVMCFuncSetReturn","TVMCbArgToReturn","TVMDLManagedTensorCallDeleter","TVMDeviceAllocDataSpace","TVMDeviceAllocDataSpaceWithScope","TVMDeviceCopyDataFromTo","TVMDeviceExtType","TVMDeviceExtType_TVMDeviceExtType_End","TVMDeviceExtType_kDLAOCL","TVMDeviceExtType_kDLMicroDev","TVMDeviceExtType_kDLSDAccel","TVMDeviceExtType_kOpenGL","TVMDeviceFreeDataSpace","TVMExtensionFuncDeclarer","TVMFuncCall","TVMFuncCreateFromCFunc","TVMFuncFree","TVMFuncGetGlobal","TVMFuncListGlobalNames","TVMFuncRegisterGlobal","TVMFuncRemoveGlobal","TVMFunctionHandle","TVMGetLastError","TVMModFree","TVMModGetFunction","TVMModImport","TVMModLoadFromFile","TVMModuleHandle","TVMObjectDerivedFrom","TVMObjectFree","TVMObjectGetTypeIndex","TVMObjectHandle","TVMObjectRetain","TVMObjectTypeIndex2Key","TVMObjectTypeKey2Index","TVMPackedCFunc","TVMPackedCFuncFinalizer","TVMParallelGroupEnv","TVMRetValueHandle","TVMSetStream","TVMStreamCreate","TVMStreamFree","TVMStreamHandle","TVMStreamStreamSynchronize","TVMSynchronize","TVMValue","TVM_VERSION","UINT16_MAX","UINT32_MAX","UINT8_MAX","UINTPTR_MAX","UINT_FAST16_MAX","UINT_FAST32_MAX","UINT_FAST8_MAX","UINT_LEAST16_MAX","UINT_LEAST32_MAX","UINT_LEAST8_MAX","WINT_MAX","WINT_MIN","_ATFILE_SOURCE","_BITS_STDINT_INTN_H","_BITS_STDINT_UINTN_H","_BITS_TIME64_H","_BITS_TYPESIZES_H","_BITS_TYPES_H","_BITS_WCHAR_H","_DEFAULT_SOURCE","_FEATURES_H","_POSIX_C_SOURCE","_POSIX_SOURCE","_STDC_PREDEF_H","_STDINT_H","_SYS_CDEFS_H","__FD_SETSIZE","__GLIBC_MINOR__","__GLIBC_USE_DEPRECATED_GETS","__GLIBC_USE_DEPRECATED_SCANF","__GLIBC_USE_IEC_60559_BFP_EXT","__GLIBC_USE_IEC_60559_BFP_EXT_C2X","__GLIBC_USE_IEC_60559_EXT","__GLIBC_USE_IEC_60559_FUNCS_EXT","__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X","__GLIBC_USE_IEC_60559_TYPES_EXT","__GLIBC_USE_ISOC2X","__GLIBC_USE_LIB_EXT2","__GLIBC__","__GNU_LIBRARY__","__HAVE_GENERIC_SELECTION","__INO_T_MATCHES_INO64_T","__KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64","__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI","__OFF_T_MATCHES_OFF64_T","__RLIM_T_MATCHES_RLIM64_T","__STATFS_MATCHES_STATFS64","__STDC_IEC_559_COMPLEX__","__STDC_IEC_559__","__STDC_IEC_60559_BFP__","__STDC_IEC_60559_COMPLEX__","__STDC_ISO_10646__","__SYSCALL_WORDSIZE","__TIMESIZE","__USE_ATFILE","__USE_FORTIFY_LEVEL","__USE_ISOC11","__USE_ISOC95","__USE_ISOC99","__USE_MISC","__USE_POSIX","__USE_POSIX199309","__USE_POSIX199506","__USE_POSIX2","__USE_POSIX_IMPLICITLY","__USE_XOPEN2K","__USE_XOPEN2K8","__WORDSIZE","__WORDSIZE_TIME64_COMPAT32","__blkcnt64_t","__blkcnt_t","__blksize_t","__caddr_t","__clock_t","__clockid_t","__daddr_t","__dev_t","__fsblkcnt64_t","__fsblkcnt_t","__fsfilcnt64_t","__fsfilcnt_t","__fsid_t","__fsword_t","__gid_t","__glibc_c99_flexarr_available","__id_t","__ino64_t","__ino_t","__int16_t","__int32_t","__int64_t","__int8_t","__int_least16_t","__int_least32_t","__int_least64_t","__int_least8_t","__intmax_t","__intptr_t","__key_t","__loff_t","__mode_t","__nlink_t","__off64_t","__off_t","__pid_t","__quad_t","__rlim64_t","__rlim_t","__sig_atomic_t","__socklen_t","__ssize_t","__suseconds64_t","__suseconds_t","__syscall_slong_t","__syscall_ulong_t","__time_t","__timer_t","__u_char","__u_int","__u_long","__u_quad_t","__u_short","__uid_t","__uint16_t","__uint32_t","__uint64_t","__uint8_t","__uint_least16_t","__uint_least32_t","__uint_least64_t","__uint_least8_t","__uintmax_t","__useconds_t","__val","bits","byte_offset","code","data","data","deleter","device","device_id","device_type","dl_tensor","dtype","int_fast16_t","int_fast32_t","int_fast64_t","int_fast8_t","int_least16_t","int_least32_t","int_least64_t","int_least8_t","intmax_t","lanes","manager_ctx","ndim","num_task","shape","size","size_t","strides","sync_handle","tvm_index_t","uint_fast16_t","uint_fast32_t","uint_fast64_t","uint_fast8_t","uint_least16_t","uint_least32_t","uint_least64_t","uint_least8_t","uintmax_t","v_device","v_float64","v_handle","v_int64","v_str","v_type","wchar_t","GraphRt","borrow","borrow_mut","create_from_parts","from","from_module","get_output","get_output_into","into","load_params","run","set_input","try_from","try_into","type_id","IntoIter","Map","as_arg_value","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","fmt","from","from","from_data","from_iter","get","into","into","into_iter","into_iter","into_py_dict","into_py_dict","next","null","size_hint","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","Module","ModuleNode","BITS","NDArray","NDArrayContainer","Num32","AsArgValue","IsObject","IsObjectRef","Object","Object","ObjectPtr","ObjectRef","TYPE_KEY","as_arg_value","as_ptr","debug_print","downcast","from_arg_value","from_ptr","from_ret_value","into_arg_value","into_ptr","into_ret_value","null","ptr","upcast","String","StringObj","IRModule","Pass","PassContext","PassInfo","PassInfoNode","as_arg_value","as_ptr","as_ref","as_ref","base","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","eq","fmt","fmt","from","from","from","from","from_ptr","function_pass","hash","into","into","into_ptr","name","new","opt_level","required","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["tvm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm::NDArrayError","","tvm::compiler","tvm::compiler::graph_rt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm::device","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm::errors","","","","","","","","","","","","","","","","","","","","","","tvm::errors::NDArrayError","","tvm::functiontvm::function::ffitvm::ir","","","","","","","","","","","","","tvm::ir::arith","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm::ir::attrs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm::ir::diagnostics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm::ir::diagnostics::codespan","tvm::ir::expr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm::ir::function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm::ir::module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm::ir::op","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm::ir::relay","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm::ir::relay::attrs","","","tvm::ir::relay::attrs::nntvm::ir::relay::attrs::reduce","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm::ir::relay::attrs::transformtvm::ir::source_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm::ir::span","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm::ir::tirtvm::ir::tytvm::module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm::ndarray","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm::python","","tvm::runtime","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm::runtime::NDArrayError","","tvm::runtime::array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm::runtime::device","","","","","","","","","","","","","","tvm::runtime::errors","","","","","","","","","","","","","","","","","","","","","","tvm::runtime::errors::NDArrayError","","tvm::runtime::function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm::runtime::function::ffitvm::runtime::graph_rt","","","","","","","","","","","","","","","tvm::runtime::map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm::runtime::module","","tvm::runtime::ndarray","","","","tvm::runtime::object","","","","","","","","","","","","","","","","","","","","","tvm::runtime::string","","tvm::transform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","Device type represents the set of devices supported by TVM.","","","","","","","An owned thread-safe version of <code>tvm::PackedFunc</code> for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","This module provides an idiomatic Rust API for creating …","","A macro for generating the correct TVM symbols for plugin …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns whether this <code>DataType</code> represents primitive type <code>T</code>.","Returns the number of bytes occupied by an element of this …","","Provides the <code>Module</code> type and methods for working with …","This module implements the <code>NDArray</code> type for working with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Outputs the current TVM version.","","","","","","","","","","","","Compile an IRModule on disk and output a runtime module to …","Compile a module from a configuration and IRModule.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Device type represents the set of devices supported by TVM.","","","","","","","","","","","","","","","","","","","","","","","default device is cpu.","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A borrowed TVMPODValue. Can be constructed using <code>into()</code> …","","","","","","","","","","","","","An owned thread-safe version of <code>tvm::PackedFunc</code> for …","","","","","","","","","","","","","","","","An owned TVMPODValue. Can be converted from a variety of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","The low-level C runtime FFI API for TVM.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchangedeturns the argument unchanged.","","","","For a given function, it returns a function by name.","","Returns the underlying TVM function handle.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls the function that created from <code>Builder</code>.","","Registers a Rust function with an arbitrary type signature …","Register a function with explicit control over whether to …","","","","","","","","","","","","","","","","","","","","","The callback function which is wrapped converted by TVM …","The finalizer which is invoked when the packed function’s","","","","","","\\\\brief The data type the tensor can hold. The data type is …","\\\\brief The type code options DLDataType.","\\\\brief bfloat16","\\\\brief complex number (C/C++/Python layout: compact struct …","\\\\brief IEEE floating point","\\\\brief signed integer","\\\\brief Opaque handle type, reserved for testing purposes. …","\\\\brief unsigned integer","\\\\brief A Device for Tensor and operator.","","\\\\brief CPU device","\\\\brief CUDA GPU device","\\\\brief Pinned CUDA CPU memory by cudaMallocHost","\\\\brief CUDA managed/unified memory allocated by …","\\\\brief Reserved extension device type, used for quickly …","\\\\brief Qualcomm Hexagon DSP","\\\\brief Metal for Apple GPU.","\\\\brief Unified shared memory allocated on a oneAPI …","\\\\brief OpenCL devices.","\\\\brief ROCm GPUs for AMD GPUs","\\\\brief Pinned ROCm CPU memory allocated by hipMallocHost","\\\\brief Verilog simulator buffer","\\\\brief Vulkan buffer for next generation graphics.","\\\\brief GPU support for next generation WebGPU standard.","\\\\brief C Tensor object, manage memory of DLTensor. This …","","","\\\\brief Plain C Tensor object, does not manage memory.","\\\\brief The callback function to execute a parallel lambda …","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\brief Used for implementing C API function. Set last …","\\\\brief The type code in used and only used in TVM FFI for …","","","","","","","","","","","","","","","","","","","","\\\\brief Allocate a nd-array’s memory, including space of …","\\\\brief Copy array data from CPU byte array. \\\\param handle …","\\\\brief Copy the array, both from and to must be valid …","\\\\brief Copy array data to CPU byte array. \\\\param handle …","\\\\brief Free the TVM Array. \\\\param handle The array handle …","\\\\brief Produce an array from the DLManagedTensor that …","\\\\brief the array handle","\\\\brief Produce a DLMangedTensor from the array that shares …","\\\\brief Backend function to allocate temporal workspace.","\\\\brief Backend function to free temporal workspace.","\\\\brief Backend function for modules to get function from …","\\\\brief Signature for backend functions exported as DLL.","\\\\brief BSP barrrier between parallel threads \\\\param …","\\\\brief Backend function for running parallel jobs.","\\\\brief Backend function to register execution …","\\\\brief Backend function to register system-wide library …","\\\\brief Simple static initialization function. Run f once …","\\\\brief Byte array type used to pass in byte array When …","\\\\brief Free a TVMByteArray returned from TVMFuncCall, and …","\\\\brief Set the return value of TVMPackedCFunc.","\\\\brief Inplace translate callback argument value to return …","\\\\brief Delete (free) a DLManagedTensor’s data. \\\\param …","\\\\brief Allocate a data space on device. \\\\param dev The …","\\\\brief Allocate a data space on device with special memory …","\\\\brief Copy data from one place to another. \\\\note This API …","","","","","","","\\\\brief Free a data space on device. \\\\param dev The device …","\\\\brief Signature for extension function declarer.","\\\\brief Call a Packed TVM Function.","\\\\brief Wrap a TVMPackedCFunc to become a FunctionHandle.","\\\\brief Free the function when it is no longer needed. …","\\\\brief Get a global function.","\\\\brief List all the globally registered function name …","\\\\brief Register the function to runtime’s global table.","\\\\brief Remove a global function. \\\\param name The name of …","\\\\brief Handle to packed function handle.","\\\\brief return str message of the last error all function …","\\\\brief Free the Module \\\\param mod The module to be freed.","\\\\brief Get function from the module. \\\\param mod The module …","\\\\brief Add dep to mod’s dependency. This allows …","\\\\brief Load module from file. \\\\param file_name The file …","\\\\brief Handle to TVM runtime modules.","\\\\brief Check that an object is derived from another. …","\\\\brief Free the object.","\\\\brief Get the type_index from an object.","\\\\brief Handle to Object.","\\\\brief Increase the reference count of an object.","\\\\brief Convert type index to type key. \\\\param tindex The …","\\\\brief Convert type key to type index. \\\\param type_key The …","\\\\brief C type of packed function.","\\\\brief C callback to free the resource handle in C packed …","\\\\brief Environment for TVM parallel task.","\\\\brief Handle to hold return value.","\\\\brief Set the runtime stream of current thread to be …","\\\\brief Create a new runtime stream.","\\\\brief Free a created stream handle.","\\\\brief The stream that is specific to device can be NULL, …","\\\\brief Synchronize two streams of execution.","\\\\brief Wait until all computations on stream completes.","\\\\brief Union type of values being passed through API and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\brief Number of bits, common choices are 8, 16, 32.","","","","","","","","","","","","","","","","","\\\\brief The offset in bytes to the beginning pointer to data","","","","","","","","","","","","","","","","","","\\\\brief Type code of base types. We keep it uint8_t instead …","","","\\\\brief The data pointer points to the allocated data. This …","","","","","","","","","","\\\\brief Destructor signature void (<em>)(void</em>) - this should be …","\\\\brief The device of the tensor","\\\\brief The device index. For vanilla CPU memory, pinned …","\\\\brief The device type used in the device.","\\\\brief DLTensor which is being memory managed","\\\\brief The data type of the pointer","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","\\\\brief Number of lanes in the type, used for vector types.","","\\\\brief the context of the original host framework of …","","\\\\brief Number of dimensions","\\\\brief total amount of task","","","\\\\brief The shape of the tensor","","","","\\\\brief strides of the tensor (in number of elements, not …","\\\\brief Auxiliary used for synchronization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\brief type of array index.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","A wrapper around std::stringstream to build a diagnostic.","","A diagnostic context for recording errors against a source …","The diagnostic level, controls the printing of the message.","A compiler diagnostic.","","Display diagnostics in a given display format.","","","","","","","","","","","","","","","","","","The base type.","","","","","","","","","","","","","","","","","","","","","","","","","A TVM diagnostics renderer which uses the Rust <code>codespan</code> …","","","","","The set of diagnostics to report.","Emit a diagnostic.","Emit a diagnostic and then immediately attempt to render …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","The level.","The level.","The in progress message.","The diagnostic message.","The Module to report against.","","","","","Render the provided context.","Render the errors and raise a DiagnosticError exception.","The renderer set for the context.","The span of the diagnostic.","The span at which to report an error.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Initialize the <code>codespan</code> based diagnostics.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A mapping from a unique source name to source fragments.","A program source in any language.","","","","","","","","","","The base object.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","The raw source.","The source mapping.","The source name.","","","","","","","","","","","","","","","","","","","","A source file name, contained in a Span.","","Span information for diagnostic purposes.","","","","","","","","","","","","","","","","","","","","","","","The column offset.","","","The end column number.","The end line number.","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","The line number.","","","The source nameeturns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The representation of a polymorphic function type.","","A global type variable that is used for defining new types …","","","","","","","","","Template variable in shape expression.","","","","","","","","","","","","Possible kinds of type variables.","","","Type parameter in functions.","The type of arguments.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The header is simply the name of the ADT. We adopt nominal …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The constructors.","","","","","","","","","","","","","","The corresponding dtype field.","","The type of the element which the pointer points to.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","The return type of the function.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Type constraints that must hold when calling this function.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","…","The type variables (to allow for polymorphism).","","","Wrapper around TVM module handle which contains an entry …","","","","","","","","","","","","","Checks if a target device is enabled for a module.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Gets a function by name from a registered module.","Returns the underlying module handle.","","Imports a dependent module such as <code>.ptx</code> for cuda gpu.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Loads a module shared library from path.","","","","","","","","","","","","","See the <code>module-level documentation</code> for more details.","A trait for the supported 32-bits numerical types in …","","","","","","","","","","","","","","Creates an NDArray from a mutable buffer of types i32, u32 …","","Copies the NDArray to a target device.","Copies the NDArray to another target NDArray.","","Returns the device which the NDArray was defined.","Returns the type of the entries of the NDArray.","Allocates and creates an empty NDArray given the shape, …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Converts a Rust’s ndarray to TVM NDArray.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Shows whether the underlying ndarray is contiguous in …","Returns true if the tensor is empty","","","Returns the total number of entries of the NDArray.","Returns the number of dimensions of the NDArray.","Returns the shape of the NDArray.","Returns the shape of the NDArray as a &amp;usize","Returns the total bytes taken up by the data. This is …","Returns the strides of the underlying NDArray.","Returns the strides of the NDArray as a &amp;usize","Converts the NDArray to <code>ByteArray</code>.","","Flattens the NDArray to a <code>Vec</code> of the same type in cpu.","","","","","","","","","","","Load the Python interpreter into the address space.","A borrowed TVMPODValue. Can be constructed using <code>into()</code> …","","","","A newtype wrapping a raw TVM byte-array.","","","","","","","","","","","","","","Device type represents the set of devices supported by TVM.","","","","","","","","","","","","An owned thread-safe version of <code>tvm::PackedFunc</code> for …","","","","","","","","An unsafe trait which should be implemented for an object …","","","","","","","","","","","","","","","","A TVM intrusive smart pointer header, in TVM all FFI …","","","","A smart pointer for types which implement IsObject. This …","","","","","","An owned TVMPODValue. Can be converted from a variety of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocates a base object value for an object subtype of …","","","","","","","","","","","","","","","","","","","","","","","Gets the underlying byte-array","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","This module provides an idiomatic Rust API for creating …","Gets the last error message.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Gets the length of the underlying byte-array","","","Provides the <code>Module</code> type and methods for working with …","This module implements the <code>NDArray</code> type for working with …","","","","","","","","","","","","Converts the underlying byte-array to <code>Vec&lt;u8&gt;</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Outputs the current TVM version.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Device type represents the set of devices supported by TVM.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A borrowed TVMPODValue. Can be constructed using <code>into()</code> …","","","","","","","","","","","","","An owned thread-safe version of <code>tvm::PackedFunc</code> for …","","","","","","","","","","","","","","","","An owned TVMPODValue. Can be converted from a variety of …","","","","","","","","","","","","The low-level C runtime FFI API for TVM.","","Registers a Rust function with an arbitrary type signature …","Register a function with explicit control over whether to …","","","","The callback function which is wrapped converted by TVM …","The finalizer which is invoked when the packed function’s","","\\\\brief The data type the tensor can hold. The data type is …","\\\\brief The type code options DLDataType.","\\\\brief bfloat16","\\\\brief complex number (C/C++/Python layout: compact struct …","\\\\brief IEEE floating point","\\\\brief signed integer","\\\\brief Opaque handle type, reserved for testing purposes. …","\\\\brief unsigned integer","\\\\brief A Device for Tensor and operator.","","\\\\brief CPU device","\\\\brief CUDA GPU device","\\\\brief Pinned CUDA CPU memory by cudaMallocHost","\\\\brief CUDA managed/unified memory allocated by …","\\\\brief Reserved extension device type, used for quickly …","\\\\brief Qualcomm Hexagon DSP","\\\\brief Metal for Apple GPU.","\\\\brief Unified shared memory allocated on a oneAPI …","\\\\brief OpenCL devices.","\\\\brief ROCm GPUs for AMD GPUs","\\\\brief Pinned ROCm CPU memory allocated by hipMallocHost","\\\\brief Verilog simulator buffer","\\\\brief Vulkan buffer for next generation graphics.","\\\\brief GPU support for next generation WebGPU standard.","\\\\brief C Tensor object, manage memory of DLTensor. This …","","","\\\\brief Plain C Tensor object, does not manage memory.","\\\\brief The callback function to execute a parallel lambda …","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\brief Used for implementing C API function. Set last …","\\\\brief The type code in used and only used in TVM FFI for …","","","","","","","","","","","","","","","","","","","","\\\\brief Allocate a nd-array’s memory, including space of …","\\\\brief Copy array data from CPU byte array. \\\\param handle …","\\\\brief Copy the array, both from and to must be valid …","\\\\brief Copy array data to CPU byte array. \\\\param handle …","\\\\brief Free the TVM Array. \\\\param handle The array handle …","\\\\brief Produce an array from the DLManagedTensor that …","\\\\brief the array handle","\\\\brief Produce a DLMangedTensor from the array that shares …","\\\\brief Backend function to allocate temporal workspace.","\\\\brief Backend function to free temporal workspace.","\\\\brief Backend function for modules to get function from …","\\\\brief Signature for backend functions exported as DLL.","\\\\brief BSP barrrier between parallel threads \\\\param …","\\\\brief Backend function for running parallel jobs.","\\\\brief Backend function to register execution …","\\\\brief Backend function to register system-wide library …","\\\\brief Simple static initialization function. Run f once …","\\\\brief Byte array type used to pass in byte array When …","\\\\brief Free a TVMByteArray returned from TVMFuncCall, and …","\\\\brief Set the return value of TVMPackedCFunc.","\\\\brief Inplace translate callback argument value to return …","\\\\brief Delete (free) a DLManagedTensor’s data. \\\\param …","\\\\brief Allocate a data space on device. \\\\param dev The …","\\\\brief Allocate a data space on device with special memory …","\\\\brief Copy data from one place to another. \\\\note This API …","","","","","","","\\\\brief Free a data space on device. \\\\param dev The device …","\\\\brief Signature for extension function declarer.","\\\\brief Call a Packed TVM Function.","\\\\brief Wrap a TVMPackedCFunc to become a FunctionHandle.","\\\\brief Free the function when it is no longer needed. …","\\\\brief Get a global function.","\\\\brief List all the globally registered function name …","\\\\brief Register the function to runtime’s global table.","\\\\brief Remove a global function. \\\\param name The name of …","\\\\brief Handle to packed function handle.","\\\\brief return str message of the last error all function …","\\\\brief Free the Module \\\\param mod The module to be freed.","\\\\brief Get function from the module. \\\\param mod The module …","\\\\brief Add dep to mod’s dependency. This allows …","\\\\brief Load module from file. \\\\param file_name The file …","\\\\brief Handle to TVM runtime modules.","\\\\brief Check that an object is derived from another. …","\\\\brief Free the object.","\\\\brief Get the type_index from an object.","\\\\brief Handle to Object.","\\\\brief Increase the reference count of an object.","\\\\brief Convert type index to type key. \\\\param tindex The …","\\\\brief Convert type key to type index. \\\\param type_key The …","\\\\brief C type of packed function.","\\\\brief C callback to free the resource handle in C packed …","\\\\brief Environment for TVM parallel task.","\\\\brief Handle to hold return value.","\\\\brief Set the runtime stream of current thread to be …","\\\\brief Create a new runtime stream.","\\\\brief Free a created stream handle.","\\\\brief The stream that is specific to device can be NULL, …","\\\\brief Synchronize two streams of execution.","\\\\brief Wait until all computations on stream completes.","\\\\brief Union type of values being passed through API and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\brief Number of bits, common choices are 8, 16, 32.","\\\\brief The offset in bytes to the beginning pointer to data","\\\\brief Type code of base types. We keep it uint8_t instead …","\\\\brief The data pointer points to the allocated data. This …","","\\\\brief Destructor signature void (<em>)(void</em>) - this should be …","\\\\brief The device of the tensor","\\\\brief The device index. For vanilla CPU memory, pinned …","\\\\brief The device type used in the device.","\\\\brief DLTensor which is being memory managed","\\\\brief The data type of the pointer","","","","","","","","","","\\\\brief Number of lanes in the type, used for vector types.","\\\\brief the context of the original host framework of …","\\\\brief Number of dimensions","\\\\brief total amount of task","\\\\brief The shape of the tensor","","","\\\\brief strides of the tensor (in number of elements, not …","\\\\brief Auxiliary used for synchronization","\\\\brief type of array index.","","","","","","","","","","","","","","","","","An instance of the C++ graph executor.","","","Create a graph executor from the deprecated graph, lib, …","Returns the argument unchanged.","Create a graph executor directly from a runtime module.","Extract the ith output from the graph executor and returns …","Extract the ith output from the graph executor and write …","Calls <code>U::from(self)</code>.","Load the parameters of the model into the runtime.","Run the graph module, once setting parameters and inputs.","Set the input with name <code>name</code> with the value of <code>input</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Wrapper around TVM module handle which contains an entry …","","","See the <code>module-level documentation</code> for more details.","A trait for the supported 32-bits numerical types in …","","An unsafe trait which should be implemented for an object …","","A TVM intrusive smart pointer header, in TVM all FFI …","","A smart pointer for types which implement IsObject. This …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[37,37,37,6,0,15,0,0,6,6,15,0,37,6,0,0,6,15,37,0,6,0,6,0,6,6,37,6,37,6,15,6,0,37,37,14,1,10,14,15,6,1,10,14,15,6,1,1,1,1,1,0,0,36,36,6,1,0,14,0,0,0,1,1,10,10,14,14,15,15,6,6,1,1,10,14,15,15,15,6,6,6,6,6,6,1,1,6,1,0,1,0,1,10,14,15,6,1,0,1,1,1,0,0,1,1,10,14,15,6,0,0,15,6,1,10,14,15,6,1,0,10,14,15,6,1,1,10,14,15,6,1,10,14,15,6,1,1,0,303,303,0,0,0,30,30,30,29,30,29,0,0,29,30,30,29,30,30,30,29,30,29,30,30,30,30,29,30,29,30,29,37,37,37,0,0,37,37,37,37,0,37,37,37,36,37,36,38,37,36,38,36,37,36,37,36,36,36,37,36,36,36,37,36,36,37,37,36,36,38,38,37,37,37,36,36,36,38,36,37,36,37,36,38,36,36,37,36,36,38,36,36,37,36,37,36,38,37,36,36,38,37,36,38,37,36,38,36,6,15,6,6,15,0,6,0,6,15,6,6,0,6,6,6,6,15,6,0,14,14,303,303,0,35,26,35,26,35,26,35,26,35,26,35,26,0,35,26,304,35,26,35,26,35,26,35,26,35,26,0,0,0,35,26,35,26,0,0,35,26,305,45,306,45,35,26,306,45,35,26,304,45,35,26,45,35,26,26,304,0,45,35,26,306,45,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,35,26,45,45,45,45,306,45,35,26,304,45,45,0,0,0,305,304,45,35,26,35,26,306,45,45,45,45,35,26,26,306,45,35,26,304,304,306,45,35,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,173,40,22,142,165,22,173,40,22,142,171,168,165,172,173,40,22,142,171,168,165,172,142,40,173,40,22,142,171,168,165,172,173,40,22,142,171,168,165,172,22,40,40,142,165,173,40,22,142,171,168,165,172,171,142,40,40,171,142,173,40,22,142,171,165,172,40,173,40,22,142,171,165,172,173,40,40,40,40,22,22,22,22,142,142,142,142,142,142,142,171,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,165,172,40,0,0,0,0,0,0,0,0,0,173,40,22,142,171,168,165,172,22,40,171,40,142,172,40,40,142,165,0,40,142,172,173,40,22,142,171,168,165,172,173,40,40,40,40,22,22,22,22,142,171,168,165,165,172,173,40,22,142,171,168,165,172,0,173,40,22,142,171,168,165,172,0,0,0,0,0,0,0,0,0,168,168,168,168,168,168,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,75,175,175,75,175,75,175,75,75,75,75,75,175,75,75,75,175,75,75,75,175,75,175,175,75,75,75,75,75,175,75,175,75,175,0,0,68,68,177,177,177,68,177,68,177,68,68,68,68,68,177,68,68,68,177,68,68,68,177,68,68,68,68,68,177,68,177,68,177,182,0,0,0,0,0,0,0,0,182,182,182,182,152,67,162,152,67,162,178,178,179,179,180,180,178,179,180,181,182,152,178,67,179,162,180,181,182,152,178,67,179,162,180,152,152,67,162,152,67,162,0,162,152,67,162,180,162,162,182,152,67,162,152,182,152,178,67,179,162,180,181,182,152,152,152,178,67,67,67,179,162,162,162,180,152,67,162,152,67,162,152,181,182,152,178,67,179,162,180,152,67,162,181,178,181,178,180,181,152,162,152,67,162,180,181,178,152,67,162,181,182,152,152,152,178,67,67,67,179,162,162,162,180,181,182,152,178,67,179,162,180,181,182,152,178,67,179,162,180,152,0,0,0,0,0,0,0,73,107,122,73,107,122,183,183,184,184,185,185,0,183,184,183,184,185,73,183,107,184,122,185,73,183,107,184,122,185,73,107,122,73,107,122,184,73,107,122,73,107,122,73,183,107,184,122,185,73,73,73,183,107,107,107,107,184,122,122,122,185,73,107,122,73,107,122,73,183,107,184,122,185,73,107,122,185,122,183,73,107,122,73,73,73,183,107,107,107,184,122,122,122,185,73,183,107,184,122,185,73,183,107,184,122,185,0,0,0,81,81,187,187,187,187,187,81,187,81,187,81,81,81,81,81,187,81,81,81,187,81,81,81,187,81,81,81,81,81,187,81,187,81,187,0,190,0,0,190,31,31,31,31,188,188,188,190,31,188,190,31,188,31,31,31,31,31,31,31,190,190,31,188,190,190,190,31,31,31,188,31,31,31,188,31,31,31,31,31,31,190,31,188,31,31,31,31,31,31,31,31,31,190,190,188,31,190,190,31,31,31,188,190,31,188,188,190,31,188,0,0,193,118,118,193,193,193,193,193,118,193,118,193,118,118,118,193,118,118,193,118,118,118,193,118,118,118,193,118,193,193,193,193,118,118,118,118,193,118,193,118,193,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,120,76,91,153,119,78,124,115,98,70,127,93,83,160,143,140,150,80,71,48,135,120,76,91,153,119,78,124,115,98,70,127,93,83,160,143,140,150,80,71,48,135,194,194,195,195,196,196,197,197,198,198,199,199,200,200,201,201,202,202,203,203,204,204,205,205,206,206,207,207,208,208,209,209,210,210,211,211,212,212,213,213,214,214,0,199,194,207,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,200,214,120,194,76,195,91,196,153,197,119,198,78,199,124,200,115,201,98,202,70,203,127,204,93,205,83,206,160,207,143,208,140,209,150,210,80,211,71,212,48,213,135,214,120,194,76,195,91,196,153,197,119,198,78,199,124,200,115,201,98,202,70,203,127,204,93,205,83,206,160,207,143,208,140,209,150,210,80,211,71,212,48,213,135,214,194,213,120,76,91,153,119,78,124,115,98,70,127,93,83,160,143,140,150,80,71,48,135,120,76,91,153,119,78,124,115,98,70,127,93,83,160,143,140,150,80,71,48,135,213,201,210,196,213,120,76,91,153,119,78,124,115,98,70,127,93,83,160,143,140,150,80,71,48,135,120,76,91,153,119,78,124,115,98,70,127,93,83,160,143,140,150,80,71,48,135,201,197,120,194,76,195,91,196,153,197,119,198,78,199,124,200,115,201,98,202,70,203,127,204,93,205,83,206,160,207,143,208,140,209,150,210,80,211,71,212,48,213,135,214,120,120,120,194,76,76,76,195,91,91,91,196,153,153,153,197,119,119,119,198,78,78,78,199,124,124,124,200,115,115,115,201,98,98,98,202,70,70,70,203,127,127,127,204,93,93,93,205,83,83,83,206,160,160,160,207,143,143,143,208,140,140,140,209,150,150,150,210,80,80,80,211,71,71,71,212,48,48,48,213,135,135,135,214,120,76,91,153,119,78,124,115,98,70,127,93,83,160,143,140,150,80,71,48,135,120,76,91,153,119,78,124,115,98,70,127,93,83,160,143,140,150,80,71,48,135,202,206,120,194,76,195,91,196,153,197,119,198,78,199,124,200,115,201,98,202,70,203,127,204,93,205,83,206,160,207,143,208,140,209,150,210,80,211,71,212,48,213,135,214,120,76,91,153,119,78,124,115,98,70,127,93,83,160,143,140,150,80,71,48,135,212,119,195,206,91,153,119,78,124,115,98,70,127,93,83,143,140,150,80,71,48,135,199,214,210,211,204,205,214,212,135,207,119,206,120,76,91,153,119,78,124,115,98,70,127,93,83,160,143,140,150,80,71,48,135,201,120,120,120,194,76,76,76,195,91,91,91,196,153,153,153,197,119,119,119,198,78,78,78,199,124,124,124,200,115,115,115,201,98,98,98,202,70,70,70,203,127,127,127,204,93,93,93,205,83,83,83,206,160,160,160,207,143,143,143,208,140,140,140,209,150,150,150,210,80,80,80,211,71,71,71,212,48,48,48,213,135,135,135,214,120,194,76,195,91,196,153,197,119,198,78,199,124,200,115,201,98,202,70,203,127,204,93,205,83,206,160,207,143,208,140,209,150,210,80,211,71,212,48,213,135,214,202,198,199,120,194,76,195,91,196,153,197,119,198,78,199,124,200,115,201,98,202,70,203,127,204,93,205,83,206,160,207,143,208,140,209,150,210,80,211,71,212,48,213,135,214,214,200,203,205,200,209,198,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,227,46,53,144,137,139,134,47,102,130,84,50,155,79,109,66,55,64,87,46,53,144,137,139,134,47,102,130,84,50,155,79,109,66,55,64,87,215,215,216,216,217,217,218,218,219,219,220,220,221,221,222,222,223,223,224,224,225,225,226,226,227,227,228,228,229,229,230,230,231,231,232,232,217,218,222,231,220,225,226,232,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,46,215,53,216,144,217,137,218,139,219,134,220,47,221,102,222,130,223,84,224,50,225,155,226,79,227,109,228,66,229,55,230,64,231,87,232,46,215,53,216,144,217,137,218,139,219,134,220,47,221,102,222,130,223,84,224,50,225,155,226,79,227,109,228,66,229,55,230,64,231,87,232,224,228,226,232,216,217,218,219,46,53,144,137,139,134,47,102,130,84,50,155,79,109,66,55,64,87,46,53,144,137,139,134,47,102,130,84,50,155,79,109,66,55,64,87,228,216,217,218,219,46,53,144,137,139,134,47,102,130,84,50,155,79,109,66,55,64,87,216,217,218,219,224,228,226,232,46,53,144,137,139,134,47,102,130,84,50,155,79,109,66,55,64,87,46,215,53,216,144,217,137,218,139,219,134,220,47,221,102,222,130,223,84,224,50,225,155,226,79,227,109,228,66,229,55,230,64,231,87,232,46,46,46,215,53,53,53,216,144,144,144,217,137,137,137,218,139,139,139,219,134,134,134,220,47,47,47,221,102,102,102,222,130,130,130,223,84,84,84,224,50,50,50,225,155,155,155,226,79,79,79,227,109,109,109,228,66,66,66,229,55,55,55,230,64,64,64,231,87,87,87,232,46,53,144,137,139,134,47,102,130,84,50,155,79,109,66,55,64,87,216,217,218,219,46,53,144,137,139,134,47,102,130,84,50,155,79,109,66,55,64,87,46,215,53,216,144,217,137,218,139,219,134,220,47,221,102,222,130,223,84,224,50,225,155,226,79,227,109,228,66,229,55,230,64,231,87,232,46,53,144,137,139,134,47,102,130,84,50,155,79,109,66,55,64,87,216,217,218,219,216,217,218,219,223,224,228,229,229,216,217,218,219,221,222,231,216,217,218,219,219,215,215,216,217,218,219,224,228,224,228,230,226,232,229,229,216,217,218,219,224,228,46,53,144,137,139,134,47,102,130,84,50,155,79,109,66,55,64,87,221,221,46,46,46,215,53,53,53,216,144,144,144,217,137,137,137,218,139,139,139,219,134,134,134,220,47,47,47,221,102,102,102,222,130,130,130,223,84,84,84,224,50,50,50,225,155,155,155,226,79,79,79,227,109,109,109,228,66,66,66,229,55,55,55,230,64,64,64,231,87,87,87,232,46,215,53,216,144,217,137,218,139,219,134,220,47,221,102,222,130,223,84,224,50,225,155,226,79,227,109,228,66,229,55,230,64,231,87,232,46,215,53,216,144,217,137,218,139,219,134,220,47,221,102,222,130,223,84,224,50,225,155,226,79,227,109,228,66,229,55,230,64,231,87,232,221,222,0,0,0,0,90,104,90,104,233,233,234,234,233,234,233,234,90,233,104,234,90,233,104,234,90,104,90,104,90,104,90,104,233,234,90,233,104,234,90,90,90,233,104,104,104,234,90,104,90,104,90,233,104,234,90,104,233,234,90,104,90,90,90,233,104,104,104,234,90,233,104,234,90,233,104,234,234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,235,63,60,99,88,89,92,49,51,62,129,112,63,60,99,88,89,92,49,51,62,129,112,235,235,236,236,237,237,238,238,239,239,240,240,241,241,242,242,243,243,244,244,245,245,241,237,238,240,242,243,244,235,236,237,238,239,240,241,242,243,244,245,243,245,63,235,60,236,99,237,88,238,89,239,92,240,49,241,51,242,62,243,129,244,112,245,63,235,60,236,99,237,88,238,89,239,92,240,49,241,51,242,62,243,129,244,112,245,63,60,99,88,89,92,49,51,62,129,112,63,60,99,88,89,92,49,51,62,129,112,63,60,99,88,89,92,49,51,62,129,112,236,245,63,60,99,88,89,92,49,51,62,129,112,63,235,60,236,99,237,88,238,89,239,92,240,49,241,51,242,62,243,129,244,112,245,63,63,63,235,60,60,60,236,99,99,99,237,88,88,88,238,89,89,89,239,92,92,92,240,49,49,49,241,51,51,51,242,62,62,62,243,129,129,129,244,112,112,112,245,63,60,99,88,89,92,49,51,62,129,112,63,60,99,88,89,92,49,51,62,129,112,240,63,235,60,236,99,237,88,238,89,239,92,240,49,241,51,242,62,243,129,244,112,245,63,60,99,88,89,92,49,51,62,129,112,243,239,237,239,245,245,63,60,99,88,89,92,49,51,62,129,112,63,63,63,235,60,60,60,236,99,99,99,237,88,88,88,238,89,89,89,239,92,92,92,240,49,49,49,241,51,51,51,242,62,62,62,243,129,129,129,244,112,112,112,245,63,235,60,236,99,237,88,238,89,239,92,240,49,241,51,242,62,243,129,244,112,245,63,235,60,236,99,237,88,238,89,239,92,240,49,241,51,242,62,243,129,244,112,245,0,0,0,0,54,148,54,148,246,246,247,247,246,247,54,246,148,247,54,246,148,247,54,148,54,148,54,148,54,148,54,246,148,247,54,54,54,246,148,148,148,247,54,148,54,148,54,246,148,247,54,148,246,247,246,54,148,54,54,54,246,148,148,148,247,54,246,148,247,54,246,148,247,0,0,0,0,125,57,125,57,248,248,249,249,248,249,125,248,57,249,125,248,57,249,125,57,125,57,249,125,57,249,249,125,57,125,248,57,249,125,125,125,248,57,57,57,249,125,57,125,57,125,248,57,249,125,57,249,248,57,249,125,57,125,125,125,248,57,57,57,249,125,248,57,249,125,248,57,249,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,253,254,255,256,257,258,259,260,264,265,266,267,268,269,270,271,149,72,94,86,97,61,111,69,59,126,114,52,65,133,121,100,58,77,103,101,105,116,123,131,149,72,94,86,97,61,111,69,59,126,114,52,65,133,121,100,58,77,103,101,105,116,123,131,250,250,251,251,252,252,253,253,254,254,255,255,256,256,257,257,258,258,259,259,260,260,261,261,262,262,263,263,264,264,265,265,266,266,267,267,268,268,269,269,270,270,271,271,272,272,273,273,252,253,254,255,256,257,258,259,260,264,265,266,267,268,269,270,271,273,149,250,72,251,94,252,86,253,97,254,61,255,111,256,69,257,59,258,126,259,114,260,52,261,65,262,133,263,121,264,100,265,58,266,77,267,103,268,101,269,105,270,116,271,123,272,131,273,149,250,72,251,94,252,86,253,97,254,61,255,111,256,69,257,59,258,126,259,114,260,52,261,65,262,133,263,121,264,100,265,58,266,77,267,103,268,101,269,105,270,116,271,123,272,131,273,149,72,94,86,97,61,111,69,59,126,114,52,65,133,121,100,58,77,103,101,105,116,123,131,149,72,94,86,97,61,111,69,59,126,114,52,65,133,121,100,58,77,103,101,105,116,123,131,263,149,72,94,86,97,61,111,69,59,126,114,52,65,133,121,100,58,77,103,101,105,116,123,131,149,72,94,86,97,61,111,69,59,126,114,52,65,133,121,100,58,77,103,101,105,116,123,131,263,149,250,72,251,94,252,86,253,97,254,61,255,111,256,69,257,59,258,126,259,114,260,52,261,65,262,133,263,121,264,100,265,58,266,77,267,103,268,101,269,105,270,116,271,123,272,131,273,149,149,149,149,250,72,72,72,251,94,94,94,252,86,86,86,253,97,97,97,254,61,61,61,255,111,111,111,256,69,69,69,257,59,59,59,258,126,126,126,259,114,114,114,260,52,52,52,261,65,65,65,262,133,133,133,263,121,121,121,264,100,100,100,265,58,58,58,266,77,77,77,267,103,103,103,268,101,101,101,269,105,105,105,270,116,116,116,271,123,123,123,272,131,131,131,273,149,72,94,86,97,61,111,69,59,126,114,52,65,133,121,100,58,77,103,101,105,116,123,131,149,72,94,86,97,61,111,69,59,126,114,52,65,133,121,100,58,77,103,101,105,116,123,131,149,250,72,251,94,252,86,253,97,254,61,255,111,256,69,257,59,258,126,259,114,260,52,261,65,262,133,263,121,264,100,265,58,266,77,267,103,268,101,269,105,270,116,271,123,272,131,273,149,72,94,86,97,61,111,69,59,126,114,52,65,133,121,100,58,77,103,101,105,116,123,131,262,251,149,72,94,86,97,61,111,69,59,126,114,52,65,133,121,100,58,77,103,101,105,116,123,131,262,262,149,72,94,86,97,61,111,69,59,126,114,52,65,133,121,100,58,77,103,101,105,116,123,131,263,149,149,149,250,72,72,72,251,94,94,94,252,86,86,86,253,97,97,97,254,61,61,61,255,111,111,111,256,69,69,69,257,59,59,59,258,126,126,126,259,114,114,114,260,52,52,52,261,65,65,65,262,133,133,133,263,121,121,121,264,100,100,100,265,58,58,58,266,77,77,77,267,103,103,103,268,101,101,101,269,105,105,105,270,116,116,116,271,123,123,123,272,131,131,131,273,149,250,72,251,94,252,86,253,97,254,61,255,111,256,69,257,59,258,126,259,114,260,52,261,65,262,133,263,121,264,100,265,58,266,77,267,103,268,101,269,105,270,116,271,123,272,131,273,149,250,72,251,94,252,86,253,97,254,61,255,111,256,69,257,59,258,126,259,114,260,52,261,65,262,133,263,121,264,100,265,58,266,77,267,103,268,101,269,105,270,116,271,123,272,131,273,250,261,272,273,273,287,0,0,287,0,0,0,0,0,0,0,0,0,0,0,0,287,0,0,0,0,0,287,0,0,0,287,0,0,0,0,0,281,56,108,106,95,146,85,136,132,74,138,82,96,110,56,108,106,95,146,85,136,132,74,138,82,96,110,274,274,275,275,276,276,277,277,278,278,279,279,280,280,281,281,282,282,283,283,284,284,285,285,286,286,274,275,276,277,278,279,280,281,282,283,284,285,286,56,274,108,275,106,276,287,95,277,146,278,85,279,136,280,132,281,74,282,138,283,82,284,96,285,110,286,56,274,108,275,106,276,287,95,277,146,278,85,279,136,280,132,281,74,282,138,283,82,284,96,285,110,286,56,108,106,95,146,85,136,132,74,138,82,96,110,56,108,106,95,146,85,136,132,74,138,82,96,110,286,56,108,106,95,146,85,136,132,74,138,82,96,110,275,285,276,85,56,108,106,287,95,146,85,136,132,74,138,82,96,110,279,56,274,108,275,106,276,287,95,277,146,278,85,279,136,280,132,281,74,282,138,283,82,284,96,285,110,286,56,56,56,274,108,108,108,275,106,106,106,276,287,95,95,95,277,146,146,146,278,85,85,85,279,136,136,136,280,132,132,132,281,74,74,74,282,138,138,138,283,82,82,82,284,96,96,96,285,110,110,110,286,56,108,106,95,146,85,136,132,74,138,82,96,110,56,108,106,95,146,85,136,132,74,138,82,96,110,56,274,108,275,106,276,287,95,277,146,278,85,279,136,280,132,281,74,282,138,283,82,284,96,285,110,286,56,108,106,95,146,85,136,132,74,138,82,96,110,277,278,282,277,278,146,85,96,110,281,285,274,96,56,108,106,95,146,85,136,132,74,138,82,96,110,56,56,56,274,108,108,108,275,106,106,106,276,287,95,95,95,277,146,146,146,278,85,85,85,279,136,136,136,280,132,132,132,281,74,74,74,282,138,138,138,283,82,82,82,284,96,96,96,285,110,110,110,286,56,274,108,275,106,276,287,95,277,146,278,85,279,136,280,132,281,74,282,138,283,82,284,96,285,110,286,281,56,274,108,275,106,276,287,95,277,146,278,85,279,136,280,132,281,74,282,138,283,82,284,96,285,110,286,286,281,286,283,0,0,32,32,288,288,32,288,32,288,32,32,32,32,32,32,32,32,288,32,32,32,288,32,32,32,32,32,32,288,32,32,32,32,32,32,32,288,32,288,32,288,307,0,0,0,145,145,289,145,289,289,145,289,145,289,145,145,145,145,145,145,145,145,145,145,145,145,145,145,289,145,145,145,289,145,145,145,145,289,145,145,145,145,289,145,145,145,145,145,145,145,145,145,145,145,145,145,289,145,289,145,289,145,0,0,0,35,26,0,0,35,26,37,37,37,6,0,35,26,15,0,35,26,0,6,6,15,0,37,158,35,26,6,35,26,0,0,35,26,6,35,26,15,0,0,37,0,35,26,6,0,6,0,35,26,6,35,26,6,0,186,35,26,0,0,37,6,37,6,0,158,15,35,26,0,35,26,0,308,6,0,35,26,37,37,14,0,309,158,113,141,151,151,186,113,141,151,292,151,293,293,151,292,158,113,141,292,151,293,158,113,141,292,151,293,0,113,141,151,113,141,151,151,113,292,158,0,113,141,151,0,36,36,113,186,158,113,113,141,151,0,14,0,113,141,292,151,151,293,158,158,113,141,141,141,292,151,151,151,151,151,293,186,186,141,151,113,186,0,0,0,113,141,151,158,113,141,292,151,293,186,186,141,151,113,186,158,151,113,158,151,0,0,0,113,186,0,151,113,0,113,141,151,151,151,158,158,158,113,113,113,141,141,141,292,151,151,151,293,158,113,141,292,151,293,0,158,113,141,292,151,293,113,186,0,303,303,0,0,128,128,297,128,297,128,128,128,128,297,128,128,128,128,128,297,128,297,128,128,297,128,128,297,128,297,128,128,128,297,128,297,128,37,37,37,0,0,37,37,37,37,0,37,37,36,36,6,15,6,6,15,0,6,0,6,15,6,6,0,6,6,6,6,15,6,0,14,14,303,303,0,35,26,35,26,35,26,35,26,35,26,35,26,0,35,26,304,35,26,35,26,35,26,35,26,35,26,0,0,0,35,26,35,26,0,0,35,26,305,304,304,0,304,0,0,0,305,304,304,304,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,173,22,142,22,142,165,171,142,40,40,171,142,0,0,0,0,0,0,0,0,0,22,171,142,172,142,165,0,142,172,0,0,0,0,0,0,0,0,0,0,168,168,168,168,168,168,0,0,298,298,298,298,298,298,298,298,298,298,298,298,298,298,0,0,117,299,117,299,117,117,117,117,117,299,117,117,117,117,299,117,299,117,299,117,299,117,299,117,299,117,117,117,299,117,299,117,0,0,307,0,0,0,0,0,0,0,186,0,0,308,309,186,0,186,186,186,186,186,186,186,186,113,186,0,0,0,0,0,0,0,147,147,300,300,300,147,300,147,300,147,147,147,147,147,300,147,147,147,300,147,0,147,147,300,147,300,147,300,300,147,147,147,147,300,147,300,147,300],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[]],[[1,1],3],[1,2],0,0,0,0,[[4,5],6],[[1,1],7],0,0,0,0,0,[[8,9],1],[[],1],[[10,11],[[13,[12]]]],[[10,11],[[13,[12]]]],[[14,11],[[13,[12]]]],[[14,11],[[13,[12]]]],[[15,11],[[13,[12]]]],[[15,11],[[13,[12]]]],[[6,11],[[13,[12]]]],[[6,11],[[13,[12]]]],[[1,11],[[13,[12]]]],[[1,11],[[13,[12]]]],[[]],[[]],[16,15],[17,15],[[]],[15,6],[18,6],[19,6],[20,6],[21,6],[[]],[[]],[22,1],[5,6],[5,[[13,[1]]]],0,[1],0,[[8,9],1],[[]],[[]],[[]],[[]],[[]],0,[1,7],[1,2],[1,2],0,0,[[8,8,9],1],[[1,1],[[23,[3]]]],[24],[24],[24],[24],0,0,[15,[[23,[25]]]],[6,[[23,[25]]]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],0,[[],13],[[],13],[[],13],[[],13],[26,[[13,[1,27]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],28],[[],28],[[],28],[[],28],[[],28],[[8,9],1],[[],5],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[29,[[13,[30]]]],[[29,31],[[13,[32,30]]]],[[],29],[[30,11],33],[[30,11],33],[[29,11],33],[6,30],[[]],[34,30],[[]],[[]],[[]],[24],[30,[[23,[25]]]],[[],4],[[],13],[[],13],[[],13],[[],13],[[],28],[[],28],0,0,0,0,0,0,0,0,0,0,0,0,[[],35],[[],35],[[]],[[]],[[]],[[]],[[]],[[]],[2,36],[37,37],[36,36],[[]],[[]],[2,36],[2,36],[[],37],[[],36],0,0,[[37,37],7],[[36,36],7],[2,36],[[37,11],[[13,[12]]]],[[37,11],[[13,[12]]]],[[36,11],[[13,[12]]]],[[36,11],[[13,[12]]]],[[38,11],[[13,[12]]]],[[38,11],[[13,[12]]]],[[]],[5,37],[39,37],[[]],[5,36],[40,36],[[]],[5,[[13,[36]]]],[37],[36],[[]],[[]],[[]],[2,36],[2,36],[41,[[23,[37]]]],[[37,2],36],[2,36],[24],[2,36],[2,36],[[]],[[]],[[],4],[[],4],[[],4],[[],13],[[],13],[26,[[13,[36,27]]]],[[],13],[[],13],[[],13],[[],13],[[],28],[[],28],[[],28],[2,36],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[43,[35,42]]],[[13,[44,6]]]],[[],35],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[43,[35,42]]],[[13,[26,6]]]],[45,45],[35,35],[26,26],[[]],[[]],[[]],[[],26],[[]],0,[[45,11],[[13,[12]]]],[[35,11],[[13,[12]]]],[[26,11],[[13,[12]]]],[[]],[[]],[46,35],[47,35],[48,35],[49,35],[50,35],[51,35],[52,35],[53,35],[37,35],[54,35],[55,35],[56,35],[57,35],[58,35],[59,35],[60,35],[61,35],[62,35],[63,35],[64,35],[65,35],[66,35],[67,35],[68,35],[69,35],[70,35],[71,35],[72,35],[73,35],[[]],[74,35],[75,35],[76,35],[77,35],[78,35],[79,35],[80,35],[81,35],[82,35],[83,35],[84,35],[85,35],[86,35],[87,35],[88,35],[89,35],[90,35],[91,35],[92,35],[93,35],[94,35],[95,35],[96,35],[97,35],[98,35],[99,35],[100,35],[101,35],[102,35],[103,35],[104,35],[105,35],[106,35],[107,35],[108,35],[109,35],[110,35],[111,35],[112,35],[113,35],[114,35],[115,35],[116,35],[117,35],[118,35],[119,35],[120,35],[121,35],[122,35],[123,35],[124,35],[125,35],[126,35],[127,35],[128,35],[129,35],[130,35],[131,35],[132,35],[133,35],[134,35],[135,35],[136,35],[137,35],[45,35],[31,35],[138,35],[139,35],[140,35],[141,35],[142,35],[143,35],[144,35],[145,35],[146,35],[147,35],[148,35],[149,35],[150,35],[151,35],[32,35],[152,35],[153,35],[36,35],[154,35],[154,35],[4,35],[40,35],[155,35],[39,35],[40,35],[156,35],[41,35],[9,35],[157,35],[[],35],[142,35],[158,35],[159,35],[41,35],[[],35],[160,35],[161,35],[157,35],[2,35],[161,35],[2,35],[162,35],[163,35],[164,35],[165,35],[156,35],[8,35],[166,35],[36,35],[164,35],[159,35],[7,35],[5,35],[22,35],[22,35],[167,35],[167,35],[9,35],[39,35],[8,35],[138,26],[102,26],[109,26],[103,26],[126,26],[115,26],[93,26],[135,26],[77,26],[150,26],[1,26],[[],26],[57,26],[130,26],[104,26],[90,26],[117,26],[82,26],[39,26],[160,26],[155,26],[48,26],[121,26],[159,26],[73,26],[58,26],[125,26],[165,26],[116,26],[2,26],[151,26],[7,26],[64,26],[106,26],[45,26],[156,26],[76,26],[134,26],[127,26],[144,26],[96,26],[41,26],[136,26],[40,26],[8,26],[67,26],[101,26],[70,26],[153,26],[81,26],[167,26],[32,26],[114,26],[72,26],[65,26],[131,26],[154,26],[149,26],[55,26],[83,26],[141,26],[46,26],[111,26],[132,26],[86,26],[107,26],[22,26],[80,26],[54,26],[113,26],[87,26],[51,26],[146,26],[128,26],[78,26],[4,26],[145,26],[119,26],[84,26],[97,26],[161,26],[98,26],[69,26],[49,26],[164,26],[133,26],[92,26],[112,26],[108,26],[50,26],[129,26],[148,26],[120,26],[47,26],[140,26],[63,26],[118,26],[91,26],[36,26],[143,26],[79,26],[100,26],[99,26],[66,26],[147,26],[105,26],[31,26],[61,26],[157,26],[162,26],[74,26],[124,26],[9,26],[95,26],[89,26],[62,26],[123,26],[110,26],[122,26],[137,26],[75,26],[60,26],[71,26],[139,26],[59,26],[52,26],[85,26],[88,26],[53,26],[56,26],[152,26],[68,26],[[]],[94,26],[[168,39],35],[[168,39],26],[[],[[23,[45]]]],[[],[[23,[[169,[42]]]]]],[45,170],[45],[[]],[[]],[[]],[[]],[[]],[[45,[43,[35,42]]],[[13,[26,6]]]],[[],45],[[],[[13,[6]]]],[7,[[13,[6]]]],[7,[[13,[6]]]],[[],[[13,[26,6]]]],[[],45],[[]],[[]],[[]],[35],[26],[[],13],[35,[[13,[45,6]]]],[26,[[13,[45,6]]]],[[],13],[35,[[13,[45,6]]]],[[],13],[13,[[13,[26]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[168,164,164,170,170],164],[170],[[],28],[[],28],[[],28],[[],28],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[156],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[41,164,164,164,164,164,164,142],164],[[142,170,161],164],[[142,142,170],164],[[142,170,161],164],[142,164],[[171,142],164],0,[[142,171],164],[[164,164,161,164,164],170],[[164,164,170],164],[[170,156,170],164],0,[[164,172],164],[[23,170,164],164],[[156,170],164],[[156,170],164],[[170,23,170,164],164],0,[165,164],[[170,168,164,164],164],[[168,164],164],[171],[[40,161,161,22,170],164],[[40,164,41,22,156,170],164],[[142,142,170],164],0,0,0,0,0,0,[[40,170],164],0,[[170,168,164,164,168,164],164],[[23,170,23,170],164],[170,164],[[156,170],164],[[164,156],164],[[156,170,164],164],[156,164],0,[[],156],[170,164],[[170,156,164,170],164],[[170,170],164],[[156,156,170],164],0,[[39,39,164],164],[170,164],[[170,39],164],0,[170,164],[[39,156],164],[[156,39],164],0,0,0,0,[[164,164,170],164],[[164,164,170],164],[[164,164,170],164],0,[[164,164,170,170],164],[[164,164,170],164],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],35],[[],35],[[],35],[[],35],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[2,40],[173,173],[40,40],[22,22],[142,142],[171,171],[168,168],[165,165],[172,172],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[2,40],[2,40],0,0,[[],173],[[],40],[[],22],[[],142],[[],171],[[],168],[[],165],[[],172],0,0,0,0,0,0,[[173,173],7],[[40,40],7],[[22,22],7],[[142,142],7],[[171,171],7],[[165,165],7],[[172,172],7],[2,40],[[173,11],[[13,[12]]]],[[40,11],[[13,[12]]]],[[22,11],[[13,[12]]]],[[142,11],[[13,[12]]]],[[171,11],[[13,[12]]]],[[165,11],[[13,[12]]]],[[172,11],[[13,[12]]]],[[]],[168,40],[[]],[36,40],[36,40],[1,22],[[]],[168,22],[1,22],[174,142],[174,142],[174,142],[[]],[174,142],[174,142],[174,142],[[]],[39,168],[[]],[2,168],[157,168],[9,168],[164,168],[156,168],[41,168],[159,168],[154,168],[167,168],[40,168],[161,168],[8,168],[22,168],[[]],[[]],[5,[[13,[40]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[2,40],0,[2,40],0,0,[2,40],[2,40],0,0,0,[2,40],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[35,[[13,[40]]]],[35,[[13,[40]]]],[[],13],[26,[[13,[40]]]],[35,[[13,[22]]]],[35,[[13,[22]]]],[[],13],[26,[[13,[22]]]],[[],13],[[],13],[[],13],[26,[[13,[165]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[2,40],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],35],[75,[[23,[113]]]],[175,175],[175],[[]],[[]],[[]],[[]],[75,75],[[]],[75],[[75,75],7],[[75,11],33],[[175,11],33],[175,75],[[[113,[175]]],75],[[]],[[]],[[[23,[113]]],75],[75],[[]],[[]],[75,[[23,[113]]]],0,0,[[41,41],75],[[]],[35,[[176,[75]]]],[26,[[176,[75]]]],[[],13],[[],13],[[],13],[[],13],[[],28],[[],28],0,0,[[],35],[68,[[23,[113]]]],[177],[177,177],0,[[]],[[]],[[]],[[]],[68,68],[[]],[68],[[68,68],7],[[68,11],33],[[177,11],33],[[[113,[177]]],68],[177,68],[[]],[[]],[[[23,[113]]],68],[68],[[]],[[]],[68,[[23,[113]]]],[[]],[26,[[176,[68]]]],[[],13],[35,[[176,[68]]]],[[],13],[[],13],[[],13],[[],28],[[],28],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],35],[[],35],[[],35],[152,[[23,[113]]]],[67,[[23,[113]]]],[162,[[23,[113]]]],[178,178],[178],[179,179],[179],[180,180],[180],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[57,181],[152,152],[67,67],[162,162],[[]],[[]],[[]],0,[31,162],[152],[67],[162],0,[[162,152],176],[[162,152],176],[[182,182],7],[[152,152],7],[[67,67],7],[[162,162],7],[57,181],[[182,11],33],[[152,11],33],[[178,11],33],[[67,11],33],[[179,11],33],[[162,11],33],[[180,11],33],[[]],[[]],[[[113,[178]]],152],[178,152],[[]],[[]],[[[113,[179]]],67],[179,67],[[]],[[]],[[]],[[[113,[180]]],162],[180,162],[[]],[[[23,[113]]],152],[[[23,[113]]],67],[[[23,[113]]],162],[152],[67],[162],[57,181],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[152,[[23,[113]]]],[67,[[23,[113]]]],[162,[[23,[113]]]],0,0,0,0,0,[[182,57],181],[[182,57,151],152],[31,162],[57,181],[[67,162],176],[162,176],0,0,0,[[]],[[]],[[]],[[],13],[[],13],[26,[[176,[152]]]],[[],13],[35,[[176,[152]]]],[[],13],[35,[[176,[67]]]],[[],13],[26,[[176,[67]]]],[[],13],[26,[[176,[162]]]],[35,[[176,[162]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[57,181],[[],176],0,0,0,0,0,0,[[],35],[[],35],[[],35],[73,[[23,[113]]]],[107,[[23,[113]]]],[122,[[23,[113]]]],[183,183],[183],[184],[184,184],[185,185],[185],[186,4],[57,183],[[1,57],184],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[73,73],[107,107],[122,122],[[]],[[]],[[]],0,[73],[107],[122],[[73,73],7],[[107,107],7],[[122,122],7],[[73,11],33],[[183,11],33],[[107,11],33],[[184,11],33],[[122,11],33],[[185,11],33],[183,73],[[]],[[[113,[183]]],73],[[]],[[]],[164,107],[[[113,[184]]],107],[184,107],[[]],[185,122],[[]],[[[113,[185]]],122],[[]],[[[23,[113]]],73],[[[23,[113]]],107],[[[23,[113]]],122],[73],[107],[122],[[]],[[]],[[]],[[]],[[]],[[]],[73,[[23,[113]]]],[107,[[23,[113]]]],[122,[[23,[113]]]],0,[[4,57],122],0,[[]],[[]],[[]],[35,[[176,[73]]]],[26,[[176,[73]]]],[[],13],[[],13],[35,[[176,[107]]]],[[],13],[26,[[176,[107]]]],[[],13],[26,[[176,[122]]]],[35,[[176,[122]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],0,0,0,[[],35],[81,[[23,[113]]]],[187],[187,187],0,[[],187],0,[[]],[[]],[[]],[[]],[81,81],[[]],[81],[[81,81],7],[[81,11],33],[[187,11],33],[[[113,[187]]],81],[[]],[187,81],[[]],[[[23,[113]]],81],[81],[[]],[[]],[81,[[23,[113]]]],[[]],[26,[[176,[81]]]],[[],13],[35,[[176,[81]]]],[[],13],[[],13],[[],13],[[],28],[[],28],0,0,0,0,0,[[31,122],[[176,[31]]]],[[31,146,110,7],176],[[],35],[31,[[23,[113]]]],[188,188],[188],0,[[]],[[]],[[]],[[]],[[]],[[]],[31,31],[[]],[[31,[189,[151]]],[[176,[7]]]],[[31,[189,[151]]],[[176,[7]]]],[31],[[],[[176,[31]]]],[[31,31],7],[[190,11],33],[[190,11],33],[[31,11],33],[[188,11],33],[34,190],[[]],[6,190],[[]],[[[113,[188]]],31],[188,31],[[]],[[],[[176,[31]]]],[[],[[176,[31]]]],[[[23,[113]]],31],0,[31,[[176,[[128,[146]]]]]],[31,[[176,[122]]]],[31,[[176,[[128,[122]]]]]],[31],[[31,[189,[151]]],176],[[31,[189,[151]]],176],[[]],[[]],[[]],[31,[[23,[113]]]],[[31,122],[[176,[81]]]],[[31,146],[[176,[110]]]],[31,[[176,[110]]]],[31,[[176,[81]]]],[[31,164],[[176,[83]]]],[[],[[176,[31]]]],[[],[[176,[31]]]],[[[192,[191]]],[[13,[31,190]]]],[24],[190,[[23,[25]]]],0,[[]],[[],4],[[],13],[[],13],[35,[[176,[31]]]],[26,[[176,[31]]]],[[],13],[[],13],[[],13],[[],13],0,[[],28],[[],28],[[],28],0,0,0,[[],35],[118,[[23,[113]]]],[193,193],[193],0,0,0,[[]],[[]],[[]],[[]],[118,118],[[]],[118],0,[[118,118],7],[[118,11],33],[[193,11],33],[193,118],[[[113,[193]]],118],[[]],[[]],[[[23,[113]]],118],[118],[[]],[[]],[118,[[23,[113]]]],0,0,0,0,[[]],[35,[[176,[118]]]],[26,[[176,[118]]]],[[],13],[[],13],[[],13],[[],13],[[],28],[[],28],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[120,[[23,[113]]]],[76,[[23,[113]]]],[91,[[23,[113]]]],[153,[[23,[113]]]],[119,[[23,[113]]]],[78,[[23,[113]]]],[124,[[23,[113]]]],[115,[[23,[113]]]],[98,[[23,[113]]]],[70,[[23,[113]]]],[127,[[23,[113]]]],[93,[[23,[113]]]],[83,[[23,[113]]]],[160,[[23,[113]]]],[143,[[23,[113]]]],[140,[[23,[113]]]],[150,[[23,[113]]]],[80,[[23,[113]]]],[71,[[23,[113]]]],[48,[[23,[113]]]],[135,[[23,[113]]]],[194,194],[194],[195],[195,195],[196],[196,196],[197,197],[197],[198,198],[198],[199],[199,199],[200],[200,200],[201,201],[201],[202,202],[202],[203,203],[203],[204],[204,204],[205],[205,205],[206],[206,206],[207],[207,207],[208],[208,208],[209,209],[209],[210,210],[210],[211,211],[211],[212],[212,212],[213,213],[213],[214,214],[214],0,0,[57,194],[57,207],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[120,120],[76,76],[91,91],[153,153],[119,119],[78,78],[124,124],[115,115],[98,98],[70,70],[127,127],[93,93],[83,83],[160,160],[143,143],[140,140],[150,150],[80,80],[71,71],[48,48],[135,135],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[120],[76],[91],[153],[119],[78],[124],[115],[98],[70],[127],[93],[83],[160],[143],[140],[150],[80],[71],[48],[135],[[120,120],7],[[76,76],7],[[91,91],7],[[153,153],7],[[119,119],7],[[78,78],7],[[124,124],7],[[115,115],7],[[98,98],7],[[70,70],7],[[127,127],7],[[93,93],7],[[83,83],7],[[160,160],7],[[143,143],7],[[140,140],7],[[150,150],7],[[80,80],7],[[71,71],7],[[48,48],7],[[135,135],7],0,0,[[120,11],33],[[194,11],33],[[76,11],33],[[195,11],33],[[91,11],33],[[196,11],33],[[153,11],33],[[197,11],33],[[119,11],33],[[198,11],33],[[78,11],33],[[199,11],33],[[124,11],33],[[200,11],33],[[115,11],33],[[201,11],33],[[98,11],33],[[202,11],33],[[70,11],33],[[203,11],33],[[127,11],33],[[204,11],33],[[93,11],33],[[205,11],33],[[83,11],33],[[206,11],33],[[160,11],33],[[207,11],33],[[143,11],33],[[208,11],33],[[140,11],33],[[209,11],33],[[150,11],33],[[210,11],33],[[80,11],33],[[211,11],33],[[71,11],33],[[212,11],33],[[48,11],33],[[213,11],33],[[135,11],33],[[214,11],33],[[]],[194,120],[[[113,[194]]],120],[[]],[[]],[195,76],[[[113,[195]]],76],[[]],[196,91],[[[113,[196]]],91],[[]],[[]],[197,153],[[[113,[197]]],153],[[]],[[]],[198,119],[[]],[[[113,[198]]],119],[[]],[[]],[[[113,[199]]],78],[199,78],[[]],[200,124],[[[113,[200]]],124],[[]],[[]],[201,115],[[]],[[[113,[201]]],115],[[]],[[[113,[202]]],98],[[]],[202,98],[[]],[203,70],[[[113,[203]]],70],[[]],[[]],[[]],[[[113,[204]]],127],[204,127],[[]],[205,93],[[]],[[[113,[205]]],93],[[]],[[]],[[[113,[206]]],83],[206,83],[[]],[[]],[207,160],[[[113,[207]]],160],[[]],[[[113,[208]]],143],[208,143],[[]],[[]],[209,140],[[]],[[[113,[209]]],140],[[]],[[]],[[[113,[210]]],150],[210,150],[[]],[211,80],[[]],[[[113,[211]]],80],[[]],[212,71],[[[113,[212]]],71],[[]],[[]],[[[113,[213]]],48],[213,48],[[]],[[]],[[]],[214,135],[[[113,[214]]],135],[[]],[[[23,[113]]],120],[[[23,[113]]],76],[[[23,[113]]],91],[[[23,[113]]],153],[[[23,[113]]],119],[[[23,[113]]],78],[[[23,[113]]],124],[[[23,[113]]],115],[[[23,[113]]],98],[[[23,[113]]],70],[[[23,[113]]],127],[[[23,[113]]],93],[[[23,[113]]],83],[[[23,[113]]],160],[[[23,[113]]],143],[[[23,[113]]],140],[[[23,[113]]],150],[[[23,[113]]],80],[[[23,[113]]],71],[[[23,[113]]],48],[[[23,[113]]],135],[120],[76],[91],[153],[119],[78],[124],[115],[98],[70],[127],[93],[83],[160],[143],[140],[150],[80],[71],[48],[135],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[120,[[23,[113]]]],[76,[[23,[113]]]],[91,[[23,[113]]]],[153,[[23,[113]]]],[119,[[23,[113]]]],[78,[[23,[113]]]],[124,[[23,[113]]]],[115,[[23,[113]]]],[98,[[23,[113]]]],[70,[[23,[113]]]],[127,[[23,[113]]]],[93,[[23,[113]]]],[83,[[23,[113]]]],[160,[[23,[113]]]],[143,[[23,[113]]]],[140,[[23,[113]]]],[150,[[23,[113]]]],[80,[[23,[113]]]],[71,[[23,[113]]]],[48,[[23,[113]]]],[135,[[23,[113]]]],0,[119,151],0,0,[[145,57],91],[[[128,[120]],57],153],[[4,56,57],119],[[120,[128,[120]],68,[128,[56]],57],78],[[119,120,120,57],124],[[120,120,120,57],115],[[120,164,57],98],[[120,57],70],[[120,57],127],[[120,120,57],93],[[4,[128,[56]],164,57],83],[57,143],[[119,57],140],[[83,[128,[160]],57],150],[[[128,[160]],57],80],[[160,120,57],71],[[120,[128,[71]],7,57],48],[[[128,[119]],120,56,[128,[56]]],135],0,0,0,0,0,0,0,0,[[[43,[119]]],135],0,[[4,[43,[164]],1],119],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[26,[[176,[120]]]],[35,[[176,[120]]]],[[],13],[[],13],[35,[[176,[76]]]],[[],13],[26,[[176,[76]]]],[[],13],[[],13],[26,[[176,[91]]]],[35,[[176,[91]]]],[[],13],[35,[[176,[153]]]],[26,[[176,[153]]]],[[],13],[[],13],[[],13],[35,[[176,[119]]]],[26,[[176,[119]]]],[[],13],[26,[[176,[78]]]],[[],13],[35,[[176,[78]]]],[[],13],[26,[[176,[124]]]],[[],13],[35,[[176,[124]]]],[[],13],[[],13],[35,[[176,[115]]]],[26,[[176,[115]]]],[[],13],[26,[[176,[98]]]],[[],13],[35,[[176,[98]]]],[[],13],[[],13],[26,[[176,[70]]]],[35,[[176,[70]]]],[[],13],[26,[[176,[127]]]],[[],13],[35,[[176,[127]]]],[[],13],[[],13],[35,[[176,[93]]]],[26,[[176,[93]]]],[[],13],[[],13],[26,[[176,[83]]]],[35,[[176,[83]]]],[[],13],[35,[[176,[160]]]],[26,[[176,[160]]]],[[],13],[[],13],[[],13],[26,[[176,[143]]]],[35,[[176,[143]]]],[[],13],[[],13],[26,[[176,[140]]]],[35,[[176,[140]]]],[[],13],[26,[[176,[150]]]],[[],13],[35,[[176,[150]]]],[[],13],[35,[[176,[80]]]],[[],13],[26,[[176,[80]]]],[[],13],[35,[[176,[71]]]],[[],13],[26,[[176,[71]]]],[[],13],[[],13],[26,[[176,[48]]]],[35,[[176,[48]]]],[[],13],[[],13],[26,[[176,[135]]]],[35,[[176,[135]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[46,[[23,[113]]]],[53,[[23,[113]]]],[144,[[23,[113]]]],[137,[[23,[113]]]],[139,[[23,[113]]]],[134,[[23,[113]]]],[47,[[23,[113]]]],[102,[[23,[113]]]],[130,[[23,[113]]]],[84,[[23,[113]]]],[50,[[23,[113]]]],[155,[[23,[113]]]],[79,[[23,[113]]]],[109,[[23,[113]]]],[66,[[23,[113]]]],[55,[[23,[113]]]],[64,[[23,[113]]]],[87,[[23,[113]]]],[215],[215,215],[216],[216,216],[217],[217,217],[218],[218,218],[219,219],[219],[220,220],[220],[221,221],[221],[222,222],[222],[223,223],[223],[224,224],[224],[225,225],[225],[226,226],[226],[227,227],[227],[228],[228,228],[229],[229,229],[230,230],[230],[231,231],[231],[232,232],[232],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[46,46],[53,53],[144,144],[137,137],[139,139],[134,134],[47,47],[102,102],[130,130],[84,84],[50,50],[155,155],[79,79],[109,109],[66,66],[55,55],[64,64],[87,87],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[46],[53],[144],[137],[139],[134],[47],[102],[130],[84],[50],[155],[79],[109],[66],[55],[64],[87],0,0,0,0,0,0,0,0,[[46,46],7],[[53,53],7],[[144,144],7],[[137,137],7],[[139,139],7],[[134,134],7],[[47,47],7],[[102,102],7],[[130,130],7],[[84,84],7],[[50,50],7],[[155,155],7],[[79,79],7],[[109,109],7],[[66,66],7],[[55,55],7],[[64,64],7],[[87,87],7],[[46,11],33],[[215,11],33],[[53,11],33],[[216,11],33],[[144,11],33],[[217,11],33],[[137,11],33],[[218,11],33],[[139,11],33],[[219,11],33],[[134,11],33],[[220,11],33],[[47,11],33],[[221,11],33],[[102,11],33],[[222,11],33],[[130,11],33],[[223,11],33],[[84,11],33],[[224,11],33],[[50,11],33],[[225,11],33],[[155,11],33],[[226,11],33],[[79,11],33],[[227,11],33],[[109,11],33],[[228,11],33],[[66,11],33],[[229,11],33],[[55,11],33],[[230,11],33],[[64,11],33],[[231,11],33],[[87,11],33],[[232,11],33],[215,46],[[[113,[215]]],46],[[]],[[]],[[]],[[[113,[216]]],53],[216,53],[[]],[[]],[[[113,[217]]],144],[217,144],[[]],[[]],[218,137],[[[113,[218]]],137],[[]],[[]],[219,139],[[[113,[219]]],139],[[]],[[[113,[220]]],134],[220,134],[[]],[[]],[221,47],[[[113,[221]]],47],[[]],[[]],[222,102],[[[113,[222]]],102],[[]],[[]],[[]],[[[113,[223]]],130],[223,130],[[]],[[[113,[224]]],84],[224,84],[[]],[[]],[[]],[[[113,[225]]],50],[225,50],[[]],[[[113,[226]]],155],[226,155],[[]],[[]],[[]],[[[113,[227]]],79],[227,79],[[]],[228,109],[[]],[[[113,[228]]],109],[[]],[[]],[229,66],[[[113,[229]]],66],[[]],[230,55],[[]],[[[113,[230]]],55],[[]],[231,64],[[]],[[[113,[231]]],64],[[]],[[]],[232,87],[[[113,[232]]],87],[[]],[[[23,[113]]],46],[[[23,[113]]],53],[[[23,[113]]],144],[[[23,[113]]],137],[[[23,[113]]],139],[[[23,[113]]],134],[[[23,[113]]],47],[[[23,[113]]],102],[[[23,[113]]],130],[[[23,[113]]],84],[[[23,[113]]],50],[[[23,[113]]],155],[[[23,[113]]],79],[[[23,[113]]],109],[[[23,[113]]],66],[[[23,[113]]],55],[[[23,[113]]],64],[[[23,[113]]],87],0,0,0,0,[46],[53],[144],[137],[139],[134],[47],[102],[130],[84],[50],[155],[79],[109],[66],[55],[64],[87],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[46,[[23,[113]]]],[53,[[23,[113]]]],[144,[[23,[113]]]],[137,[[23,[113]]]],[139,[[23,[113]]]],[134,[[23,[113]]]],[47,[[23,[113]]]],[102,[[23,[113]]]],[130,[[23,[113]]]],[84,[[23,[113]]]],[50,[[23,[113]]]],[155,[[23,[113]]]],[79,[[23,[113]]]],[109,[[23,[113]]]],[66,[[23,[113]]]],[55,[[23,[113]]]],[64,[[23,[113]]]],[87,[[23,[113]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[35,[[176,[46]]]],[[],13],[26,[[176,[46]]]],[[],13],[35,[[176,[53]]]],[[],13],[26,[[176,[53]]]],[[],13],[35,[[176,[144]]]],[[],13],[26,[[176,[144]]]],[[],13],[35,[[176,[137]]]],[26,[[176,[137]]]],[[],13],[[],13],[[],13],[26,[[176,[139]]]],[35,[[176,[139]]]],[[],13],[26,[[176,[134]]]],[35,[[176,[134]]]],[[],13],[[],13],[35,[[176,[47]]]],[26,[[176,[47]]]],[[],13],[[],13],[26,[[176,[102]]]],[35,[[176,[102]]]],[[],13],[[],13],[[],13],[35,[[176,[130]]]],[26,[[176,[130]]]],[[],13],[[],13],[26,[[176,[84]]]],[35,[[176,[84]]]],[[],13],[26,[[176,[50]]]],[35,[[176,[50]]]],[[],13],[[],13],[[],13],[35,[[176,[155]]]],[26,[[176,[155]]]],[[],13],[35,[[176,[79]]]],[26,[[176,[79]]]],[[],13],[[],13],[35,[[176,[109]]]],[26,[[176,[109]]]],[[],13],[[],13],[[],13],[26,[[176,[66]]]],[35,[[176,[66]]]],[[],13],[35,[[176,[55]]]],[26,[[176,[55]]]],[[],13],[[],13],[[],13],[26,[[176,[64]]]],[35,[[176,[64]]]],[[],13],[26,[[176,[87]]]],[[],13],[35,[[176,[87]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],0,0,0,0,0,0,[[],35],[[],35],[90,[[23,[113]]]],[104,[[23,[113]]]],[233,233],[233],[234],[234,234],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[90,90],[104,104],[[]],[[]],[90],[104],[[90,90],7],[[104,104],7],0,0,[[90,11],33],[[233,11],33],[[104,11],33],[[234,11],33],[[]],[233,90],[[[113,[233]]],90],[[]],[234,104],[[[113,[234]]],104],[[]],[[]],[[[23,[113]]],90],[[[23,[113]]],104],[90],[104],[[]],[[]],[[]],[[]],[90,[[23,[113]]]],[104,[[23,[113]]]],0,0,[[]],[[]],[[],13],[35,[[176,[90]]]],[26,[[176,[90]]]],[[],13],[35,[[176,[104]]]],[[],13],[26,[[176,[104]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],28],[[],28],[[],28],[[],28],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[63,[[23,[113]]]],[60,[[23,[113]]]],[99,[[23,[113]]]],[88,[[23,[113]]]],[89,[[23,[113]]]],[92,[[23,[113]]]],[49,[[23,[113]]]],[51,[[23,[113]]]],[62,[[23,[113]]]],[129,[[23,[113]]]],[112,[[23,[113]]]],[235],[235,235],[236,236],[236],[237,237],[237],[238,238],[238],[239,239],[239],[240],[240,240],[241],[241,241],[242,242],[242],[243,243],[243],[244],[244,244],[245],[245,245],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[63,63],[60,60],[99,99],[88,88],[89,89],[92,92],[49,49],[51,51],[62,62],[129,129],[112,112],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[63],[60],[99],[88],[89],[92],[49],[51],[62],[129],[112],0,0,[[63,63],7],[[60,60],7],[[99,99],7],[[88,88],7],[[89,89],7],[[92,92],7],[[49,49],7],[[51,51],7],[[62,62],7],[[129,129],7],[[112,112],7],[[63,11],33],[[235,11],33],[[60,11],33],[[236,11],33],[[99,11],33],[[237,11],33],[[88,11],33],[[238,11],33],[[89,11],33],[[239,11],33],[[92,11],33],[[240,11],33],[[49,11],33],[[241,11],33],[[51,11],33],[[242,11],33],[[62,11],33],[[243,11],33],[[129,11],33],[[244,11],33],[[112,11],33],[[245,11],33],[235,63],[[[113,[235]]],63],[[]],[[]],[[]],[236,60],[[[113,[236]]],60],[[]],[237,99],[[]],[[[113,[237]]],99],[[]],[[[113,[238]]],88],[[]],[238,88],[[]],[[[113,[239]]],89],[[]],[239,89],[[]],[[]],[240,92],[[[113,[240]]],92],[[]],[[]],[[[113,[241]]],49],[241,49],[[]],[[[113,[242]]],51],[[]],[242,51],[[]],[243,62],[[]],[[[113,[243]]],62],[[]],[[]],[[[113,[244]]],129],[244,129],[[]],[[[113,[245]]],112],[[]],[245,112],[[]],[[[23,[113]]],63],[[[23,[113]]],60],[[[23,[113]]],99],[[[23,[113]]],88],[[[23,[113]]],89],[[[23,[113]]],92],[[[23,[113]]],49],[[[23,[113]]],51],[[[23,[113]]],62],[[[23,[113]]],129],[[[23,[113]]],112],[63],[60],[99],[88],[89],[92],[49],[51],[62],[129],[112],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[63,[[23,[113]]]],[60,[[23,[113]]]],[99,[[23,[113]]]],[88,[[23,[113]]]],[89,[[23,[113]]]],[92,[[23,[113]]]],[49,[[23,[113]]]],[51,[[23,[113]]]],[62,[[23,[113]]]],[129,[[23,[113]]]],[112,[[23,[113]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35,[[176,[63]]]],[26,[[176,[63]]]],[[],13],[[],13],[[],13],[26,[[176,[60]]]],[35,[[176,[60]]]],[[],13],[[],13],[26,[[176,[99]]]],[35,[[176,[99]]]],[[],13],[35,[[176,[88]]]],[[],13],[26,[[176,[88]]]],[[],13],[35,[[176,[89]]]],[26,[[176,[89]]]],[[],13],[[],13],[[],13],[35,[[176,[92]]]],[26,[[176,[92]]]],[[],13],[[],13],[35,[[176,[49]]]],[26,[[176,[49]]]],[[],13],[35,[[176,[51]]]],[[],13],[26,[[176,[51]]]],[[],13],[[],13],[26,[[176,[62]]]],[35,[[176,[62]]]],[[],13],[[],13],[26,[[176,[129]]]],[35,[[176,[129]]]],[[],13],[35,[[176,[112]]]],[[],13],[26,[[176,[112]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],0,0,0,0,[[],35],[[],35],[54,[[23,[113]]]],[148,[[23,[113]]]],[246],[246,246],[247,247],[247],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[54,54],[148,148],[[]],[[]],[54],[148],[[54,54],7],[[148,148],7],[[54,11],33],[[246,11],33],[[148,11],33],[[247,11],33],[[]],[246,54],[[[113,[246]]],54],[[]],[[]],[247,148],[[[113,[247]]],148],[[]],[[[23,[113]]],54],[[[23,[113]]],148],[54],[148],[[]],[[]],[[]],[[]],[54,[[23,[113]]]],[148,[[23,[113]]]],0,0,0,[[]],[[]],[[],13],[35,[[176,[54]]]],[26,[[176,[54]]]],[[],13],[26,[[176,[148]]]],[35,[[176,[148]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],28],[[],28],[[],28],[[],28],0,0,0,0,[[],35],[[],35],[125,[[23,[113]]]],[57,[[23,[113]]]],[248],[248,248],[249],[249,249],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[125,125],[57,57],[[]],[[]],0,[125],[57],0,0,[[125,125],7],[[57,57],7],[[125,11],33],[[248,11],33],[[57,11],33],[[249,11],33],[248,125],[[]],[[[113,[248]]],125],[[]],[[[113,[249]]],57],[[]],[249,57],[[]],[[[23,[113]]],125],[[[23,[113]]],57],[125],[57],[[]],[[]],[[]],[[]],[125,[[23,[113]]]],[57,[[23,[113]]]],0,0,[[125,164,164,164,164],57],0,[[]],[[]],[26,[[176,[125]]]],[35,[[176,[125]]]],[[],13],[[],13],[35,[[176,[57]]]],[26,[[176,[57]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],28],[[],28],[[],28],[[],28],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[149,[[23,[113]]]],[72,[[23,[113]]]],[94,[[23,[113]]]],[86,[[23,[113]]]],[97,[[23,[113]]]],[61,[[23,[113]]]],[111,[[23,[113]]]],[69,[[23,[113]]]],[59,[[23,[113]]]],[126,[[23,[113]]]],[114,[[23,[113]]]],[52,[[23,[113]]]],[65,[[23,[113]]]],[133,[[23,[113]]]],[121,[[23,[113]]]],[100,[[23,[113]]]],[58,[[23,[113]]]],[77,[[23,[113]]]],[103,[[23,[113]]]],[101,[[23,[113]]]],[105,[[23,[113]]]],[116,[[23,[113]]]],[123,[[23,[113]]]],[131,[[23,[113]]]],[250,250],[250],[251],[251,251],[252,252],[252],[253],[253,253],[254,254],[254],[255,255],[255],[256,256],[256],[257],[257,257],[258],[258,258],[259],[259,259],[260,260],[260],[261],[261,261],[262],[262,262],[263,263],[263],[264],[264,264],[265,265],[265],[266,266],[266],[267,267],[267],[268,268],[268],[269],[269,269],[270],[270,270],[271,271],[271],[272],[272,272],[273,273],[273],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[149,149],[72,72],[94,94],[86,86],[97,97],[61,61],[111,111],[69,69],[59,59],[126,126],[114,114],[52,52],[65,65],[133,133],[121,121],[100,100],[58,58],[77,77],[103,103],[101,101],[105,105],[116,116],[123,123],[131,131],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[149],[72],[94],[86],[97],[61],[111],[69],[59],[126],[114],[52],[65],[133],[121],[100],[58],[77],[103],[101],[105],[116],[123],[131],[[149,149],7],[[72,72],7],[[94,94],7],[[86,86],7],[[97,97],7],[[61,61],7],[[111,111],7],[[69,69],7],[[59,59],7],[[126,126],7],[[114,114],7],[[52,52],7],[[65,65],7],[[133,133],7],[[121,121],7],[[100,100],7],[[58,58],7],[[77,77],7],[[103,103],7],[[101,101],7],[[105,105],7],[[116,116],7],[[123,123],7],[[131,131],7],0,[[149,11],33],[[250,11],33],[[72,11],33],[[251,11],33],[[94,11],33],[[252,11],33],[[86,11],33],[[253,11],33],[[97,11],33],[[254,11],33],[[61,11],33],[[255,11],33],[[111,11],33],[[256,11],33],[[69,11],33],[[257,11],33],[[59,11],33],[[258,11],33],[[126,11],33],[[259,11],33],[[114,11],33],[[260,11],33],[[52,11],33],[[261,11],33],[[65,11],33],[[262,11],33],[[133,11],33],[[263,11],33],[[121,11],33],[[264,11],33],[[100,11],33],[[265,11],33],[[58,11],33],[[266,11],33],[[77,11],33],[[267,11],33],[[103,11],33],[[268,11],33],[[101,11],33],[[269,11],33],[[105,11],33],[[270,11],33],[[116,11],33],[[271,11],33],[[123,11],33],[[272,11],33],[[131,11],33],[[273,11],33],[[]],[250,149],[164,149],[[[113,[250]]],149],[[]],[251,72],[[[113,[251]]],72],[[]],[[]],[[[113,[252]]],94],[252,94],[[]],[[]],[253,86],[[]],[[[113,[253]]],86],[[]],[254,97],[[[113,[254]]],97],[[]],[[]],[[]],[255,61],[[[113,[255]]],61],[[]],[[[113,[256]]],111],[[]],[256,111],[[]],[[[113,[257]]],69],[257,69],[[]],[[]],[258,59],[[]],[[[113,[258]]],59],[[]],[259,126],[[]],[[[113,[259]]],126],[[]],[[]],[260,114],[[[113,[260]]],114],[[]],[[]],[[[113,[261]]],52],[261,52],[[]],[[]],[262,65],[[[113,[262]]],65],[[]],[263,133],[[[113,[263]]],133],[[]],[[]],[[[113,[264]]],121],[[]],[264,121],[[]],[[[113,[265]]],100],[265,100],[[]],[[]],[[[113,[266]]],58],[266,58],[[]],[[]],[[]],[[[113,[267]]],77],[267,77],[[]],[[[113,[268]]],103],[[]],[268,103],[[]],[[[113,[269]]],101],[[]],[269,101],[[]],[270,105],[[]],[[[113,[270]]],105],[[]],[[]],[271,116],[[[113,[271]]],116],[[]],[272,123],[[[113,[272]]],123],[[]],[[]],[[[113,[273]]],131],[273,131],[[]],[[]],[[[23,[113]]],149],[[[23,[113]]],72],[[[23,[113]]],94],[[[23,[113]]],86],[[[23,[113]]],97],[[[23,[113]]],61],[[[23,[113]]],111],[[[23,[113]]],69],[[[23,[113]]],59],[[[23,[113]]],126],[[[23,[113]]],114],[[[23,[113]]],52],[[[23,[113]]],65],[[[23,[113]]],133],[[[23,[113]]],121],[[[23,[113]]],100],[[[23,[113]]],58],[[[23,[113]]],77],[[[23,[113]]],103],[[[23,[113]]],101],[[[23,[113]]],105],[[[23,[113]]],116],[[[23,[113]]],123],[[[23,[113]]],131],[149],[72],[94],[86],[97],[61],[111],[69],[59],[126],[114],[52],[65],[133],[121],[100],[58],[77],[103],[101],[105],[116],[123],[131],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[149,[[23,[113]]]],[72,[[23,[113]]]],[94,[[23,[113]]]],[86,[[23,[113]]]],[97,[[23,[113]]]],[61,[[23,[113]]]],[111,[[23,[113]]]],[69,[[23,[113]]]],[59,[[23,[113]]]],[126,[[23,[113]]]],[114,[[23,[113]]]],[52,[[23,[113]]]],[65,[[23,[113]]]],[133,[[23,[113]]]],[121,[[23,[113]]]],[100,[[23,[113]]]],[58,[[23,[113]]]],[77,[[23,[113]]]],[103,[[23,[113]]]],[101,[[23,[113]]]],[105,[[23,[113]]]],[116,[[23,[113]]]],[123,[[23,[113]]]],[131,[[23,[113]]]],0,0,[[1,41],149],[[1,151],72],[[1,107,107],94],[[1,107,107],86],[[1,107,107],97],[[1,107,107],61],[[1,107,107],111],[[1,107,107],69],[[1,107,107],59],[[1,107,107],126],[[1,107,107],114],[[1,107],52],[[1,107,107,164],65],[[1,107,107,107],133],[[1,107,107],121],[[1,107,107],100],[[1,107,107],58],[[1,107,107],77],[[1,107,107],103],[[1,107,107],101],[[1,107,107],105],[[1,107,107],116],[[1,107],123],[[1,72,107,107],131],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[26,[[176,[149]]]],[35,[[176,[149]]]],[[],13],[[],13],[26,[[176,[72]]]],[35,[[176,[72]]]],[[],13],[[],13],[35,[[176,[94]]]],[26,[[176,[94]]]],[[],13],[[],13],[35,[[176,[86]]]],[26,[[176,[86]]]],[[],13],[[],13],[26,[[176,[97]]]],[[],13],[35,[[176,[97]]]],[[],13],[35,[[176,[61]]]],[26,[[176,[61]]]],[[],13],[[],13],[35,[[176,[111]]]],[[],13],[26,[[176,[111]]]],[[],13],[26,[[176,[69]]]],[[],13],[35,[[176,[69]]]],[[],13],[35,[[176,[59]]]],[[],13],[26,[[176,[59]]]],[[],13],[35,[[176,[126]]]],[26,[[176,[126]]]],[[],13],[[],13],[[],13],[35,[[176,[114]]]],[26,[[176,[114]]]],[[],13],[[],13],[26,[[176,[52]]]],[35,[[176,[52]]]],[[],13],[35,[[176,[65]]]],[[],13],[26,[[176,[65]]]],[[],13],[26,[[176,[133]]]],[[],13],[35,[[176,[133]]]],[[],13],[[],13],[35,[[176,[121]]]],[26,[[176,[121]]]],[[],13],[26,[[176,[100]]]],[35,[[176,[100]]]],[[],13],[[],13],[35,[[176,[58]]]],[[],13],[26,[[176,[58]]]],[[],13],[[],13],[35,[[176,[77]]]],[26,[[176,[77]]]],[[],13],[26,[[176,[103]]]],[35,[[176,[103]]]],[[],13],[[],13],[35,[[176,[101]]]],[26,[[176,[101]]]],[[],13],[[],13],[[],13],[35,[[176,[105]]]],[26,[[176,[105]]]],[[],13],[35,[[176,[116]]]],[26,[[176,[116]]]],[[],13],[[],13],[35,[[176,[123]]]],[26,[[176,[123]]]],[[],13],[[],13],[35,[[176,[131]]]],[26,[[176,[131]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[56,[[23,[113]]]],[108,[[23,[113]]]],[106,[[23,[113]]]],[95,[[23,[113]]]],[146,[[23,[113]]]],[85,[[23,[113]]]],[136,[[23,[113]]]],[132,[[23,[113]]]],[74,[[23,[113]]]],[138,[[23,[113]]]],[82,[[23,[113]]]],[96,[[23,[113]]]],[110,[[23,[113]]]],[274,274],[274],[275],[275,275],[276,276],[276],[277,277],[277],[278,278],[278],[279,279],[279],[280,280],[280],[281],[281,281],[282],[282,282],[283],[283,283],[284],[284,284],[285,285],[285],[286],[286,286],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[56,56],[108,108],[106,106],[95,95],[146,146],[85,85],[136,136],[132,132],[74,74],[138,138],[82,82],[96,96],[110,110],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[56],[108],[106],[95],[146],[85],[136],[132],[74],[138],[82],[96],[110],0,0,0,[[],85],[[56,56],7],[[108,108],7],[[106,106],7],[[287,287],7],[[95,95],7],[[146,146],7],[[85,85],7],[[136,136],7],[[132,132],7],[[74,74],7],[[138,138],7],[[82,82],7],[[96,96],7],[[110,110],7],0,[[56,11],33],[[274,11],33],[[108,11],33],[[275,11],33],[[106,11],33],[[276,11],33],[[287,11],33],[[95,11],33],[[277,11],33],[[146,11],33],[[278,11],33],[[85,11],33],[[279,11],33],[[136,11],33],[[280,11],33],[[132,11],33],[[281,11],33],[[74,11],33],[[282,11],33],[[138,11],33],[[283,11],33],[[82,11],33],[[284,11],33],[[96,11],33],[[285,11],33],[[110,11],33],[[286,11],33],[[]],[[[113,[274]]],56],[274,56],[[]],[275,108],[[[113,[275]]],108],[[]],[[]],[[[113,[276]]],106],[276,106],[[]],[[]],[[]],[277,95],[[]],[[[113,[277]]],95],[[]],[[]],[278,146],[[[113,[278]]],146],[[]],[[]],[[[113,[279]]],85],[279,85],[[]],[[]],[[[113,[280]]],136],[280,136],[[]],[[]],[281,132],[[[113,[281]]],132],[[]],[[[113,[282]]],74],[[]],[282,74],[[]],[[]],[283,138],[[[113,[283]]],138],[[]],[[]],[284,82],[[[113,[284]]],82],[[]],[[]],[285,96],[[[113,[285]]],96],[[]],[[]],[[[113,[286]]],110],[286,110],[[]],[[[23,[113]]],56],[[[23,[113]]],108],[[[23,[113]]],106],[[[23,[113]]],95],[[[23,[113]]],146],[[[23,[113]]],85],[[[23,[113]]],136],[[[23,[113]]],132],[[[23,[113]]],74],[[[23,[113]]],138],[[[23,[113]]],82],[[[23,[113]]],96],[[[23,[113]]],110],[56],[108],[106],[95],[146],[85],[136],[132],[74],[138],[82],[96],[110],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[56,[[23,[113]]]],[108,[[23,[113]]]],[106,[[23,[113]]]],[95,[[23,[113]]]],[146,[[23,[113]]]],[85,[[23,[113]]]],[136,[[23,[113]]]],[132,[[23,[113]]]],[74,[[23,[113]]]],[138,[[23,[113]]]],[82,[[23,[113]]]],[96,[[23,[113]]]],[110,[[23,[113]]]],0,0,0,0,0,[[287,57],146],[[[43,[56]],57],85],[[[128,[107]],1,57],96],[[146,57],110],0,0,0,[[[43,[164]],1,57],96],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35,[[176,[56]]]],[[],13],[26,[[176,[56]]]],[[],13],[[],13],[35,[[176,[108]]]],[26,[[176,[108]]]],[[],13],[[],13],[35,[[176,[106]]]],[26,[[176,[106]]]],[[],13],[[],13],[[],13],[26,[[176,[95]]]],[35,[[176,[95]]]],[[],13],[26,[[176,[146]]]],[[],13],[35,[[176,[146]]]],[[],13],[26,[[176,[85]]]],[35,[[176,[85]]]],[[],13],[[],13],[26,[[176,[136]]]],[[],13],[35,[[176,[136]]]],[[],13],[26,[[176,[132]]]],[35,[[176,[132]]]],[[],13],[[],13],[35,[[176,[74]]]],[26,[[176,[74]]]],[[],13],[[],13],[35,[[176,[138]]]],[[],13],[26,[[176,[138]]]],[[],13],[35,[[176,[82]]]],[26,[[176,[82]]]],[[],13],[[],13],[26,[[176,[96]]]],[[],13],[35,[[176,[96]]]],[[],13],[[],13],[35,[[176,[110]]]],[26,[[176,[110]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],0,0,0,0,0,0,[[],35],[32,[[23,[113]]]],[288],[288,288],[[]],[[]],[[]],[[]],[32,32],[[]],[32,[[13,[45,6]]]],[32],[[32,5],7],[[32,32],7],[[32,4],[[13,[6]]]],[[32,11],[[13,[12]]]],[[288,11],[[13,[12]]]],[[[113,[288]]],32],[[]],[288,32],[[]],[[[23,[113]]],32],[[32,5,7],[[13,[45,6]]]],[32,170],[32],[[32,32]],[[]],[[]],[32,[[23,[113]]]],[[],[[13,[32,6]]]],[[32,4,4],[[13,[6]]]],[[]],[[],13],[35,[[13,[32,6]]]],[26,[[13,[32,6]]]],[[],13],[[],13],[[],13],[[],28],[[],28],0,0,0,0,[[],35],[145,142],[113,289],[145,[[23,[113]]]],[289,289],[289],[[]],[[]],[[]],[[]],[145,167],[145,145],[[]],[145],[145],[[145,36],[[13,[145,15]]]],[[145,145],[[13,[145,15]]]],[145],[145,36],[145,1],[[36,1],145],[[145,145],7],[145],[[145,11],[[13,[12]]]],[[289,11],[[13,[12]]]],[[[113,[289]]],145],[289,145],[[]],[[]],[[[23,[113]]],145],[[174,36,1],[[13,[145,15]]]],[145],[[]],[[]],[145,[[23,[113]]]],[145,7],[145,7],[145,7],[[[113,[289]]],289],[145,2],[145,2],[145],[145,290],[145,2],[145,23],[145,[[23,[290]]]],[145,[[13,[158,15]]]],[[]],[145,[[13,[[43,[42]],15]]]],[35,[[13,[145,6]]]],[[],13],[26,[[13,[145,6]]]],[[],13],[[],13],[[],13],[[],28],[[],28],[145,145],[5,291],[[],[[13,[4]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],35],[[],35],[[],35],[[],35],[[],35],[151],[[],[[23,[113]]]],[113],[141,[[23,[113]]]],[151,[[23,[113]]]],[292,292],[151],[293,293],[293],[151,[[13,[5,294]]]],[[],292],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[113,113],[141,141],[151,151],[[]],[[]],[[]],[[151,151],3],[113,164],[292,164],[158],[141,[[13,[166,6]]]],[113],[141],[151],0,0,0,[113,[[13,[113,6]]]],[[],[[13,[6]]]],[158],[113],[[113,113],7],[[141,141],7],[151,7],0,0,0,[[113,11],[[13,[12]]]],[[141,11],[[13,[12]]]],[[292,11],[[13,[12]]]],[[151,11],[[13,[12]]]],[[151,11],[[13,[12]]]],[[293,11],[[13,[12]]]],[[],158],[[]],[[]],[[[113,[292]]],141],[292,141],[[]],[[]],[5,151],[4,151],[[[113,[293]]],151],[293,151],[[]],[[]],[35,[[13,[6]]]],[[[23,[113]]]],[[[23,[113]]],141],[[[23,[113]]],151],[292,[[23,[[113,[292]]]]]],[26,[[13,[6]]]],0,[[],5],0,[113],[141],[151],[[]],[[]],[[]],[[]],[[]],[[]],[[],35],[[],[[23,[113]]]],[141,[[23,[113]]]],[151,[[23,[113]]]],[113],[[],26],[158,7],[151,7],[113],[158,2],[151,2],0,0,0,[[],113],[[]],0,[151,[[23,[3]]]],0,0,[[]],[[]],[[]],[[],4],[151,[[290,[5]]]],[158,[[43,[8,42]]]],[[],13],[26,[[13,[158]]]],[[],13],[26,[[13,[113]]]],[35,[[13,[113]]]],[26,[[13,[141,6]]]],[[],13],[35,[[13,[141,6]]]],[[],13],[[],13],[35,[[13,[151,6]]]],[26,[[13,[151,6]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[113,113],[[]],[[],5],0,0,0,0,[[],35],[128,[[23,[113]]]],[[]],[[]],[[]],[[]],[128,128],[[]],[[128,11],[[13,[12]]]],[[]],[[]],[[],128],[[[23,[113]]],128],[[[43,[42]]],[[13,[128,6]]]],[[128,167],[[13,[6]]]],[[]],[[]],[[]],[128],[128,[[23,[113]]]],[295,296],[295,296],[128,41],[297,23],[[]],[[],13],[35,[[13,[128,6]]]],[[],13],[26,[[13,[128,6]]]],[[],13],[[],13],[[],28],[[],28],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[43,[35,42]]],[[13,[44,6]]]],[[[43,[35,42]]],[[13,[26,6]]]],[[]],0,[[]],[[],[[13,[6]]]],[7,[[13,[6]]]],[7,[[13,[6]]]],[[],[[13,[26,6]]]],[[],45],[[168,164,164,170,170],164],[170],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[156],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[41,164,164,164,164,164,164,142],164],[[142,170,161],164],[[142,142,170],164],[[142,170,161],164],[142,164],[[171,142],164],0,[[142,171],164],[[164,164,161,164,164],170],[[164,164,170],164],[[170,156,170],164],0,[[164,172],164],[[23,170,164],164],[[156,170],164],[[156,170],164],[[170,23,170,164],164],0,[165,164],[[170,168,164,164],164],[[168,164],164],[171],[[40,161,161,22,170],164],[[40,164,41,22,156,170],164],[[142,142,170],164],0,0,0,0,0,0,[[40,170],164],0,[[170,168,164,164,168,164],164],[[23,170,23,170],164],[170,164],[[156,170],164],[[164,156],164],[[156,170,164],164],[156,164],0,[[],156],[170,164],[[170,156,164,170],164],[[170,170],164],[[156,156,170],164],0,[[39,39,164],164],[170,164],[[170,39],164],0,[170,164],[[39,156],164],[[156,39],164],0,0,0,0,[[164,164,170],164],[[164,164,170],164],[[164,164,170],164],0,[[164,164,170,170],164],[[164,164,170],164],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[5,32,36],[[13,[298,6]]]],[[]],[[32,36],[[13,[298,6]]]],[[298,41],[[13,[145,6]]]],[[298,41,145],[[13,[6]]]],[[]],[298,[[13,[6]]]],[298,[[13,[6]]]],[[298,5,145],[[13,[6]]]],[[],13],[[],13],[[],28],0,0,[[],35],[[]],[[]],[[]],[[]],[117,117],[[]],[[],117],[[117,11],[[13,[12]]]],[[]],[[]],[[[43,[35,42]]],[[13,[117,6]]]],[[],117],[117,[[13,[6]]]],[[]],[[]],[[]],[117,299],[295,296],[295,296],[299,23],[[],117],[299],[[]],[[],13],[26,[[13,[117,6]]]],[[],13],[35,[[13,[117,6]]]],[[],13],[[],13],[[],28],[[],28],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],35],[[],[[23,[113]]]],[141,[[13,[166,6]]]],[[],[[13,[6]]]],[35,[[13,[6]]]],[[[23,[113]]]],[26,[[13,[6]]]],[[],35],[[],[[23,[113]]]],[[],26],[[]],0,[[]],0,0,0,0,0,0,0,[[],35],[147,[[23,[113]]]],[300],[300,300],0,[[]],[[]],[[]],[[]],[147,147],[[]],[147],[[147,147],7],[[147,11],33],[[300,11],33],[[]],[[[113,[300]]],147],[300,147],[[]],[[[23,[113]]],147],[[301,147],[[176,[302]]]],[147],[[]],[[]],[147,[[23,[113]]]],0,[[164,4,[43,[4]]],[[176,[147]]]],0,0,[[]],[35,[[176,[147]]]],[26,[[176,[147]]]],[[],13],[[],13],[[],13],[[],13],[[],28],[[],28]],"p":[[3,"DataType"],[15,"usize"],[4,"Ordering"],[3,"String"],[15,"str"],[4,"Error"],[15,"bool"],[15,"u8"],[15,"u16"],[3,"FunctionNotFoundError"],[3,"Formatter"],[3,"Error"],[4,"Result"],[3,"TypeMismatchError"],[4,"NDArrayError"],[4,"ParseDataTypeError"],[3,"ShapeError"],[3,"ValueDowncastError"],[4,"Infallible"],[3,"NulError"],[3,"IntoStringError"],[3,"DLDataType"],[4,"Option"],[3,"Demand"],[8,"Error"],[4,"RetValue"],[3,"Error"],[3,"TypeId"],[3,"CompilerConfig"],[4,"Error"],[3,"IRModule"],[3,"Module"],[6,"Result"],[3,"Error"],[4,"ArgValue"],[3,"Device"],[4,"DeviceType"],[3,"UnsupportedDeviceError"],[15,"u32"],[3,"DLDevice"],[15,"i64"],[3,"Global"],[3,"Vec"],[4,"Args"],[3,"Function"],[3,"PadAttrs"],[3,"MatmulAttrs"],[3,"Match"],[3,"TransposeAttrs"],[3,"SoftmaxAttrs"],[3,"SqueezeAttrs"],[3,"Cast"],[3,"Conv1DAttrs"],[3,"Source"],[3,"DropoutAttrs"],[3,"Type"],[3,"Span"],[3,"Lt"],[3,"FloorMod"],[3,"CastAttrs"],[3,"Div"],[3,"TakeAttrs"],[3,"ClipAttrs"],[3,"BatchMatmulAttrs"],[3,"Ramp"],[3,"UpSamplingAttrs"],[3,"DiagnosticRenderer"],[3,"Attrs"],[3,"FloorDiv"],[3,"RefCreate"],[3,"Clause"],[3,"Var"],[3,"BaseExpr"],[3,"IncompleteType"],[3,"ConstIntBound"],[3,"Id"],[3,"Le"],[3,"Call"],[3,"LeakyReluAttrs"],[3,"PatternTuple"],[3,"BaseFunc"],[3,"BaseTensorType"],[3,"Constructor"],[3,"MaxPool2DAttrs"],[3,"TupleType"],[3,"Sub"],[3,"LayerNormAttrs"],[3,"ConcatenateAttrs"],[3,"ReshapeAttrs"],[3,"ReduceAttrs"],[3,"Constant"],[3,"SplitAttrs"],[3,"RefWrite"],[3,"Add"],[3,"TypeVar"],[3,"TensorType"],[3,"Mul"],[3,"TupleGetItem"],[3,"ExpandDimsAttrs"],[3,"Ne"],[3,"Ge"],[3,"DenseAttrs"],[3,"Gt"],[3,"VarianceAttrs"],[3,"And"],[3,"PointerType"],[3,"PrimExpr"],[3,"PrimType"],[3,"AvgPool2DAttrs"],[3,"TypeData"],[3,"Mod"],[3,"StridedSliceAttrs"],[3,"ObjectPtr"],[3,"Max"],[3,"If"],[3,"Or"],[3,"Map"],[3,"Op"],[3,"Var"],[3,"Expr"],[3,"Eq"],[3,"GlobalVar"],[3,"Not"],[3,"Let"],[3,"SourceName"],[3,"Min"],[3,"RefRead"],[3,"Array"],[3,"StackAttrs"],[3,"GlobalPool2DAttrs"],[3,"Let"],[3,"FuncType"],[3,"Select"],[3,"BiasAddAttrs"],[3,"Function"],[3,"TypeConstraint"],[3,"Conv3DAttrs"],[3,"RefType"],[3,"Conv3DTransposeAttrs"],[3,"PatternVar"],[3,"ObjectRef"],[3,"DLTensor"],[3,"PatternWildcard"],[3,"Conv2DAttrs"],[3,"NDArray"],[3,"GlobalTypeVar"],[3,"PassInfo"],[3,"SourceMap"],[3,"IntImm"],[3,"PatternConstructor"],[3,"String"],[3,"Diagnostic"],[3,"Tuple"],[15,"i16"],[3,"BatchNormAttrs"],[15,"i8"],[15,"f32"],[4,"ByteArray"],[15,"f64"],[3,"Pattern"],[15,"u64"],[3,"DiagnosticContext"],[3,"CStr"],[15,"i32"],[3,"TVMByteArray"],[3,"CString"],[15,"isize"],[19,"TVMValue"],[3,"Box"],[4,"c_void"],[3,"DLManagedTensor"],[3,"TVMParallelGroupEnv"],[3,"__fsid_t"],[3,"ArrayBase"],[3,"ConstIntBoundNode"],[6,"Result"],[3,"BaseAttrsNode"],[3,"DiagnosticNode"],[3,"DiagnosticRendererNode"],[3,"DiagnosticContextNode"],[3,"DiagnosticBuilder"],[4,"DiagnosticLevel"],[3,"BaseExprNode"],[3,"PrimExprNode"],[3,"GlobalVarNode"],[8,"IsObjectRef"],[3,"BaseFuncNode"],[3,"IRModuleNode"],[8,"Into"],[4,"Error"],[3,"Path"],[8,"AsRef"],[3,"OpNode"],[3,"ExprNode"],[3,"IdNode"],[3,"ConstantNode"],[3,"TupleNode"],[3,"VarNode"],[3,"CallNode"],[3,"LetNode"],[3,"IfNode"],[3,"TupleGetItemNode"],[3,"RefCreateNode"],[3,"RefReadNode"],[3,"RefWriteNode"],[3,"ConstructorNode"],[3,"PatternNode"],[3,"PatternWildcardNode"],[3,"PatternVarNode"],[3,"PatternConstructorNode"],[3,"PatternTupleNode"],[3,"ClauseNode"],[3,"MatchNode"],[3,"FunctionNode"],[3,"PadAttrsNode"],[3,"Conv1DAttrsNode"],[3,"Conv2DAttrsNode"],[3,"Conv3DAttrsNode"],[3,"Conv3DTransposeAttrsNode"],[3,"BiasAddAttrsNode"],[3,"MatmulAttrsNode"],[3,"DenseAttrsNode"],[3,"GlobalPool2DAttrsNode"],[3,"MaxPool2DAttrsNode"],[3,"SoftmaxAttrsNode"],[3,"BatchNormAttrsNode"],[3,"LeakyReluAttrsNode"],[3,"AvgPool2DAttrsNode"],[3,"UpSamplingAttrsNode"],[3,"DropoutAttrsNode"],[3,"BatchMatmulAttrsNode"],[3,"LayerNormAttrsNode"],[3,"ReduceAttrsNode"],[3,"VarianceAttrsNode"],[3,"ClipAttrsNode"],[3,"CastAttrsNode"],[3,"ExpandDimsAttrsNode"],[3,"ConcatenateAttrsNode"],[3,"ReshapeAttrsNode"],[3,"SplitAttrsNode"],[3,"TransposeAttrsNode"],[3,"SqueezeAttrsNode"],[3,"TakeAttrsNode"],[3,"StackAttrsNode"],[3,"StridedSliceAttrsNode"],[3,"SourceNode"],[3,"SourceMapNode"],[3,"SourceNameNode"],[3,"SpanNode"],[3,"IntImmNode"],[3,"VarNode"],[3,"AddNode"],[3,"SubNode"],[3,"MulNode"],[3,"DivNode"],[3,"ModNode"],[3,"FloorDivNode"],[3,"FloorModNode"],[3,"MinNode"],[3,"MaxNode"],[3,"CastNode"],[3,"RampNode"],[3,"SelectNode"],[3,"EqNode"],[3,"NeNode"],[3,"LtNode"],[3,"LeNode"],[3,"GtNode"],[3,"GeNode"],[3,"AndNode"],[3,"OrNode"],[3,"NotNode"],[3,"LetNode"],[3,"TypeNode"],[3,"PrimTypeNode"],[3,"PointerTypeNode"],[3,"TypeVarNode"],[3,"GlobalTypeVarNode"],[3,"TupleTypeNode"],[3,"TypeConstraintNode"],[3,"FuncTypeNode"],[3,"IncompleteTypeNode"],[3,"RelayRefTypeNode"],[3,"BaseTensorTypeNode"],[3,"TensorTypeNode"],[3,"TypeDataNode"],[4,"TypeKind"],[3,"ModuleNode"],[3,"NDArrayContainer"],[4,"Cow"],[6,"PyResult"],[3,"Object"],[3,"StringObj"],[3,"Utf8Error"],[3,"Python"],[3,"PyDict"],[3,"IntoIter"],[3,"GraphRt"],[3,"IntoIter"],[3,"PassInfoNode"],[8,"Fn"],[6,"Pass"],[13,"DataTypeMismatch"],[8,"ToFunction"],[8,"Typed"],[3,"RawArgs"],[8,"Num32"],[8,"IsObject"],[8,"AsArgValue"]]},\
"tvm_graph_rt":{"doc":"This crate is an implementation of the TVM runtime for …","t":"ENNNNDRRRRNNNNDDNNDNNDDNNNNINNNNDNNNNNIEENNNNDFFFFFFTDNNDNMLMLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMOLLLLLLLLMLLMLLLLLLLLMLMLLLAMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLMMOMMLLLLLLLLLLLLLLLLFLMMLLLMMMALLFLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLEDENNNDNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGDGRRRRRRDGRRRRRRRRRRRRRRDRRDGRRRRRRRRRRRRRRRRRRRRRRRRRFGRRRRRRRRRRRRRRRRRRRFFFFFFGFFFFGFFFFFDFFFFFFFGRRRRRFGFFFFFFFGFFFFFGFFFGFFFGGDGFFFGFFTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRGGGGGGGGGGGGDGGRGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGMMLLLLLLLLLLLLMLLLLLLLLLLLLLMLLMMLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLGGGGGGGGGLLLLLLMLMLMMLLMMGLMMLLLLLLLLLLLLLLLLLLLLLLLLLGLLLLLLGGGGGGGGGMMMMMMLGENNNNNNNNNNNNNNNNNNNNNNNNIENNNNTNNOOMMMMMM","n":["ArgValue","ArrayHandle","ArrayHandle","Bytes","Bytes","DLTensor","DTYPE_FLOAT32","DTYPE_FLOAT64","DTYPE_INT32","DTYPE_UINT32","DataType","DataType","Device","Device","DsoModule","Entry","Float","Float","FuncCallError","FuncHandle","FuncHandle","Graph","GraphExecutor","Handle","Handle","Int","Int","Module","ModuleHandle","ModuleHandle","NDArrayHandle","NDArrayHandle","Node","Null","Null","ObjectHandle","ObjectHandle","Owned","PackedFunc","RetValue","Storage","Str","Str","String","String","SystemLibModule","TVMAPISetLastError","TVMBackendAllocWorkspace","TVMBackendFreeWorkspace","TVMBackendParallelBarrier","TVMBackendParallelLaunch","TVMGetLastError","TVMValue","Tensor","UInt","UInt","ValueDowncastError","View","actual_type","align","arg_nodes","as_dltensor","as_mut_ptr","as_mut_slice","as_ptr","as_slice","attrs","attrs","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_offset","call_packed","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","control_deps","copy","data","data","data_mut","default","default","default","default","deserialize","deserialize","deserialize","device","drop","dtype","eq","eq","eq","errors","expected_type","ffi","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_tvm_value","from_tvm_value","get_function","get_function","get_function","get_input","get_input_index","get_output","get_with_context","heads","id","import_module","index","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_contiguous","is_owned","load_param_dict","load_params","name","ndim","new","new","new","node_row_ptr","nodes","op","packed_func","provide","provide","remove_item","run","serialize","serialize","serialize","set_input","shape","shape","size","strides","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_tvm_value","to_tvm_value","to_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","v_device","v_float64","v_handle","v_int64","v_str","v_type","version","view","ArrayError","FunctionNotFound","GraphFormatError","IncompatibleDataType","InvalidAttr","InvalidDLType","InvalidPointer","MissingAttr","MissingField","Params","Parse","ShapeError","UnsupportedOp","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","provide","provide","provide","provide","source","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","BackendPackedCFunc","DLDataType","DLDataTypeCode","DLDataTypeCode_kDLBfloat","DLDataTypeCode_kDLComplex","DLDataTypeCode_kDLFloat","DLDataTypeCode_kDLInt","DLDataTypeCode_kDLOpaqueHandle","DLDataTypeCode_kDLUInt","DLDevice","DLDeviceType","DLDeviceType_kDLCPU","DLDeviceType_kDLCUDA","DLDeviceType_kDLCUDAHost","DLDeviceType_kDLCUDAManaged","DLDeviceType_kDLExtDev","DLDeviceType_kDLHexagon","DLDeviceType_kDLMetal","DLDeviceType_kDLOneAPI","DLDeviceType_kDLOpenCL","DLDeviceType_kDLROCM","DLDeviceType_kDLROCMHost","DLDeviceType_kDLVPI","DLDeviceType_kDLVulkan","DLDeviceType_kDLWebGPU","DLManagedTensor","DLPACK_ABI_VERSION","DLPACK_VERSION","DLTensor","FTVMParallelLambda","INT16_MAX","INT16_MIN","INT32_MAX","INT32_MIN","INT8_MAX","INT8_MIN","INTPTR_MAX","INTPTR_MIN","INT_FAST16_MAX","INT_FAST16_MIN","INT_FAST32_MAX","INT_FAST32_MIN","INT_FAST8_MAX","INT_FAST8_MIN","INT_LEAST16_MAX","INT_LEAST16_MIN","INT_LEAST32_MAX","INT_LEAST32_MIN","INT_LEAST8_MAX","INT_LEAST8_MIN","PTRDIFF_MAX","PTRDIFF_MIN","SIG_ATOMIC_MAX","SIG_ATOMIC_MIN","SIZE_MAX","TVMAPISetLastError","TVMArgTypeCode","TVMArgTypeCode_kDLDevice","TVMArgTypeCode_kTVMArgFloat","TVMArgTypeCode_kTVMArgInt","TVMArgTypeCode_kTVMBytes","TVMArgTypeCode_kTVMDLTensorHandle","TVMArgTypeCode_kTVMDataType","TVMArgTypeCode_kTVMExtBegin","TVMArgTypeCode_kTVMExtEnd","TVMArgTypeCode_kTVMExtReserveEnd","TVMArgTypeCode_kTVMModuleHandle","TVMArgTypeCode_kTVMNDArrayHandle","TVMArgTypeCode_kTVMNNVMFirst","TVMArgTypeCode_kTVMNNVMLast","TVMArgTypeCode_kTVMNullptr","TVMArgTypeCode_kTVMObjectHandle","TVMArgTypeCode_kTVMObjectRValueRefArg","TVMArgTypeCode_kTVMOpaqueHandle","TVMArgTypeCode_kTVMPackedFuncHandle","TVMArgTypeCode_kTVMStr","TVMArrayAlloc","TVMArrayCopyFromBytes","TVMArrayCopyFromTo","TVMArrayCopyToBytes","TVMArrayFree","TVMArrayFromDLPack","TVMArrayHandle","TVMArrayToDLPack","TVMBackendAllocWorkspace","TVMBackendFreeWorkspace","TVMBackendGetFuncFromEnv","TVMBackendPackedCFunc","TVMBackendParallelBarrier","TVMBackendParallelLaunch","TVMBackendRegisterEnvCAPI","TVMBackendRegisterSystemLibSymbol","TVMBackendRunOnce","TVMByteArray","TVMByteArrayFree","TVMCFuncSetReturn","TVMCbArgToReturn","TVMDLManagedTensorCallDeleter","TVMDeviceAllocDataSpace","TVMDeviceAllocDataSpaceWithScope","TVMDeviceCopyDataFromTo","TVMDeviceExtType","TVMDeviceExtType_TVMDeviceExtType_End","TVMDeviceExtType_kDLAOCL","TVMDeviceExtType_kDLMicroDev","TVMDeviceExtType_kDLSDAccel","TVMDeviceExtType_kOpenGL","TVMDeviceFreeDataSpace","TVMExtensionFuncDeclarer","TVMFuncCall","TVMFuncCreateFromCFunc","TVMFuncFree","TVMFuncGetGlobal","TVMFuncListGlobalNames","TVMFuncRegisterGlobal","TVMFuncRemoveGlobal","TVMFunctionHandle","TVMGetLastError","TVMModFree","TVMModGetFunction","TVMModImport","TVMModLoadFromFile","TVMModuleHandle","TVMObjectDerivedFrom","TVMObjectFree","TVMObjectGetTypeIndex","TVMObjectHandle","TVMObjectRetain","TVMObjectTypeIndex2Key","TVMObjectTypeKey2Index","TVMPackedCFunc","TVMPackedCFuncFinalizer","TVMParallelGroupEnv","TVMRetValueHandle","TVMSetStream","TVMStreamCreate","TVMStreamFree","TVMStreamHandle","TVMStreamStreamSynchronize","TVMSynchronize","TVMValue","TVM_VERSION","UINT16_MAX","UINT32_MAX","UINT8_MAX","UINTPTR_MAX","UINT_FAST16_MAX","UINT_FAST32_MAX","UINT_FAST8_MAX","UINT_LEAST16_MAX","UINT_LEAST32_MAX","UINT_LEAST8_MAX","WINT_MAX","WINT_MIN","_ATFILE_SOURCE","_BITS_STDINT_INTN_H","_BITS_STDINT_UINTN_H","_BITS_TIME64_H","_BITS_TYPESIZES_H","_BITS_TYPES_H","_BITS_WCHAR_H","_DEFAULT_SOURCE","_FEATURES_H","_POSIX_C_SOURCE","_POSIX_SOURCE","_STDC_PREDEF_H","_STDINT_H","_SYS_CDEFS_H","__FD_SETSIZE","__GLIBC_MINOR__","__GLIBC_USE_DEPRECATED_GETS","__GLIBC_USE_DEPRECATED_SCANF","__GLIBC_USE_IEC_60559_BFP_EXT","__GLIBC_USE_IEC_60559_BFP_EXT_C2X","__GLIBC_USE_IEC_60559_EXT","__GLIBC_USE_IEC_60559_FUNCS_EXT","__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X","__GLIBC_USE_IEC_60559_TYPES_EXT","__GLIBC_USE_ISOC2X","__GLIBC_USE_LIB_EXT2","__GLIBC__","__GNU_LIBRARY__","__HAVE_GENERIC_SELECTION","__INO_T_MATCHES_INO64_T","__KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64","__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI","__OFF_T_MATCHES_OFF64_T","__RLIM_T_MATCHES_RLIM64_T","__STATFS_MATCHES_STATFS64","__STDC_IEC_559_COMPLEX__","__STDC_IEC_559__","__STDC_IEC_60559_BFP__","__STDC_IEC_60559_COMPLEX__","__STDC_ISO_10646__","__SYSCALL_WORDSIZE","__TIMESIZE","__USE_ATFILE","__USE_FORTIFY_LEVEL","__USE_ISOC11","__USE_ISOC95","__USE_ISOC99","__USE_MISC","__USE_POSIX","__USE_POSIX199309","__USE_POSIX199506","__USE_POSIX2","__USE_POSIX_IMPLICITLY","__USE_XOPEN2K","__USE_XOPEN2K8","__WORDSIZE","__WORDSIZE_TIME64_COMPAT32","__blkcnt64_t","__blkcnt_t","__blksize_t","__caddr_t","__clock_t","__clockid_t","__daddr_t","__dev_t","__fsblkcnt64_t","__fsblkcnt_t","__fsfilcnt64_t","__fsfilcnt_t","__fsid_t","__fsword_t","__gid_t","__glibc_c99_flexarr_available","__id_t","__ino64_t","__ino_t","__int16_t","__int32_t","__int64_t","__int8_t","__int_least16_t","__int_least32_t","__int_least64_t","__int_least8_t","__intmax_t","__intptr_t","__key_t","__loff_t","__mode_t","__nlink_t","__off64_t","__off_t","__pid_t","__quad_t","__rlim64_t","__rlim_t","__sig_atomic_t","__socklen_t","__ssize_t","__suseconds64_t","__suseconds_t","__syscall_slong_t","__syscall_ulong_t","__time_t","__timer_t","__u_char","__u_int","__u_long","__u_quad_t","__u_short","__uid_t","__uint16_t","__uint32_t","__uint64_t","__uint8_t","__uint_least16_t","__uint_least32_t","__uint_least64_t","__uint_least8_t","__uintmax_t","__useconds_t","__val","bits","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_offset","cl","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","code","cpu","cuda","data","data","default","default","default","default","default","default","deleter","device","device_id","device_type","dl_tensor","dtype","eq","eq","eq","eq","eq","eq","ext_dev","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_str","int_fast16_t","int_fast32_t","int_fast64_t","int_fast8_t","int_least16_t","int_least32_t","int_least64_t","int_least8_t","intmax_t","into","into","into","into","into","into","lanes","llvm","manager_ctx","metal","ndim","num_task","nvptx","rocm","shape","size","size_t","stackvm","strides","sync_handle","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","tvm_index_t","type_id","type_id","type_id","type_id","type_id","type_id","uint_fast16_t","uint_fast32_t","uint_fast64_t","uint_fast8_t","uint_least16_t","uint_least32_t","uint_least64_t","uint_least8_t","uintmax_t","v_device","v_float64","v_handle","v_int64","v_str","v_type","vpi","wchar_t","ArgValue","ArrayHandle","ArrayHandle","Bytes","Bytes","DataType","DataType","Device","Device","Float","Float","FuncHandle","FuncHandle","Handle","Handle","Int","Int","ModuleHandle","ModuleHandle","NDArrayHandle","NDArrayHandle","Null","Null","ObjectHandle","ObjectHandle","PackedFunc","RetValue","Str","Str","String","String","TVMValue","UInt","UInt","call_packed","try_downcast","v_device","v_float64","v_handle","v_int64","v_str","v_type"],"q":["tvm_graph_rt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm_graph_rt::errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm_graph_rt::ffitvm_graph_rt::packed_func","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A borrowed TVMPODValue. Can be constructed using <code>into()</code> …","","","","","\\\\brief Plain C Tensor object, does not manage memory.","","","","","","","","","A module backed by a Dynamic Shared Object (dylib).","","","","","","","A TVM computation graph.","A executor for a TVM computation graph.","","","","","","","","","","","","","","","A <code>Storage</code> which owns its contained bytes.","","An owned TVMPODValue. Can be converted from a variety of …","A <code>Storage</code> is a container which holds <code>Tensor</code> data.","","","","","","","","","","","","\\\\brief Union type of values being passed through API and …","A n-dimensional array type which can be converted to/from …","","","","A view of an existing <code>Storage</code>.","","","","","","Returns a mutable view of the stored data.","","Returns a view of the stored data.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\brief The offset in bytes to the beginning pointer to data","Calls a packed function and returns a <code>RetValue</code>.","","","","","","","","","","Returns a clone of this <code>Tensor</code>.","","\\\\brief The data pointer points to the allocated data. This …","","","","","","","","","\\\\brief The device of the tensor","","\\\\brief The data type of the pointer","","","","","","The low-level C runtime FFI API for TVM.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","Returns the graph input with name <code>name</code>, if it exists.","Returns the index for graph input with name <code>name</code>, if it …","Returns the graph output with index <code>index</code>, if it exists.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> iff this <code>Tensor</code> is represented by a …","","Loads a param dict saved using <code>runtime.save_param_dict</code>.","","","\\\\brief Number of dimensions","","","","","","","","","","","Runs the computation graph.","","","","","","\\\\brief The shape of the tensor","","\\\\brief strides of the tensor (in number of elements, not …","Returns an owned version of this storage via cloning.","Returns an owned version of this <code>Tensor</code> via cloning.","","","","","","","","","Returns the data of this <code>Tensor</code> as a <code>Vec</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Storage::View</code> which points to an owned …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","\\\\brief The data type the tensor can hold. The data type is …","\\\\brief The type code options DLDataType.","\\\\brief bfloat16","\\\\brief complex number (C/C++/Python layout: compact struct …","\\\\brief IEEE floating point","\\\\brief signed integer","\\\\brief Opaque handle type, reserved for testing purposes. …","\\\\brief unsigned integer","\\\\brief A Device for Tensor and operator.","","\\\\brief CPU device","\\\\brief CUDA GPU device","\\\\brief Pinned CUDA CPU memory by cudaMallocHost","\\\\brief CUDA managed/unified memory allocated by …","\\\\brief Reserved extension device type, used for quickly …","\\\\brief Qualcomm Hexagon DSP","\\\\brief Metal for Apple GPU.","\\\\brief Unified shared memory allocated on a oneAPI …","\\\\brief OpenCL devices.","\\\\brief ROCm GPUs for AMD GPUs","\\\\brief Pinned ROCm CPU memory allocated by hipMallocHost","\\\\brief Verilog simulator buffer","\\\\brief Vulkan buffer for next generation graphics.","\\\\brief GPU support for next generation WebGPU standard.","\\\\brief C Tensor object, manage memory of DLTensor. This …","","","\\\\brief Plain C Tensor object, does not manage memory.","\\\\brief The callback function to execute a parallel lambda …","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\brief Used for implementing C API function. Set last …","\\\\brief The type code in used and only used in TVM FFI for …","","","","","","","","","","","","","","","","","","","","\\\\brief Allocate a nd-array’s memory, including space of …","\\\\brief Copy array data from CPU byte array. \\\\param handle …","\\\\brief Copy the array, both from and to must be valid …","\\\\brief Copy array data to CPU byte array. \\\\param handle …","\\\\brief Free the TVM Array. \\\\param handle The array handle …","\\\\brief Produce an array from the DLManagedTensor that …","\\\\brief the array handle","\\\\brief Produce a DLMangedTensor from the array that shares …","\\\\brief Backend function to allocate temporal workspace.","\\\\brief Backend function to free temporal workspace.","\\\\brief Backend function for modules to get function from …","\\\\brief Signature for backend functions exported as DLL.","\\\\brief BSP barrrier between parallel threads \\\\param …","\\\\brief Backend function for running parallel jobs.","\\\\brief Backend function to register execution …","\\\\brief Backend function to register system-wide library …","\\\\brief Simple static initialization function. Run f once …","\\\\brief Byte array type used to pass in byte array When …","\\\\brief Free a TVMByteArray returned from TVMFuncCall, and …","\\\\brief Set the return value of TVMPackedCFunc.","\\\\brief Inplace translate callback argument value to return …","\\\\brief Delete (free) a DLManagedTensor’s data. \\\\param …","\\\\brief Allocate a data space on device. \\\\param dev The …","\\\\brief Allocate a data space on device with special memory …","\\\\brief Copy data from one place to another. \\\\note This API …","","","","","","","\\\\brief Free a data space on device. \\\\param dev The device …","\\\\brief Signature for extension function declarer.","\\\\brief Call a Packed TVM Function.","\\\\brief Wrap a TVMPackedCFunc to become a FunctionHandle.","\\\\brief Free the function when it is no longer needed. …","\\\\brief Get a global function.","\\\\brief List all the globally registered function name …","\\\\brief Register the function to runtime’s global table.","\\\\brief Remove a global function. \\\\param name The name of …","\\\\brief Handle to packed function handle.","\\\\brief return str message of the last error all function …","\\\\brief Free the Module \\\\param mod The module to be freed.","\\\\brief Get function from the module. \\\\param mod The module …","\\\\brief Add dep to mod’s dependency. This allows …","\\\\brief Load module from file. \\\\param file_name The file …","\\\\brief Handle to TVM runtime modules.","\\\\brief Check that an object is derived from another. …","\\\\brief Free the object.","\\\\brief Get the type_index from an object.","\\\\brief Handle to Object.","\\\\brief Increase the reference count of an object.","\\\\brief Convert type index to type key. \\\\param tindex The …","\\\\brief Convert type key to type index. \\\\param type_key The …","\\\\brief C type of packed function.","\\\\brief C callback to free the resource handle in C packed …","\\\\brief Environment for TVM parallel task.","\\\\brief Handle to hold return value.","\\\\brief Set the runtime stream of current thread to be …","\\\\brief Create a new runtime stream.","\\\\brief Free a created stream handle.","\\\\brief The stream that is specific to device can be NULL, …","\\\\brief Synchronize two streams of execution.","\\\\brief Wait until all computations on stream completes.","\\\\brief Union type of values being passed through API and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\brief Number of bits, common choices are 8, 16, 32.","","","","","","","","","","","","","\\\\brief The offset in bytes to the beginning pointer to data","","","","","","","","","","","","","","\\\\brief Type code of base types. We keep it uint8_t instead …","","","\\\\brief The data pointer points to the allocated data. This …","","","","","","","","\\\\brief Destructor signature void (<em>)(void</em>) - this should be …","\\\\brief The device of the tensor","\\\\brief The device index. For vanilla CPU memory, pinned …","\\\\brief The device type used in the device.","\\\\brief DLTensor which is being memory managed","\\\\brief The data type of the pointer","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","\\\\brief Number of lanes in the type, used for vector types.","","\\\\brief the context of the original host framework of …","","\\\\brief Number of dimensions","\\\\brief total amount of task","","","\\\\brief The shape of the tensor","","","","\\\\brief strides of the tensor (in number of elements, not …","\\\\brief Auxiliary used for synchronization","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\brief type of array index.","","","","","","","","","","","","","","","","","","","","","","","","A borrowed TVMPODValue. Can be constructed using <code>into()</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","An owned TVMPODValue. Can be converted from a variety of …","","","","","\\\\brief Union type of values being passed through API and …","","","Calls a packed function and returns a <code>RetValue</code>.","","","","","","",""],"i":[0,14,15,14,15,0,0,0,0,0,14,15,14,15,0,0,14,15,0,14,15,0,0,14,15,14,15,0,14,15,14,15,0,14,15,14,15,8,0,0,0,14,15,14,15,0,0,0,0,0,0,0,0,0,14,15,0,8,25,8,17,9,8,8,8,8,17,20,52,21,16,8,9,17,19,11,13,20,25,26,14,15,52,21,16,8,9,17,19,11,13,20,25,26,14,15,11,0,11,13,14,15,11,13,14,15,20,9,9,11,9,16,11,13,15,17,19,20,11,21,11,8,9,11,0,25,0,17,19,11,20,25,25,26,26,14,15,52,21,16,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,17,19,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,20,25,26,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,14,15,73,21,16,52,52,52,26,17,19,0,19,20,52,21,16,8,9,17,19,11,13,20,25,26,14,15,9,8,0,52,20,11,52,21,8,17,17,20,0,25,26,0,52,17,19,20,52,9,11,8,11,8,9,11,13,14,15,25,26,14,15,9,52,21,16,8,9,17,17,17,19,11,13,20,25,26,14,15,15,52,21,16,8,9,17,19,11,13,20,25,26,14,15,52,21,16,8,9,17,19,11,13,20,25,26,14,15,13,13,13,13,13,13,19,8,0,0,0,69,54,54,0,54,54,54,54,69,54,54,67,68,69,54,67,68,69,54,54,67,67,68,68,69,69,54,67,68,69,54,67,68,69,54,67,68,69,54,54,67,68,69,54,67,68,69,54,67,68,69,54,67,68,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,37,72,38,37,71,44,6,72,38,37,71,44,6,11,38,72,38,37,71,44,6,72,38,37,71,44,6,37,38,38,11,44,72,38,37,71,44,6,71,11,38,38,71,11,72,38,37,71,44,6,38,72,38,37,71,44,6,72,38,38,38,38,37,37,37,37,71,44,6,38,0,0,0,0,0,0,0,0,0,72,38,37,71,44,6,37,38,71,38,11,6,38,38,11,44,0,38,11,6,72,38,37,71,44,6,72,38,38,38,38,37,37,37,37,71,44,44,6,72,38,37,71,44,6,0,72,38,37,71,44,6,0,0,0,0,0,0,0,0,0,13,13,13,13,13,13,38,0,0,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,0,0,14,15,14,15,0,14,15,0,0,13,13,13,13,13,13],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[2,2,3,2,2],4],[[2,2,4],2],[[5,6]],[[4,5],2],[[],7],0,0,0,0,0,0,0,[8,5],0,[[9,10],11],[8,12],[8],[8,12],[8],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[11,11],[13,13],[14,14],[15,15],[[]],[[]],[[]],[[]],0,[[9,9]],[9,8],0,[9,8],[[],16],[[],11],[[],13],[[],15],[[],[[18,[17]]]],[[],[[18,[19]]]],[[],[[18,[20]]]],0,[21],0,[[8,8],10],[[9,9],10],[[11,11],10],0,0,0,[[17,22],23],[[19,22],23],[[11,22],[[18,[24]]]],[[20,22],23],[[25,22],[[18,[24]]]],[[25,22],[[18,[24]]]],[[26,22],[[18,[24]]]],[[26,22],[[18,[24]]]],[[14,22],[[18,[24]]]],[[15,22],[[18,[24]]]],[[]],[[]],[[]],[[],8],[[]],[[]],[27,9],[27,9],[[[27,[3,28]]],9],[[[27,[29,28]]],9],[27,9],[11,9],[27,9],[27,9],[27,9],[[[27,[30,28]]],9],[[[27,[31,28]]],9],[[[27,[32,28]]],9],[[[27,[33,28]]],9],[[]],[[]],[34,11],[34,11],[9,11],[[]],[9,11],[34,11],[34,11],[34,11],[34,11],[29,13],[35,13],[36,13],[32,13],[37,13],[5,13],[[]],[1,13],[3,13],[12,13],[30,13],[33,13],[38,13],[31,13],[39,13],[[]],[[]],[[]],[10,14],[35,14],[[],14],[40,14],[32,14],[1,14],[39,14],[33,14],[1,14],[38,14],[5,14],[41,14],[30,14],[38,14],[42,14],[43,14],[11,14],[36,14],[12,14],[37,14],[12,14],[36,14],[40,14],[44,14],[11,14],[45,14],[39,14],[29,14],[33,14],[30,14],[46,14],[[],14],[29,14],[31,14],[3,14],[47,14],[[]],[32,14],[31,14],[35,14],[5,14],[37,14],[3,14],[35,15],[32,15],[36,15],[37,15],[3,15],[38,15],[31,15],[33,15],[1,15],[[],15],[40,15],[44,15],[48,15],[10,15],[39,15],[[]],[5,15],[12,15],[29,15],[30,15],[42,15],[[13,30],14],[[13,30],15],[[[49,[43]]],[[51,[50]]]],[[21,[49,[43]]],[[51,[50]]]],[[16,[49,[43]]],[[51,[50]]]],[[52,[49,[43]]],[[51,[9]]]],[[52,[49,[43]]],[[51,[5]]]],[[52,5],[[51,[9]]]],[42,26],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,10],[8,10],[[],[[18,[[53,[42,9]],54]]]],[[52,[53,[42,9]]]],0,0,[17,[[18,[52,[56,[55]]]]]],[[[49,[57]]],[[18,[[58,[[56,[21]]]],59]]]],[[5,[51,[5]]],[[18,[8,60]]]],0,0,0,0,[61],[61],[62,[[51,[63]]]],[52],[17,18],[19,18],[20,18],[[52,[49,[43]],9]],[9,[[62,[33]]]],0,[8,5],0,[8,8],[9,9],[[]],[[]],[[]],[[]],[[],42],[[],42],[14],[15],[9,[[62,[[0,[64,65]]]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[42,[[18,[17,54]]]],[43,[[18,[17]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[18,[[18,[15]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],0,0,0,0,0,0,0,[8,8],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[54,22],23],[[54,22],23],[[67,22],23],[[67,22],23],[[68,22],23],[[68,22],23],[[69,22],23],[[69,22],23],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[61],[61],[61],[61],[54,[[51,[55]]]],[[],42],[[],42],[[],42],[[],42],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],66],[[],66],[[],66],[[],66],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[33,31,31,31,31,31,31,11],31],[[11,70,3],31],[[11,11,70],31],[[11,70,3],31],[11,31],[[71,11],31],0,[[11,71],31],[[31,31,3,31,31],70],[[31,31,70],31],[[70,1,70],31],0,[[31,6],31],[[51,70,31],31],[[1,70],31],[[1,70],31],[[70,51,70,31],31],0,[44,31],[[70,13,31,31],31],[[13,31],31],[71],[[38,3,3,37,70],31],[[38,31,33,37,1,70],31],[[11,11,70],31],0,0,0,0,0,0,[[38,70],31],0,[[70,13,31,31,13,31],31],[[51,70,51,70],31],[70,31],[[1,70],31],[[31,1],31],[[1,70,31],31],[1,31],0,[[],1],[70,31],[[70,1,31,70],31],[[70,70],31],[[1,1,70],31],0,[[30,30,31],31],[70,31],[[70,30],31],0,[70,31],[[30,1],31],[[1,30],31],0,0,0,0,[[31,31,70],31],[[31,31,70],31],[[31,31,70],31],0,[[31,31,70,70],31],[[31,31,70],31],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[5,38],[72,72],[38,38],[37,37],[71,71],[44,44],[6,6],[[]],[[]],[[]],[[]],[[]],[[]],0,[5,38],[5,38],0,0,[[],72],[[],38],[[],37],[[],71],[[],44],[[],6],0,0,0,0,0,0,[[72,72],10],[[38,38],10],[[37,37],10],[[71,71],10],[[44,44],10],[[6,6],10],[5,38],[[72,22],[[18,[24]]]],[[38,22],[[18,[24]]]],[[37,22],[[18,[24]]]],[[71,22],[[18,[24]]]],[[44,22],[[18,[24]]]],[[6,22],[[18,[24]]]],[[]],[13,38],[40,38],[40,38],[[]],[13,37],[48,37],[48,37],[[]],[[]],[[]],[[]],[43,[[18,[38]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[5,38],0,[5,38],0,0,[5,38],[5,38],0,0,0,[5,38],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],18],[14,[[18,[38]]]],[[],18],[15,[[18,[38]]]],[14,[[18,[38]]]],[15,[[18,[37]]]],[14,[[18,[37]]]],[[],18],[14,[[18,[37]]]],[[],18],[15,[[18,[44]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],0,[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,38],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[15,"i8"],[6,"c_int"],[15,"u64"],[6,"c_void"],[15,"usize"],[3,"TVMParallelGroupEnv"],[6,"c_char"],[4,"Storage"],[3,"Tensor"],[15,"bool"],[3,"DLTensor"],[15,"u8"],[19,"TVMValue"],[4,"ArgValue"],[4,"RetValue"],[3,"SystemLibModule"],[3,"Graph"],[4,"Result"],[3,"Entry"],[3,"Node"],[3,"DsoModule"],[3,"Formatter"],[6,"Result"],[3,"Error"],[3,"ValueDowncastError"],[3,"FuncCallError"],[6,"Array"],[8,"Dimension"],[15,"f64"],[15,"u32"],[15,"i32"],[15,"f32"],[15,"i64"],[3,"ArrayBase"],[15,"isize"],[15,"i16"],[3,"DLDataType"],[3,"DLDevice"],[15,"u16"],[3,"Device"],[4,"DeviceType"],[3,"String"],[15,"str"],[3,"TVMByteArray"],[4,"ByteArray"],[3,"CStr"],[3,"CString"],[3,"DataType"],[8,"AsRef"],[8,"PackedFunc"],[4,"Option"],[3,"GraphExecutor"],[3,"HashMap"],[4,"GraphFormatError"],[8,"Error"],[3,"Box"],[3,"OsStr"],[3,"Pin"],[3,"Error"],[3,"LayoutError"],[3,"Demand"],[3,"Vec"],[8,"PartialEq"],[8,"Debug"],[8,"Clone"],[3,"TypeId"],[3,"FunctionNotFound"],[3,"InvalidPointer"],[4,"ArrayError"],[4,"c_void"],[3,"DLManagedTensor"],[3,"__fsid_t"],[8,"Module"]]},\
"tvm_macros":{"doc":"","t":"YOO","n":["Object","external","import_module"],"q":["tvm_macros","",""],"d":["","",""],"i":[0,0,0],"f":[0,0,0],"p":[]},\
"tvm_rt":{"doc":"TVM is a compiler stack for deep learning systems.","t":"ENNENNNNNDNNDNNENNNNNNCNNNNNCNNCNNNNNNNNENNNNNNNNNALLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLAMMLLLLALOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAFALLLLLLLLLLLLLLLLALALALLLALLLALLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLFLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNDENNNNDNNLLMMLLLLLLLLLNNNNNENDNNNNENNNNNNDMLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMENNNNNNNNNNNNDNNQNNNNNNNNNNDGENNNNIINNKLLLLLKLLKALLLLLLLLLKLLFFFKLLLLLLLLLLLLLLLLGDGRRRRRRDGRRRRRRRRRRRRRRDRRDGRRRRRRRRRRRRRRRRRRRRRRRRRFGRRRRRRRRRRRRRRRRRRRFFFFFFGFFFFGFFFFFDFFFFFFFGRRRRRFGFFFFFFFGFFFFFGFFFGFFFGGDGFFFGFFTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRGGGGGGGGGGGGDGGRGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGMLLLLMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLMLLMMLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGGGGGGGGGLLLLLLLLMLMLMMLLMMGLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGLLLLLLLLGGGGGGGGGMMMMMMLGDLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIIDQDDSKLLKLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLKLLLLLLLLLKLLLLLLMLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ArgValue","ArrayHandle","ArrayHandle","ByteArray","Bytes","Bytes","CPU","CUDA","CUDAHost","DataType","DataType","DataType","Device","Device","Device","DeviceType","ExtDev","External","Float","Float","FuncHandle","FuncHandle","Function","Handle","Handle","Int","Int","Metal","Module","ModuleHandle","ModuleHandle","NDArray","NDArrayHandle","NDArrayHandle","Null","Null","ObjectHandle","ObjectHandle","OpenCL","ROCM","RetValue","Rust","Str","Str","String","String","UInt","UInt","VPI","Vulkan","array","as_arg_value","as_arg_value","as_arg_value","bits","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_call","cl","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","code","cpu","cuda","data","default","default","default","device","device_id","device_type","drop","eq","eq","eq","errors","ext_dev","external","float","float32","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_tvm_value","from_tvm_value","function","get_last_error","graph_rt","hash","hash","hash","int","into","into","into","into","into","into","is_empty","is_type","itemsize","lanes","len","llvm","map","metal","module","n","ndarray","new","new","nvptx","object","partial_cmp","rocm","stackvm","string","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_tvm_value","to_tvm_value","to_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","tvm_call","type_id","type_id","type_id","type_id","type_id","type_id","uint","version","vpi","Array","IntoIter","as_arg_value","as_ptr","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","from_iter","from_ptr","from_vec","get","into","into","into_iter","into_iter","into_ptr","len","next","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","CPU","CUDA","CUDAHost","Device","DeviceType","ExtDev","Metal","OpenCL","ROCM","UnsupportedDeviceError","VPI","Vulkan","borrow","borrow_mut","device_id","device_type","fmt","fmt","from","into","provide","to_string","try_from","try_into","type_id","CallFailed","DataTypeMismatch","DiagnosticError","Downcast","EmptyArray","Error","FromCString","FunctionNotFoundError","Infallible","InvalidDatatype","ModuleLoadPath","NDArray","NDArrayError","Null","NullHandle","Panic","Raw","ShapeError","ToCString","TypeMismatchError","actual","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","downcast","expected","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_raw_tvm","into","into","into","into","provide","provide","provide","provide","source","source","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","actual","expected","ArgValue","ArrayHandle","ArrayHandle","Bytes","Bytes","DataType","DataType","Device","Device","Float","Float","FuncHandle","FuncHandle","Function","Handle","Handle","Handle","Int","Int","ModuleHandle","ModuleHandle","NDArrayHandle","NDArrayHandle","Null","Null","ObjectHandle","ObjectHandle","RawArgs","Result","RetValue","Str","Str","String","String","ToFunction","Typed","UInt","UInt","args","as_arg_value","borrow","borrow","borrow_mut","borrow_mut","call","clone","clone_into","drop","ffi","fmt","from","from","get","get_boxed","handle","hash","into","into","into_raw","invoke","null","register","register_override","register_untyped","ret","to_function","to_function","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","tvm_callback","tvm_callback","tvm_finalizer","tvm_finalizer","type_id","type_id","BackendPackedCFunc","DLDataType","DLDataTypeCode","DLDataTypeCode_kDLBfloat","DLDataTypeCode_kDLComplex","DLDataTypeCode_kDLFloat","DLDataTypeCode_kDLInt","DLDataTypeCode_kDLOpaqueHandle","DLDataTypeCode_kDLUInt","DLDevice","DLDeviceType","DLDeviceType_kDLCPU","DLDeviceType_kDLCUDA","DLDeviceType_kDLCUDAHost","DLDeviceType_kDLCUDAManaged","DLDeviceType_kDLExtDev","DLDeviceType_kDLHexagon","DLDeviceType_kDLMetal","DLDeviceType_kDLOneAPI","DLDeviceType_kDLOpenCL","DLDeviceType_kDLROCM","DLDeviceType_kDLROCMHost","DLDeviceType_kDLVPI","DLDeviceType_kDLVulkan","DLDeviceType_kDLWebGPU","DLManagedTensor","DLPACK_ABI_VERSION","DLPACK_VERSION","DLTensor","FTVMParallelLambda","INT16_MAX","INT16_MIN","INT32_MAX","INT32_MIN","INT8_MAX","INT8_MIN","INTPTR_MAX","INTPTR_MIN","INT_FAST16_MAX","INT_FAST16_MIN","INT_FAST32_MAX","INT_FAST32_MIN","INT_FAST8_MAX","INT_FAST8_MIN","INT_LEAST16_MAX","INT_LEAST16_MIN","INT_LEAST32_MAX","INT_LEAST32_MIN","INT_LEAST8_MAX","INT_LEAST8_MIN","PTRDIFF_MAX","PTRDIFF_MIN","SIG_ATOMIC_MAX","SIG_ATOMIC_MIN","SIZE_MAX","TVMAPISetLastError","TVMArgTypeCode","TVMArgTypeCode_kDLDevice","TVMArgTypeCode_kTVMArgFloat","TVMArgTypeCode_kTVMArgInt","TVMArgTypeCode_kTVMBytes","TVMArgTypeCode_kTVMDLTensorHandle","TVMArgTypeCode_kTVMDataType","TVMArgTypeCode_kTVMExtBegin","TVMArgTypeCode_kTVMExtEnd","TVMArgTypeCode_kTVMExtReserveEnd","TVMArgTypeCode_kTVMModuleHandle","TVMArgTypeCode_kTVMNDArrayHandle","TVMArgTypeCode_kTVMNNVMFirst","TVMArgTypeCode_kTVMNNVMLast","TVMArgTypeCode_kTVMNullptr","TVMArgTypeCode_kTVMObjectHandle","TVMArgTypeCode_kTVMObjectRValueRefArg","TVMArgTypeCode_kTVMOpaqueHandle","TVMArgTypeCode_kTVMPackedFuncHandle","TVMArgTypeCode_kTVMStr","TVMArrayAlloc","TVMArrayCopyFromBytes","TVMArrayCopyFromTo","TVMArrayCopyToBytes","TVMArrayFree","TVMArrayFromDLPack","TVMArrayHandle","TVMArrayToDLPack","TVMBackendAllocWorkspace","TVMBackendFreeWorkspace","TVMBackendGetFuncFromEnv","TVMBackendPackedCFunc","TVMBackendParallelBarrier","TVMBackendParallelLaunch","TVMBackendRegisterEnvCAPI","TVMBackendRegisterSystemLibSymbol","TVMBackendRunOnce","TVMByteArray","TVMByteArrayFree","TVMCFuncSetReturn","TVMCbArgToReturn","TVMDLManagedTensorCallDeleter","TVMDeviceAllocDataSpace","TVMDeviceAllocDataSpaceWithScope","TVMDeviceCopyDataFromTo","TVMDeviceExtType","TVMDeviceExtType_TVMDeviceExtType_End","TVMDeviceExtType_kDLAOCL","TVMDeviceExtType_kDLMicroDev","TVMDeviceExtType_kDLSDAccel","TVMDeviceExtType_kOpenGL","TVMDeviceFreeDataSpace","TVMExtensionFuncDeclarer","TVMFuncCall","TVMFuncCreateFromCFunc","TVMFuncFree","TVMFuncGetGlobal","TVMFuncListGlobalNames","TVMFuncRegisterGlobal","TVMFuncRemoveGlobal","TVMFunctionHandle","TVMGetLastError","TVMModFree","TVMModGetFunction","TVMModImport","TVMModLoadFromFile","TVMModuleHandle","TVMObjectDerivedFrom","TVMObjectFree","TVMObjectGetTypeIndex","TVMObjectHandle","TVMObjectRetain","TVMObjectTypeIndex2Key","TVMObjectTypeKey2Index","TVMPackedCFunc","TVMPackedCFuncFinalizer","TVMParallelGroupEnv","TVMRetValueHandle","TVMSetStream","TVMStreamCreate","TVMStreamFree","TVMStreamHandle","TVMStreamStreamSynchronize","TVMSynchronize","TVMValue","TVM_VERSION","UINT16_MAX","UINT32_MAX","UINT8_MAX","UINTPTR_MAX","UINT_FAST16_MAX","UINT_FAST32_MAX","UINT_FAST8_MAX","UINT_LEAST16_MAX","UINT_LEAST32_MAX","UINT_LEAST8_MAX","WINT_MAX","WINT_MIN","_ATFILE_SOURCE","_BITS_STDINT_INTN_H","_BITS_STDINT_UINTN_H","_BITS_TIME64_H","_BITS_TYPESIZES_H","_BITS_TYPES_H","_BITS_WCHAR_H","_DEFAULT_SOURCE","_FEATURES_H","_POSIX_C_SOURCE","_POSIX_SOURCE","_STDC_PREDEF_H","_STDINT_H","_SYS_CDEFS_H","__FD_SETSIZE","__GLIBC_MINOR__","__GLIBC_USE_DEPRECATED_GETS","__GLIBC_USE_DEPRECATED_SCANF","__GLIBC_USE_IEC_60559_BFP_EXT","__GLIBC_USE_IEC_60559_BFP_EXT_C2X","__GLIBC_USE_IEC_60559_EXT","__GLIBC_USE_IEC_60559_FUNCS_EXT","__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X","__GLIBC_USE_IEC_60559_TYPES_EXT","__GLIBC_USE_ISOC2X","__GLIBC_USE_LIB_EXT2","__GLIBC__","__GNU_LIBRARY__","__HAVE_GENERIC_SELECTION","__INO_T_MATCHES_INO64_T","__KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64","__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI","__OFF_T_MATCHES_OFF64_T","__RLIM_T_MATCHES_RLIM64_T","__STATFS_MATCHES_STATFS64","__STDC_IEC_559_COMPLEX__","__STDC_IEC_559__","__STDC_IEC_60559_BFP__","__STDC_IEC_60559_COMPLEX__","__STDC_ISO_10646__","__SYSCALL_WORDSIZE","__TIMESIZE","__USE_ATFILE","__USE_FORTIFY_LEVEL","__USE_ISOC11","__USE_ISOC95","__USE_ISOC99","__USE_MISC","__USE_POSIX","__USE_POSIX199309","__USE_POSIX199506","__USE_POSIX2","__USE_POSIX_IMPLICITLY","__USE_XOPEN2K","__USE_XOPEN2K8","__WORDSIZE","__WORDSIZE_TIME64_COMPAT32","__blkcnt64_t","__blkcnt_t","__blksize_t","__caddr_t","__clock_t","__clockid_t","__daddr_t","__dev_t","__fsblkcnt64_t","__fsblkcnt_t","__fsfilcnt64_t","__fsfilcnt_t","__fsid_t","__fsword_t","__gid_t","__glibc_c99_flexarr_available","__id_t","__ino64_t","__ino_t","__int16_t","__int32_t","__int64_t","__int8_t","__int_least16_t","__int_least32_t","__int_least64_t","__int_least8_t","__intmax_t","__intptr_t","__key_t","__loff_t","__mode_t","__nlink_t","__off64_t","__off_t","__pid_t","__quad_t","__rlim64_t","__rlim_t","__sig_atomic_t","__socklen_t","__ssize_t","__suseconds64_t","__suseconds_t","__syscall_slong_t","__syscall_ulong_t","__time_t","__timer_t","__u_char","__u_int","__u_long","__u_quad_t","__u_short","__uid_t","__uint16_t","__uint32_t","__uint64_t","__uint8_t","__uint_least16_t","__uint_least32_t","__uint_least64_t","__uint_least8_t","__uintmax_t","__useconds_t","__val","as_arg_value","as_arg_value","as_arg_value","as_arg_value","bits","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_offset","cl","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","code","cpu","cuda","data","data","default","default","default","default","default","default","default","default","deleter","device","device_id","device_type","dl_tensor","dtype","eq","eq","eq","eq","eq","eq","eq","ext_dev","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","int_fast16_t","int_fast32_t","int_fast64_t","int_fast8_t","int_least16_t","int_least32_t","int_least64_t","int_least8_t","intmax_t","into","into","into","into","into","into","into","into","lanes","llvm","manager_ctx","metal","ndim","num_task","nvptx","rocm","shape","size","size_t","stackvm","strides","sync_handle","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tvm_index_t","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uint_fast16_t","uint_fast32_t","uint_fast64_t","uint_fast8_t","uint_least16_t","uint_least32_t","uint_least64_t","uint_least8_t","uintmax_t","v_device","v_float64","v_handle","v_int64","v_str","v_type","vpi","wchar_t","GraphRt","borrow","borrow_mut","create_from_parts","from","from_module","get_output","get_output_into","into","load_params","run","set_input","try_from","try_into","type_id","IntoIter","Map","as_arg_value","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","fmt","from","from","from_data","from_iter","get","into","into","into_iter","into_iter","next","null","size_hint","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","Module","ModuleNode","as_arg_value","as_ptr","as_ref","as_ref","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default_fn","deref","enabled","eq","export_library","fmt","fmt","from","from","from","from","from_ptr","get_function","handle","hash","import_module","into","into","into_ptr","load","save_to_file","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","BITS","NDArray","NDArrayContainer","Num32","as_arg_value","as_dltensor","as_mut_ptr","as_ptr","as_ref","as_ref","borrow","borrow","borrow_mut","borrow_mut","byte_offset","clone","clone_into","copy_from_buffer","copy_to_buffer","copy_to_device","copy_to_ndarray","deref","device","dtype","empty","eq","fill_from_iter","fmt","fmt","from","from","from","from","from_ptr","from_rust_ndarray","hash","into","into","into_ptr","is_contiguous","is_empty","is_view","leak","len","ndim","shape","shape_usize","size","strides","strides_usize","to_bytearray","to_owned","to_vec","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","zeroed","AsArgValue","IsObject","IsObjectRef","Object","Object","ObjectPtr","ObjectRef","TYPE_KEY","as_arg_value","as_arg_value","as_arg_value","as_ptr","as_ptr","as_ptr","as_ref","base","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count","count","debug_print","deref","deref","downcast","downcast","drop","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from_arg_value","from_ptr","from_ptr","from_raw","from_ret_value","hash","hash","into","into","into","into_arg_value","into_ptr","into_ptr","into_raw","into_ret_value","leak","new","null","ptr","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","upcast","String","StringObj","as_arg_value","as_bytes","as_ptr","as_ref","as_ref","as_ref","as_str","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","deref","eq","fmt","fmt","fmt","from","from","from","from","from","from","from_ptr","hash","into","into","into_ptr","is_empty","len","partial_cmp","to_owned","to_string","to_string_lossy","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["tvm_rttvm_rt::array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm_rt::device","","","","","","","","","","","","","","","","","","","","","","","","","tvm_rt::errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm_rt::errors::NDArrayError","","tvm_rt::function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm_rt::function::ffitvm_rt::graph_rt","","","","","","","","","","","","","","","tvm_rt::map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm_rt::module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm_rt::ndarray","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm_rt::object","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm_rt::string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A borrowed TVMPODValue. Can be constructed using <code>into()</code> …","","","A newtype wrapping a raw TVM byte-array.","","","","","","","","","","","","Device type represents the set of devices supported by TVM.","","","","","","","","","","","","","","","","","","","","","","","","","An owned TVMPODValue. Can be converted from a variety of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the underlying byte-array","default device is cpu.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","This module provides an idiomatic Rust API for creating …","Gets the last error message.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns whether this <code>DataType</code> represents primitive type <code>T</code>.","Returns the number of bytes occupied by an element of this …","","Gets the length of the underlying byte-array","","","","Provides the <code>Module</code> type and methods for working with …","","This module implements the <code>NDArray</code> type for working with …","","","","","","","","","","","","","","","","","","","Converts the underlying byte-array to <code>Vec&lt;u8&gt;</code>","","","","","","","","","","","","","","","","","","","","","","","","","Outputs the current TVM version.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Device type represents the set of devices supported by TVM.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","A borrowed TVMPODValue. Can be constructed using <code>into()</code> …","","","","","","","","","","","","","An owned thread-safe version of <code>tvm::PackedFunc</code> for …","","","","","","","","","","","","","","","","An owned TVMPODValue. Can be converted from a variety of …","","","","","","","","","","","","","","","","","","","The low-level C runtime FFI API for TVM.","","Returns the argument unchanged.","Returns the argument unchanged.","For a given function, it returns a function by name.","","Returns the underlying TVM function handle.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls the function that created from <code>Builder</code>.","","Registers a Rust function with an arbitrary type signature …","Register a function with explicit control over whether to …","","","","","","","","","","","","","The callback function which is wrapped converted by TVM …","The callback function which is wrapped converted by TVM …","The finalizer which is invoked when the packed function’s","The finalizer which is invoked when the packed function’s","","","","\\\\brief The data type the tensor can hold. The data type is …","\\\\brief The type code options DLDataType.","\\\\brief bfloat16","\\\\brief complex number (C/C++/Python layout: compact struct …","\\\\brief IEEE floating point","\\\\brief signed integer","\\\\brief Opaque handle type, reserved for testing purposes. …","\\\\brief unsigned integer","\\\\brief A Device for Tensor and operator.","","\\\\brief CPU device","\\\\brief CUDA GPU device","\\\\brief Pinned CUDA CPU memory by cudaMallocHost","\\\\brief CUDA managed/unified memory allocated by …","\\\\brief Reserved extension device type, used for quickly …","\\\\brief Qualcomm Hexagon DSP","\\\\brief Metal for Apple GPU.","\\\\brief Unified shared memory allocated on a oneAPI …","\\\\brief OpenCL devices.","\\\\brief ROCm GPUs for AMD GPUs","\\\\brief Pinned ROCm CPU memory allocated by hipMallocHost","\\\\brief Verilog simulator buffer","\\\\brief Vulkan buffer for next generation graphics.","\\\\brief GPU support for next generation WebGPU standard.","\\\\brief C Tensor object, manage memory of DLTensor. This …","","","\\\\brief Plain C Tensor object, does not manage memory.","\\\\brief The callback function to execute a parallel lambda …","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\brief Used for implementing C API function. Set last …","\\\\brief The type code in used and only used in TVM FFI for …","","","","","","","","","","","","","","","","","","","","\\\\brief Allocate a nd-array’s memory, including space of …","\\\\brief Copy array data from CPU byte array. \\\\param handle …","\\\\brief Copy the array, both from and to must be valid …","\\\\brief Copy array data to CPU byte array. \\\\param handle …","\\\\brief Free the TVM Array. \\\\param handle The array handle …","\\\\brief Produce an array from the DLManagedTensor that …","\\\\brief the array handle","\\\\brief Produce a DLMangedTensor from the array that shares …","\\\\brief Backend function to allocate temporal workspace.","\\\\brief Backend function to free temporal workspace.","\\\\brief Backend function for modules to get function from …","\\\\brief Signature for backend functions exported as DLL.","\\\\brief BSP barrrier between parallel threads \\\\param …","\\\\brief Backend function for running parallel jobs.","\\\\brief Backend function to register execution …","\\\\brief Backend function to register system-wide library …","\\\\brief Simple static initialization function. Run f once …","\\\\brief Byte array type used to pass in byte array When …","\\\\brief Free a TVMByteArray returned from TVMFuncCall, and …","\\\\brief Set the return value of TVMPackedCFunc.","\\\\brief Inplace translate callback argument value to return …","\\\\brief Delete (free) a DLManagedTensor’s data. \\\\param …","\\\\brief Allocate a data space on device. \\\\param dev The …","\\\\brief Allocate a data space on device with special memory …","\\\\brief Copy data from one place to another. \\\\note This API …","","","","","","","\\\\brief Free a data space on device. \\\\param dev The device …","\\\\brief Signature for extension function declarer.","\\\\brief Call a Packed TVM Function.","\\\\brief Wrap a TVMPackedCFunc to become a FunctionHandle.","\\\\brief Free the function when it is no longer needed. …","\\\\brief Get a global function.","\\\\brief List all the globally registered function name …","\\\\brief Register the function to runtime’s global table.","\\\\brief Remove a global function. \\\\param name The name of …","\\\\brief Handle to packed function handle.","\\\\brief return str message of the last error all function …","\\\\brief Free the Module \\\\param mod The module to be freed.","\\\\brief Get function from the module. \\\\param mod The module …","\\\\brief Add dep to mod’s dependency. This allows …","\\\\brief Load module from file. \\\\param file_name The file …","\\\\brief Handle to TVM runtime modules.","\\\\brief Check that an object is derived from another. …","\\\\brief Free the object.","\\\\brief Get the type_index from an object.","\\\\brief Handle to Object.","\\\\brief Increase the reference count of an object.","\\\\brief Convert type index to type key. \\\\param tindex The …","\\\\brief Convert type key to type index. \\\\param type_key The …","\\\\brief C type of packed function.","\\\\brief C callback to free the resource handle in C packed …","\\\\brief Environment for TVM parallel task.","\\\\brief Handle to hold return value.","\\\\brief Set the runtime stream of current thread to be …","\\\\brief Create a new runtime stream.","\\\\brief Free a created stream handle.","\\\\brief The stream that is specific to device can be NULL, …","\\\\brief Synchronize two streams of execution.","\\\\brief Wait until all computations on stream completes.","\\\\brief Union type of values being passed through API and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\brief Number of bits, common choices are 8, 16, 32.","","","","","","","","","","","","","","","","","\\\\brief The offset in bytes to the beginning pointer to data","","","","","","","","","","","","","","","","","","\\\\brief Type code of base types. We keep it uint8_t instead …","","","\\\\brief The data pointer points to the allocated data. This …","","","","","","","","","","\\\\brief Destructor signature void (<em>)(void</em>) - this should be …","\\\\brief The device of the tensor","\\\\brief The device index. For vanilla CPU memory, pinned …","\\\\brief The device type used in the device.","\\\\brief DLTensor which is being memory managed","\\\\brief The data type of the pointer","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","\\\\brief Number of lanes in the type, used for vector types.","","\\\\brief the context of the original host framework of …","","\\\\brief Number of dimensions","\\\\brief total amount of task","","","\\\\brief The shape of the tensor","","","","\\\\brief strides of the tensor (in number of elements, not …","\\\\brief Auxiliary used for synchronization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\brief type of array index.","","","","","","","","","","","","","","","","","","","","","","","","","","An instance of the C++ graph executor.","","","Create a graph executor from the deprecated graph, lib, …","Returns the argument unchanged.","Create a graph executor directly from a runtime module.","Extract the ith output from the graph executor and returns …","Extract the ith output from the graph executor and write …","Calls <code>U::from(self)</code>.","Load the parameters of the model into the runtime.","Run the graph module, once setting parameters and inputs.","Set the input with name <code>name</code> with the value of <code>input</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Wrapper around TVM module handle which contains an entry …","","","","","","","","","","","","","Checks if a target device is enabled for a module.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Gets a function by name from a registered module.","Returns the underlying module handle.","","Imports a dependent module such as <code>.ptx</code> for cuda gpu.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Loads a module shared library from path.","","","","","","","","","","","","","See the <code>module-level documentation</code> for more details.","A trait for the supported 32-bits numerical types in …","","","","","","","","","","","","","","Creates an NDArray from a mutable buffer of types i32, u32 …","","Copies the NDArray to a target device.","Copies the NDArray to another target NDArray.","","Returns the device which the NDArray was defined.","Returns the type of the entries of the NDArray.","Allocates and creates an empty NDArray given the shape, …","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Converts a Rust’s ndarray to TVM NDArray.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Shows whether the underlying ndarray is contiguous in …","Returns true if the tensor is empty","","","Returns the total number of entries of the NDArray.","Returns the number of dimensions of the NDArray.","Returns the shape of the NDArray.","Returns the shape of the NDArray as a &amp;usize","Returns the total bytes taken up by the data. This is …","Returns the strides of the underlying NDArray.","Returns the strides of the NDArray as a &amp;usize","Converts the NDArray to <code>ByteArray</code>.","","Flattens the NDArray to a <code>Vec</code> of the same type in cpu.","","","","","","","","","","","An unsafe trait which should be implemented for an object …","","A TVM intrusive smart pointer header, in TVM all FFI …","","A smart pointer for types which implement IsObject. This …","","","","","","","","","","Allocates a base object value for an object subtype of …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,1,6,0,1,6,5,5,5,0,1,6,0,1,6,0,5,8,1,6,1,6,0,1,6,1,6,5,0,1,6,0,1,6,1,6,1,6,5,5,0,8,1,6,1,6,1,6,5,5,0,8,5,4,2,8,2,5,4,1,6,8,2,5,4,1,6,0,4,2,5,4,1,6,2,5,4,1,6,2,2,4,4,8,5,4,6,0,4,4,8,2,5,4,0,4,0,2,2,2,2,5,5,4,4,1,6,8,8,2,2,5,5,5,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,4,1,6,0,0,0,2,5,4,2,8,2,5,4,1,6,8,2,2,2,8,4,0,4,0,5,0,2,4,4,0,2,4,4,0,2,5,4,1,6,2,5,4,1,6,8,8,8,2,2,5,4,4,1,6,6,8,2,5,4,1,6,0,8,2,5,4,1,6,2,0,4,0,0,21,21,52,21,52,21,21,21,21,52,21,21,21,21,21,52,21,52,21,21,21,52,21,52,21,21,21,52,21,52,21,5,5,5,0,0,5,5,5,5,0,5,5,53,53,4,4,53,53,53,53,53,53,53,53,53,55,58,55,55,58,0,55,0,55,58,55,55,0,55,55,55,55,58,55,0,57,56,57,58,55,56,57,58,55,55,57,56,56,57,57,58,58,55,55,56,57,58,58,58,55,55,55,55,55,55,55,56,57,58,55,56,57,58,55,58,55,56,57,58,55,56,57,58,55,56,57,58,55,56,57,58,55,88,88,0,1,6,1,6,1,6,1,6,1,6,1,6,0,1,6,89,1,6,1,6,1,6,1,6,1,6,0,0,0,1,6,1,6,0,0,1,6,90,24,91,24,91,24,89,24,24,89,0,24,91,24,24,24,24,24,91,24,89,24,24,0,0,0,90,89,89,24,91,24,24,24,24,91,24,89,89,89,89,91,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,18,15,22,23,15,76,18,15,22,74,42,23,75,76,18,15,22,74,42,23,75,22,18,76,18,15,22,74,42,23,75,76,18,15,22,74,42,23,75,15,18,18,22,23,76,18,15,22,74,42,23,75,74,22,18,18,74,22,76,18,15,22,74,23,75,18,76,18,15,22,74,23,75,76,18,18,18,18,15,15,15,15,22,22,22,22,22,22,22,74,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,23,75,18,0,0,0,0,0,0,0,0,0,76,18,15,22,74,42,23,75,15,18,74,18,22,75,18,18,22,23,0,18,22,75,76,18,15,22,74,42,23,75,76,18,18,18,18,15,15,15,15,22,74,42,23,23,75,76,18,15,22,74,42,23,75,0,76,18,15,22,74,42,23,75,0,0,0,0,0,0,0,0,0,42,42,42,42,42,42,18,0,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,0,0,20,79,20,79,20,20,20,20,20,79,20,20,20,20,79,20,79,20,79,20,79,20,79,20,20,20,79,20,79,20,0,0,39,39,80,80,39,80,39,80,39,39,39,39,39,39,39,39,80,39,39,39,80,39,39,39,39,39,39,80,39,39,39,39,39,39,39,80,39,80,39,80,92,0,0,0,34,34,82,34,82,82,34,82,34,82,34,34,34,34,34,34,34,34,34,34,34,34,34,34,82,34,34,34,82,34,34,34,34,82,34,34,34,34,82,34,34,34,34,34,34,34,34,34,34,34,34,34,82,34,82,34,82,34,0,0,0,0,41,0,0,40,93,33,32,41,33,32,85,85,33,32,85,33,32,85,33,32,33,32,33,85,0,33,32,33,41,33,33,32,33,32,85,33,32,32,32,85,41,41,32,33,41,33,32,33,32,85,41,41,32,33,41,33,33,41,33,33,32,33,33,33,32,32,32,85,33,32,85,33,32,85,33,41,0,0,38,38,38,38,86,86,38,38,86,38,86,38,38,38,38,38,38,38,86,38,38,38,38,38,86,38,38,38,86,38,38,38,38,38,38,38,38,38,38,86,38,86,38,86],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[2,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[3,4],[2,2],[5,5],[4,4],[1,1],[6,6],[[]],[[]],[[]],[[]],[[]],[[2,2],7],[2,3],[3,4],[3,4],[8],[[],5],[[],4],[[],6],0,0,0,[8],[[2,2],9],[[5,5],9],[[4,4],9],0,[3,4],0,[[10,11],2],[[],2],[[2,12],[[14,[13]]]],[[2,12],[[14,[13]]]],[[5,12],[[14,[13]]]],[[5,12],[[14,[13]]]],[[4,12],[[14,[13]]]],[[4,12],[[14,[13]]]],[[1,12],[[14,[13]]]],[[6,12],[[14,[13]]]],[[]],[[],8],[15,2],[[]],[[]],[16,5],[17,5],[17,4],[18,4],[[]],[19,1],[20,1],[3,1],[[]],[5,1],[17,1],[21,1],[9,1],[10,1],[22,1],[23,1],[4,1],[24,1],[16,1],[25,1],[26,1],[25,1],[27,1],[18,1],[28,1],[29,1],[30,1],[19,1],[31,1],[30,1],[[],1],[4,1],[31,1],[10,1],[18,1],[32,1],[33,1],[15,1],[11,1],[15,1],[34,1],[35,1],[36,1],[3,1],[11,1],[37,1],[37,1],[36,1],[38,1],[39,1],[[],1],[26,1],[16,1],[28,1],[8,1],[22,1],[18,6],[24,6],[[[33,[40]]],6],[15,6],[32,6],[36,6],[[[21,[41]]],6],[30,6],[39,6],[20,6],[2,6],[[],6],[25,6],[31,6],[10,6],[16,6],[38,6],[27,6],[28,6],[19,6],[26,6],[4,6],[23,6],[34,6],[3,6],[9,6],[37,6],[11,6],[[]],[17,[[14,[2]]]],[17,[[14,[4]]]],[[42,16],1],[[42,16],6],0,[[],17],0,[2],[5],[4],[[10,11],2],[[]],[[]],[[]],[[]],[[]],[[]],[8,9],[2,9],[2,3],[2,3],[8,3],[3,4],0,[3,4],0,[26,[[43,[5]]]],0,[[10,10,11],2],[[5,3],4],[3,4],0,[[2,2],[[43,[7]]]],[3,4],[3,4],0,[[]],[[]],[[]],[[]],[[]],[[],27],[[],27],[[],27],[1],[6],[8,[[45,[10,44]]]],[[],14],[6,[[14,[8]]]],[[],14],[6,[[14,[2,46]]]],[[],14],[[],14],[6,[[14,[4,46]]]],[[],14],[14,[[14,[6]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[10,11],2],[[],17],[3,4],0,0,[[],1],[[[21,[41]]],[[43,[33]]]],[[]],[[]],[[]],[[]],[[[21,[[0,[48,41]]]]],[[21,[[0,[48,41]]]]]],[[]],[[[21,[41]],12],49],[[]],[[]],[50,[[21,[41]]]],[[[43,[33]]],[[21,[41]]]],[[[45,[41]]],[[51,[[21,[41]]]]]],[[[21,[41]],31],[[51,[41]]]],[[]],[[]],[[]],[[[21,[41]]]],[[[21,[41]]],[[43,[33]]]],[[[21,[41]]],26],[[[52,[41]]],43],[[]],[[],14],[[],14],[1,[[51,[[21,[41]]]]]],[6,[[51,[[21,[41]]]]]],[[],14],[[],14],[[],47],[[],47],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,0,[[53,12],[[14,[13]]]],[[53,12],[[14,[13]]]],[[]],[[]],[54],[[],27],[[],14],[[],14],[[],47],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[27,17],55],0,[[56,12],49],[[56,12],49],[[57,12],49],[[57,12],49],[[58,12],49],[[58,12],49],[[55,12],49],[[55,12],49],[[]],[[]],[59,58],[60,58],[[]],[61,55],[[]],[62,55],[63,55],[64,55],[58,55],[17,55],[[]],[[]],[[]],[[]],[54],[54],[54],[54],[58,[[43,[65]]]],[55,[[43,[65]]]],[[],27],[[],27],[[],27],[[],27],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],47],[[],47],[[],47],[[],47],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[45,[1]]],[[51,[0]]]],[[],1],[[]],[[]],[[]],[[]],[[[45,[1]]],[[51,[6]]]],[24,24],[[]],[[]],0,[[24,12],49],[[]],[[]],[[[66,[17]]],[[43,[24]]]],[[],[[43,[67]]]],[24,68],[24],[[]],[[]],[[]],[[24,[45,[1]]],[[51,[6]]]],[[],24],[[[69,[27]]],51],[[[69,[27]],9],51],[[[69,[27]],9],51],[[],[[51,[6]]]],[[],24],[[],24],[[]],[[],14],[[],14],[1,[[51,[24]]]],[1,[[51,[24]]]],[6,[[51,[24]]]],[[],14],[[],14],[[42,70,70,71,72],70],[[42,70,70,71,72],70],[72],[72],[[],47],[[],47],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[30],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[26,19,19,19,19,19,19,22],19],[[22,73,36],19],[[22,22,73],19],[[22,73,36],19],[22,19],[[74,22],19],0,[[22,74],19],[[19,19,36,19,19],73],[[19,19,73],19],[[73,30,73],19],0,[[19,75],19],[[43,73,19],19],[[30,73],19],[[30,73],19],[[73,43,73,19],19],0,[23,19],[[73,42,19,19],19],[[42,19],19],[74],[[18,36,36,15,73],19],[[18,19,26,15,30,73],19],[[22,22,73],19],0,0,0,0,0,0,[[18,73],19],0,[[73,42,19,19,42,19],19],[[43,73,43,73],19],[73,19],[[30,73],19],[[19,30],19],[[30,73,19],19],[30,19],0,[[],30],[73,19],[[73,30,19,73],19],[[73,73],19],[[30,30,73],19],0,[[16,16,19],19],[73,19],[[73,16],19],0,[73,19],[[16,30],19],[[30,16],19],0,0,0,0,[[19,19,73],19],[[19,19,73],19],[[19,19,73],19],0,[[19,19,73,73],19],[[19,19,73],19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[3,18],[76,76],[18,18],[15,15],[22,22],[74,74],[42,42],[23,23],[75,75],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[3,18],[3,18],0,0,[[],76],[[],18],[[],15],[[],22],[[],74],[[],42],[[],23],[[],75],0,0,0,0,0,0,[[76,76],9],[[18,18],9],[[15,15],9],[[22,22],9],[[74,74],9],[[23,23],9],[[75,75],9],[3,18],[[76,12],[[14,[13]]]],[[18,12],[[14,[13]]]],[[15,12],[[14,[13]]]],[[22,12],[[14,[13]]]],[[74,12],[[14,[13]]]],[[23,12],[[14,[13]]]],[[75,12],[[14,[13]]]],[[]],[4,18],[[]],[42,18],[4,18],[2,15],[[]],[2,15],[42,15],[77,22],[77,22],[[]],[77,22],[77,22],[77,22],[77,22],[[]],[36,42],[18,42],[19,42],[31,42],[30,42],[16,42],[37,42],[28,42],[25,42],[[]],[11,42],[3,42],[10,42],[26,42],[15,42],[[]],[[]],[17,[[14,[18]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[3,18],0,[3,18],0,0,[3,18],[3,18],0,0,0,[3,18],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],14],[6,[[14,[18]]]],[[],14],[1,[[14,[18]]]],[1,[[14,[18]]]],[1,[[14,[15]]]],[6,[[14,[15]]]],[[],14],[1,[[14,[15]]]],[[],14],[[],14],[[],14],[[],14],[6,[[14,[23]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[3,18],0,0,[[]],[[]],[[17,39,4],[[51,[78]]]],[[]],[[39,4],[[51,[78]]]],[[78,26],[[51,[34]]]],[[78,26,34],51],[[]],[78,51],[78,51],[[78,17,34],51],[[],14],[[],14],[[],47],0,0,[[],1],[[]],[[]],[[]],[[]],[20,20],[[]],[[],20],[[20,12],49],[[]],[[]],[[[45,[1]]],[[51,[20]]]],[50,20],[20,51],[[]],[[]],[[]],[20,79],[79,43],[[],20],[79],[[]],[[],14],[[],14],[6,[[51,[20]]]],[1,[[51,[20]]]],[[],14],[[],14],[[],47],[[],47],0,0,[[],1],[39,[[43,[33]]]],[80,80],[80],[[]],[[]],[[]],[[]],[39,39],[[]],[39,[[14,[24,55]]]],[39],[[39,17],9],[[39,39],9],[[39,27],[[14,[55]]]],[[39,12],49],[[80,12],49],[[[33,[80]]],39],[80,39],[[]],[[]],[[[43,[33]]],39],[[39,17,9],[[14,[24,55]]]],[39,81],[39],[[39,39]],[[]],[[]],[39,[[43,[33]]]],[[],[[14,[39,55]]]],[[39,27,27],[[14,[55]]]],[[]],[1,[[51,[39]]]],[[],14],[6,[[51,[39]]]],[[],14],[[],14],[[],14],[[],47],[[],47],0,0,0,0,[[],1],[34,22],[33,82],[34,[[43,[33]]]],[82],[82,82],[[]],[[]],[[]],[[]],[34,31],[34,34],[[]],[34],[34],[[34,4],[[14,[34,58]]]],[[34,34],[[14,[34,58]]]],[34],[34,4],[34,2],[[4,2],34],[[34,34],9],[34],[[34,12],49],[[82,12],49],[[[33,[82]]],34],[[]],[82,34],[[]],[[[43,[33]]],34],[[83,4,2],[[14,[34,58]]]],[34],[[]],[[]],[34,[[43,[33]]]],[34,9],[34,9],[34,9],[[[33,[82]]],82],[34,3],[34,3],[34],[34,84],[34,3],[34,43],[34,[[43,[84]]]],[34,[[14,[8,58]]]],[[]],[34,[[14,[45,58]]]],[1,[[51,[34]]]],[[],14],[6,[[51,[34]]]],[[],14],[[],14],[[],14],[[],47],[[],47],[34,34],0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],[[43,[33]]]],[[[33,[40]]]],[32,[[43,[33]]]],[85,85],[[],85],[[]],[[]],[[]],[[]],[[]],[[]],[[[33,[40]]],[[33,[40]]]],[32,32],[[]],[[]],[[[33,[40]]],19],[85,19],[32,[[51,[29]]]],[[[33,[40]]]],[32],[[[33,[40]]],[[14,[33,55]]]],[[],[[14,[55]]]],[[[33,[40]]]],[[[33,[40]],[33,[40]]],9],[[32,32],9],[[[33,[40]],12],49],[[32,12],49],[[85,12],49],[[]],[[[33,[85]]],32],[[]],[85,32],[[]],[1,[[14,[55]]]],[[[43,[33]]]],[[[43,[33]]],32],[85,[[43,[[33,[85]]]]]],[6,[[14,[55]]]],[[[33,[40]]]],[32],[[]],[[]],[[]],[[],1],[[],[[43,[33]]]],[32,[[43,[33]]]],[[[33,[40]]]],[[],6],[[[33,[40]]]],[40,[[33,[40]]]],[[]],0,[[]],[[]],[[],14],[6,[[14,[[33,[40]]]]]],[1,[[14,[[33,[40]]]]]],[6,[[51,[32]]]],[1,[[51,[32]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],47],[[],47],[[],47],[[[33,[40]]],33],[[]],0,0,[[],1],[38],[38,[[43,[33]]]],[38],[86,86],[86],[38,[[14,[17,87]]]],[[]],[[]],[[]],[[]],[38,38],[[]],[[38,38],7],[38],[38,9],[[38,12],49],[[38,12],49],[[86,12],49],[27,38],[[[33,[86]]],38],[86,38],[17,38],[[]],[[]],[[[43,[33]]],38],[38],[[]],[[]],[38,[[43,[33]]]],[38,9],[38,3],[38,[[43,[7]]]],[[]],[[],27],[38,[[84,[17]]]],[1,[[51,[38]]]],[6,[[51,[38]]]],[[],14],[[],14],[[],14],[[],14],[[],47],[[],47]],"p":[[4,"ArgValue"],[3,"DataType"],[15,"usize"],[3,"Device"],[4,"DeviceType"],[4,"RetValue"],[4,"Ordering"],[4,"ByteArray"],[15,"bool"],[15,"u8"],[15,"u16"],[3,"Formatter"],[3,"Error"],[4,"Result"],[3,"DLDataType"],[15,"u32"],[15,"str"],[3,"DLDevice"],[15,"i32"],[3,"Map"],[3,"Array"],[3,"DLTensor"],[3,"TVMByteArray"],[3,"Function"],[15,"i16"],[15,"i64"],[3,"String"],[15,"f64"],[3,"CString"],[15,"i8"],[15,"isize"],[3,"ObjectRef"],[3,"ObjectPtr"],[3,"NDArray"],[3,"CStr"],[15,"u64"],[15,"f32"],[3,"String"],[3,"Module"],[8,"IsObject"],[8,"IsObjectRef"],[19,"TVMValue"],[4,"Option"],[3,"Global"],[3,"Vec"],[3,"Error"],[3,"TypeId"],[8,"Clone"],[6,"Result"],[8,"IntoIterator"],[6,"Result"],[3,"IntoIter"],[3,"UnsupportedDeviceError"],[3,"Demand"],[4,"Error"],[3,"FunctionNotFoundError"],[3,"TypeMismatchError"],[4,"NDArrayError"],[3,"ShapeError"],[4,"ParseDataTypeError"],[3,"ValueDowncastError"],[3,"NulError"],[4,"Infallible"],[3,"IntoStringError"],[8,"Error"],[8,"AsRef"],[3,"Box"],[6,"TVMFunctionHandle"],[8,"Into"],[6,"c_int"],[6,"TVMRetValueHandle"],[6,"c_void"],[4,"c_void"],[3,"DLManagedTensor"],[3,"TVMParallelGroupEnv"],[3,"__fsid_t"],[3,"ArrayBase"],[3,"GraphRt"],[3,"IntoIter"],[3,"ModuleNode"],[6,"TVMModuleHandle"],[3,"NDArrayContainer"],[6,"ArrayD"],[4,"Cow"],[3,"Object"],[3,"StringObj"],[3,"Utf8Error"],[13,"DataTypeMismatch"],[8,"ToFunction"],[8,"Typed"],[3,"RawArgs"],[8,"Num32"],[8,"AsArgValue"]]},\
"tvm_sys":{"doc":"This crate contains the minimal interface over TVM’s C …","t":"CCCCCCAAOAAAAAOAENNLLLLLLLLLLLLLLDNNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNDENNNNDNNLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDMLLLLMLLLLLLLLLLLLLLLLLLLGDGRRRRRRDGRRRRRRRRRRRRRRDRRDGRRRRRRRRRRRRRRRRRRRRRRRRRFGRRRRRRRRRRRRRRRRRRRFFFFFFGFFFFGFFFFFDFFFFFFFGRRRRRFGFFFFFFFGFFFFFGFFFGFFFGGDGFFFGFFTRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRGGGGGGGGGGGGDGGRGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGMMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLMLLMMLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGGGGGGGGGLLLLLLLLMLMLMMLLMMGLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGLLLLLLLLGGGGGGGGGMMMMMMLGENNNNNNNNNNNNNNNNNNNNNNNNIENNNNCNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLL","n":["ArgValue","ByteArray","DataType","Device","DeviceType","RetValue","array","byte_array","call_packed","datatype","device","errors","ffi","packed_func","try_downcast","value","ByteArray","External","Rust","borrow","borrow_mut","data","drop","from","from","into","is_empty","len","to_vec","try_from","try_from","try_into","type_id","DataType","InvalidNumber","MissingDataType","ParseDataTypeError","UnknownType","bits","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","code","eq","float","float32","fmt","fmt","fmt","fmt","from","from","from","from_str","hash","int","into","into","is_type","itemsize","lanes","new","partial_cmp","provide","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id","uint","CPU","CUDA","CUDAHost","Device","DeviceType","ExtDev","Metal","OpenCL","ROCM","UnsupportedDeviceError","VPI","Vulkan","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cl","clone","clone","clone_into","clone_into","cpu","cuda","default","default","device_id","device_type","eq","eq","ext_dev","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_str","hash","hash","into","into","into","llvm","metal","n","new","nvptx","provide","rocm","stackvm","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vpi","FuncCallError","ValueDowncastError","actual_type","borrow","borrow","borrow_mut","borrow_mut","expected_type","fmt","fmt","fmt","fmt","from","from","get_with_context","into","into","provide","provide","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","BackendPackedCFunc","DLDataType","DLDataTypeCode","DLDataTypeCode_kDLBfloat","DLDataTypeCode_kDLComplex","DLDataTypeCode_kDLFloat","DLDataTypeCode_kDLInt","DLDataTypeCode_kDLOpaqueHandle","DLDataTypeCode_kDLUInt","DLDevice","DLDeviceType","DLDeviceType_kDLCPU","DLDeviceType_kDLCUDA","DLDeviceType_kDLCUDAHost","DLDeviceType_kDLCUDAManaged","DLDeviceType_kDLExtDev","DLDeviceType_kDLHexagon","DLDeviceType_kDLMetal","DLDeviceType_kDLOneAPI","DLDeviceType_kDLOpenCL","DLDeviceType_kDLROCM","DLDeviceType_kDLROCMHost","DLDeviceType_kDLVPI","DLDeviceType_kDLVulkan","DLDeviceType_kDLWebGPU","DLManagedTensor","DLPACK_ABI_VERSION","DLPACK_VERSION","DLTensor","FTVMParallelLambda","INT16_MAX","INT16_MIN","INT32_MAX","INT32_MIN","INT8_MAX","INT8_MIN","INTPTR_MAX","INTPTR_MIN","INT_FAST16_MAX","INT_FAST16_MIN","INT_FAST32_MAX","INT_FAST32_MIN","INT_FAST8_MAX","INT_FAST8_MIN","INT_LEAST16_MAX","INT_LEAST16_MIN","INT_LEAST32_MAX","INT_LEAST32_MIN","INT_LEAST8_MAX","INT_LEAST8_MIN","PTRDIFF_MAX","PTRDIFF_MIN","SIG_ATOMIC_MAX","SIG_ATOMIC_MIN","SIZE_MAX","TVMAPISetLastError","TVMArgTypeCode","TVMArgTypeCode_kDLDevice","TVMArgTypeCode_kTVMArgFloat","TVMArgTypeCode_kTVMArgInt","TVMArgTypeCode_kTVMBytes","TVMArgTypeCode_kTVMDLTensorHandle","TVMArgTypeCode_kTVMDataType","TVMArgTypeCode_kTVMExtBegin","TVMArgTypeCode_kTVMExtEnd","TVMArgTypeCode_kTVMExtReserveEnd","TVMArgTypeCode_kTVMModuleHandle","TVMArgTypeCode_kTVMNDArrayHandle","TVMArgTypeCode_kTVMNNVMFirst","TVMArgTypeCode_kTVMNNVMLast","TVMArgTypeCode_kTVMNullptr","TVMArgTypeCode_kTVMObjectHandle","TVMArgTypeCode_kTVMObjectRValueRefArg","TVMArgTypeCode_kTVMOpaqueHandle","TVMArgTypeCode_kTVMPackedFuncHandle","TVMArgTypeCode_kTVMStr","TVMArrayAlloc","TVMArrayCopyFromBytes","TVMArrayCopyFromTo","TVMArrayCopyToBytes","TVMArrayFree","TVMArrayFromDLPack","TVMArrayHandle","TVMArrayToDLPack","TVMBackendAllocWorkspace","TVMBackendFreeWorkspace","TVMBackendGetFuncFromEnv","TVMBackendPackedCFunc","TVMBackendParallelBarrier","TVMBackendParallelLaunch","TVMBackendRegisterEnvCAPI","TVMBackendRegisterSystemLibSymbol","TVMBackendRunOnce","TVMByteArray","TVMByteArrayFree","TVMCFuncSetReturn","TVMCbArgToReturn","TVMDLManagedTensorCallDeleter","TVMDeviceAllocDataSpace","TVMDeviceAllocDataSpaceWithScope","TVMDeviceCopyDataFromTo","TVMDeviceExtType","TVMDeviceExtType_TVMDeviceExtType_End","TVMDeviceExtType_kDLAOCL","TVMDeviceExtType_kDLMicroDev","TVMDeviceExtType_kDLSDAccel","TVMDeviceExtType_kOpenGL","TVMDeviceFreeDataSpace","TVMExtensionFuncDeclarer","TVMFuncCall","TVMFuncCreateFromCFunc","TVMFuncFree","TVMFuncGetGlobal","TVMFuncListGlobalNames","TVMFuncRegisterGlobal","TVMFuncRemoveGlobal","TVMFunctionHandle","TVMGetLastError","TVMModFree","TVMModGetFunction","TVMModImport","TVMModLoadFromFile","TVMModuleHandle","TVMObjectDerivedFrom","TVMObjectFree","TVMObjectGetTypeIndex","TVMObjectHandle","TVMObjectRetain","TVMObjectTypeIndex2Key","TVMObjectTypeKey2Index","TVMPackedCFunc","TVMPackedCFuncFinalizer","TVMParallelGroupEnv","TVMRetValueHandle","TVMSetStream","TVMStreamCreate","TVMStreamFree","TVMStreamHandle","TVMStreamStreamSynchronize","TVMSynchronize","TVMValue","TVM_VERSION","UINT16_MAX","UINT32_MAX","UINT8_MAX","UINTPTR_MAX","UINT_FAST16_MAX","UINT_FAST32_MAX","UINT_FAST8_MAX","UINT_LEAST16_MAX","UINT_LEAST32_MAX","UINT_LEAST8_MAX","WINT_MAX","WINT_MIN","_ATFILE_SOURCE","_BITS_STDINT_INTN_H","_BITS_STDINT_UINTN_H","_BITS_TIME64_H","_BITS_TYPESIZES_H","_BITS_TYPES_H","_BITS_WCHAR_H","_DEFAULT_SOURCE","_FEATURES_H","_POSIX_C_SOURCE","_POSIX_SOURCE","_STDC_PREDEF_H","_STDINT_H","_SYS_CDEFS_H","__FD_SETSIZE","__GLIBC_MINOR__","__GLIBC_USE_DEPRECATED_GETS","__GLIBC_USE_DEPRECATED_SCANF","__GLIBC_USE_IEC_60559_BFP_EXT","__GLIBC_USE_IEC_60559_BFP_EXT_C2X","__GLIBC_USE_IEC_60559_EXT","__GLIBC_USE_IEC_60559_FUNCS_EXT","__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X","__GLIBC_USE_IEC_60559_TYPES_EXT","__GLIBC_USE_ISOC2X","__GLIBC_USE_LIB_EXT2","__GLIBC__","__GNU_LIBRARY__","__HAVE_GENERIC_SELECTION","__INO_T_MATCHES_INO64_T","__KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64","__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI","__OFF_T_MATCHES_OFF64_T","__RLIM_T_MATCHES_RLIM64_T","__STATFS_MATCHES_STATFS64","__STDC_IEC_559_COMPLEX__","__STDC_IEC_559__","__STDC_IEC_60559_BFP__","__STDC_IEC_60559_COMPLEX__","__STDC_ISO_10646__","__SYSCALL_WORDSIZE","__TIMESIZE","__USE_ATFILE","__USE_FORTIFY_LEVEL","__USE_ISOC11","__USE_ISOC95","__USE_ISOC99","__USE_MISC","__USE_POSIX","__USE_POSIX199309","__USE_POSIX199506","__USE_POSIX2","__USE_POSIX_IMPLICITLY","__USE_XOPEN2K","__USE_XOPEN2K8","__WORDSIZE","__WORDSIZE_TIME64_COMPAT32","__blkcnt64_t","__blkcnt_t","__blksize_t","__caddr_t","__clock_t","__clockid_t","__daddr_t","__dev_t","__fsblkcnt64_t","__fsblkcnt_t","__fsfilcnt64_t","__fsfilcnt_t","__fsid_t","__fsword_t","__gid_t","__glibc_c99_flexarr_available","__id_t","__ino64_t","__ino_t","__int16_t","__int32_t","__int64_t","__int8_t","__int_least16_t","__int_least32_t","__int_least64_t","__int_least8_t","__intmax_t","__intptr_t","__key_t","__loff_t","__mode_t","__nlink_t","__off64_t","__off_t","__pid_t","__quad_t","__rlim64_t","__rlim_t","__sig_atomic_t","__socklen_t","__ssize_t","__suseconds64_t","__suseconds_t","__syscall_slong_t","__syscall_ulong_t","__time_t","__timer_t","__u_char","__u_int","__u_long","__u_quad_t","__u_short","__uid_t","__uint16_t","__uint32_t","__uint64_t","__uint8_t","__uint_least16_t","__uint_least32_t","__uint_least64_t","__uint_least8_t","__uintmax_t","__useconds_t","__val","bits","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_offset","cl","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","code","cpu","cuda","data","data","default","default","default","default","default","default","default","default","deleter","device","device_id","device_type","dl_tensor","dtype","eq","eq","eq","eq","eq","eq","eq","ext_dev","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","int_fast16_t","int_fast32_t","int_fast64_t","int_fast8_t","int_least16_t","int_least32_t","int_least64_t","int_least8_t","intmax_t","into","into","into","into","into","into","into","into","lanes","llvm","manager_ctx","metal","ndim","num_task","nvptx","rocm","shape","size","size_t","stackvm","strides","sync_handle","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tvm_index_t","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uint_fast16_t","uint_fast32_t","uint_fast64_t","uint_fast8_t","uint_least16_t","uint_least32_t","uint_least64_t","uint_least8_t","uintmax_t","v_device","v_float64","v_handle","v_int64","v_str","v_type","vpi","wchar_t","ArgValue","ArrayHandle","ArrayHandle","Bytes","Bytes","DataType","DataType","Device","Device","Float","Float","FuncHandle","FuncHandle","Handle","Handle","Int","Int","ModuleHandle","ModuleHandle","NDArrayHandle","NDArrayHandle","Null","Null","ObjectHandle","ObjectHandle","PackedFunc","RetValue","Str","Str","String","String","TVMValue","UInt","UInt","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_tvm_value","from_tvm_value","into","into","to_owned","to_owned","to_tvm_value","to_tvm_value","try_from","try_from","try_from","try_into","try_into","type_id","type_id","UnsupportedDeviceError","borrow","borrow_mut","fmt","fmt","from","into","provide","to_string","try_from","try_into","type_id"],"q":["tvm_sys","","","","","","","","","","","","","","","","tvm_sys::byte_array","","","","","","","","","","","","","","","","","tvm_sys::datatype","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm_sys::device","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm_sys::errors","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm_sys::ffitvm_sys::packed_func","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tvm_sys::value","","","","","","","","","","",""],"d":["","","","","","","","","Calls a packed function and returns a <code>RetValue</code>.","","Provides <code>Device</code> and related device queries.","","The low-level C runtime FFI API for TVM.","","","","A newtype wrapping a raw TVM byte-array.","","","","","Gets the underlying byte-array","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Gets the length of the underlying byte-array","Converts the underlying byte-array to <code>Vec&lt;u8&gt;</code>","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether this <code>DataType</code> represents primitive type <code>T</code>.","Returns the number of bytes occupied by an element of this …","","","","","","","","","","","","","","","","","","","","Device type represents the set of devices supported by TVM.","","","","","","","","","","","","","","","","","","","","","default device is cpu.","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","\\\\brief The data type the tensor can hold. The data type is …","\\\\brief The type code options DLDataType.","\\\\brief bfloat16","\\\\brief complex number (C/C++/Python layout: compact struct …","\\\\brief IEEE floating point","\\\\brief signed integer","\\\\brief Opaque handle type, reserved for testing purposes. …","\\\\brief unsigned integer","\\\\brief A Device for Tensor and operator.","","\\\\brief CPU device","\\\\brief CUDA GPU device","\\\\brief Pinned CUDA CPU memory by cudaMallocHost","\\\\brief CUDA managed/unified memory allocated by …","\\\\brief Reserved extension device type, used for quickly …","\\\\brief Qualcomm Hexagon DSP","\\\\brief Metal for Apple GPU.","\\\\brief Unified shared memory allocated on a oneAPI …","\\\\brief OpenCL devices.","\\\\brief ROCm GPUs for AMD GPUs","\\\\brief Pinned ROCm CPU memory allocated by hipMallocHost","\\\\brief Verilog simulator buffer","\\\\brief Vulkan buffer for next generation graphics.","\\\\brief GPU support for next generation WebGPU standard.","\\\\brief C Tensor object, manage memory of DLTensor. This …","","","\\\\brief Plain C Tensor object, does not manage memory.","\\\\brief The callback function to execute a parallel lambda …","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\brief Used for implementing C API function. Set last …","\\\\brief The type code in used and only used in TVM FFI for …","","","","","","","","","","","","","","","","","","","","\\\\brief Allocate a nd-array’s memory, including space of …","\\\\brief Copy array data from CPU byte array. \\\\param handle …","\\\\brief Copy the array, both from and to must be valid …","\\\\brief Copy array data to CPU byte array. \\\\param handle …","\\\\brief Free the TVM Array. \\\\param handle The array handle …","\\\\brief Produce an array from the DLManagedTensor that …","\\\\brief the array handle","\\\\brief Produce a DLMangedTensor from the array that shares …","\\\\brief Backend function to allocate temporal workspace.","\\\\brief Backend function to free temporal workspace.","\\\\brief Backend function for modules to get function from …","\\\\brief Signature for backend functions exported as DLL.","\\\\brief BSP barrrier between parallel threads \\\\param …","\\\\brief Backend function for running parallel jobs.","\\\\brief Backend function to register execution …","\\\\brief Backend function to register system-wide library …","\\\\brief Simple static initialization function. Run f once …","\\\\brief Byte array type used to pass in byte array When …","\\\\brief Free a TVMByteArray returned from TVMFuncCall, and …","\\\\brief Set the return value of TVMPackedCFunc.","\\\\brief Inplace translate callback argument value to return …","\\\\brief Delete (free) a DLManagedTensor’s data. \\\\param …","\\\\brief Allocate a data space on device. \\\\param dev The …","\\\\brief Allocate a data space on device with special memory …","\\\\brief Copy data from one place to another. \\\\note This API …","","","","","","","\\\\brief Free a data space on device. \\\\param dev The device …","\\\\brief Signature for extension function declarer.","\\\\brief Call a Packed TVM Function.","\\\\brief Wrap a TVMPackedCFunc to become a FunctionHandle.","\\\\brief Free the function when it is no longer needed. …","\\\\brief Get a global function.","\\\\brief List all the globally registered function name …","\\\\brief Register the function to runtime’s global table.","\\\\brief Remove a global function. \\\\param name The name of …","\\\\brief Handle to packed function handle.","\\\\brief return str message of the last error all function …","\\\\brief Free the Module \\\\param mod The module to be freed.","\\\\brief Get function from the module. \\\\param mod The module …","\\\\brief Add dep to mod’s dependency. This allows …","\\\\brief Load module from file. \\\\param file_name The file …","\\\\brief Handle to TVM runtime modules.","\\\\brief Check that an object is derived from another. …","\\\\brief Free the object.","\\\\brief Get the type_index from an object.","\\\\brief Handle to Object.","\\\\brief Increase the reference count of an object.","\\\\brief Convert type index to type key. \\\\param tindex The …","\\\\brief Convert type key to type index. \\\\param type_key The …","\\\\brief C type of packed function.","\\\\brief C callback to free the resource handle in C packed …","\\\\brief Environment for TVM parallel task.","\\\\brief Handle to hold return value.","\\\\brief Set the runtime stream of current thread to be …","\\\\brief Create a new runtime stream.","\\\\brief Free a created stream handle.","\\\\brief The stream that is specific to device can be NULL, …","\\\\brief Synchronize two streams of execution.","\\\\brief Wait until all computations on stream completes.","\\\\brief Union type of values being passed through API and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\brief Number of bits, common choices are 8, 16, 32.","","","","","","","","","","","","","","","","","\\\\brief The offset in bytes to the beginning pointer to data","","","","","","","","","","","","","","","","","","\\\\brief Type code of base types. We keep it uint8_t instead …","","","\\\\brief The data pointer points to the allocated data. This …","","","","","","","","","","\\\\brief Destructor signature void (<em>)(void</em>) - this should be …","\\\\brief The device of the tensor","\\\\brief The device index. For vanilla CPU memory, pinned …","\\\\brief The device type used in the device.","\\\\brief DLTensor which is being memory managed","\\\\brief The data type of the pointer","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","\\\\brief Number of lanes in the type, used for vector types.","","\\\\brief the context of the original host framework of …","","\\\\brief Number of dimensions","\\\\brief total amount of task","","","\\\\brief The shape of the tensor","","","","\\\\brief strides of the tensor (in number of elements, not …","\\\\brief Auxiliary used for synchronization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\brief type of array index.","","","","","","","","","","","","","","","","","","","","","","","","","","A borrowed TVMPODValue. Can be constructed using <code>into()</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","An owned TVMPODValue. Can be converted from a variety of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,15,15,0,15,10,10,15,10,15,10,10,10,10,10,10,10,10,10,15,15,10,10,15,10,10,10,10,15,10,10,10,10,10,15,10,10,15,10,10,15,10,15,10,15,10,23,23,23,0,0,23,23,23,23,0,23,23,23,22,24,23,22,24,22,23,22,23,22,22,22,23,22,22,22,23,22,22,23,23,22,22,24,24,23,23,23,22,22,22,24,22,23,22,23,22,24,22,22,23,22,22,24,22,22,23,22,23,22,24,23,22,22,24,23,22,24,23,22,24,22,0,0,28,28,29,28,29,28,28,28,29,29,28,29,29,28,29,28,29,28,29,28,29,28,29,28,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,16,30,26,16,31,32,33,34,35,30,26,16,31,32,33,34,35,31,26,30,26,16,31,32,33,34,35,30,26,16,31,32,33,34,35,16,26,26,31,34,30,26,16,31,32,33,34,35,32,31,26,26,32,31,30,26,16,31,32,34,35,26,30,26,16,31,32,34,35,25,30,26,26,26,26,16,16,16,16,31,31,31,31,31,31,31,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,35,26,0,0,0,0,0,0,0,0,0,30,26,16,31,32,33,34,35,16,26,32,26,31,35,26,26,31,34,0,26,31,35,30,26,16,31,32,33,34,35,30,26,26,26,26,16,16,16,16,31,32,33,34,34,35,30,26,16,31,32,33,34,35,0,30,26,16,31,32,33,34,35,0,0,0,0,0,0,0,0,0,33,33,33,33,33,33,26,0,0,45,8,45,8,45,8,45,8,45,8,45,8,45,8,45,8,45,8,45,8,45,8,45,8,0,0,45,8,45,8,0,45,8,45,8,45,8,45,8,45,8,8,45,8,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,45,8,45,8,45,8,45,8,45,8,8,45,8,45,8,0,48,48,48,48,48,48,48,48,48,48,48],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1],[1],[[]],[[[4,[[3,[2]]]]],1],[[]],[1,5],[1,6],[1,[[3,[2]]]],[[],7],[8,[[7,[1]]]],[[],7],[[],9],0,0,0,0,0,[10,6],[[]],[[]],[[]],[[]],[10,10],[[]],[[10,10],11],[10,6],[[10,10],5],[[2,12],10],[[],10],[[10,13],14],[[10,13],14],[[15,13],14],[[15,13],14],[[]],[16,10],[[]],[17,[[7,[10]]]],[10],[[2,12],10],[[]],[[]],[10,5],[10,6],[10,6],[[2,2,12],10],[[10,10],[[18,[11]]]],[19],[[]],[[],20],[[],20],[8,[[21,[10]]]],[[],7],[[],7],[[],7],[[],7],[[],9],[[],9],[[2,12],10],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[6,22],[23,23],[22,22],[[]],[[]],[6,22],[6,22],[[],23],[[],22],0,0,[[23,23],5],[[22,22],5],[6,22],[[23,13],14],[[23,13],14],[[22,13],14],[[22,13],14],[[24,13],14],[[24,13],14],[[]],[25,23],[17,23],[17,22],[26,22],[[]],[[]],[17,[[21,[22]]]],[23],[22],[[]],[[]],[[]],[6,22],[6,22],[27,[[18,[23]]]],[[23,6],22],[6,22],[19],[6,22],[6,22],[[]],[[]],[[],20],[[],20],[[],20],[[],7],[[],7],[8,[[21,[22]]]],[[],7],[[],7],[[],7],[[],7],[[],9],[[],9],[[],9],[6,22],0,0,0,[[]],[[]],[[]],[[]],0,[[28,13],14],[[28,13],14],[[29,13],14],[[29,13],14],[[]],[[]],[20,29],[[]],[[]],[19],[19],[[],20],[[],20],[[],7],[[],7],[[],7],[[],7],[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[6,26],[30,30],[26,26],[16,16],[31,31],[32,32],[33,33],[34,34],[35,35],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[6,26],[6,26],0,0,[[],30],[[],26],[[],16],[[],31],[[],32],[[],33],[[],34],[[],35],0,0,0,0,0,0,[[30,30],5],[[26,26],5],[[16,16],5],[[31,31],5],[[32,32],5],[[34,34],5],[[35,35],5],[6,26],[[30,13],14],[[26,13],14],[[16,13],14],[[31,13],14],[[32,13],14],[[34,13],14],[[35,13],14],[23,25],[[]],[[]],[22,26],[22,26],[33,26],[[]],[33,16],[10,16],[10,16],[36,31],[36,31],[36,31],[36,31],[36,31],[[]],[36,31],[[]],[37,33],[38,33],[27,33],[39,33],[12,33],[[]],[40,33],[41,33],[26,33],[16,33],[42,33],[43,33],[44,33],[6,33],[2,33],[[]],[[]],[17,[[7,[26]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[6,26],0,[6,26],0,0,[6,26],[6,26],0,0,0,[6,26],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[8,[[7,[26]]]],[45,[[7,[26]]]],[45,[[7,[26]]]],[45,[[7,[16]]]],[[],7],[8,[[7,[16]]]],[45,[[7,[16]]]],[[],7],[[],7],[[],7],[8,[[7,[34]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[6,26],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[45,45],[8,8],[[]],[[]],[[],8],[[45,13],14],[[8,13],14],[2,45],[43,45],[[],45],[26,45],[12,45],[38,45],[37,45],[39,45],[37,45],[16,45],[6,45],[39,45],[46,45],[26,45],[40,45],[12,45],[40,45],[16,45],[20,45],[42,45],[[],45],[31,45],[2,45],[41,45],[22,45],[42,45],[43,45],[47,45],[41,45],[44,45],[22,45],[1,45],[[]],[44,45],[27,45],[6,45],[23,45],[31,45],[38,45],[27,45],[17,45],[5,45],[34,45],[16,8],[[]],[41,8],[10,8],[[],8],[42,8],[5,8],[40,8],[6,8],[43,8],[39,8],[2,8],[34,8],[12,8],[38,8],[26,8],[27,8],[20,8],[22,8],[44,8],[37,8],[[33,38],45],[[33,38],8],[[]],[[]],[[]],[[]],[45],[8],[[],7],[[],7],[7,[[7,[8]]]],[[],7],[[],7],[[],9],[[],9],0,[[]],[[]],[[48,13],14],[[48,13],14],[[]],[[]],[19],[[],20],[[],7],[[],7],[[],9]],"p":[[4,"ByteArray"],[15,"u8"],[3,"Vec"],[8,"Into"],[15,"bool"],[15,"usize"],[4,"Result"],[4,"RetValue"],[3,"TypeId"],[3,"DataType"],[4,"Ordering"],[15,"u16"],[3,"Formatter"],[6,"Result"],[4,"ParseDataTypeError"],[3,"DLDataType"],[15,"str"],[4,"Option"],[3,"Demand"],[3,"String"],[6,"Result"],[3,"Device"],[4,"DeviceType"],[3,"UnsupportedDeviceError"],[6,"DLDeviceType"],[3,"DLDevice"],[15,"i64"],[3,"ValueDowncastError"],[3,"FuncCallError"],[3,"__fsid_t"],[3,"DLTensor"],[3,"DLManagedTensor"],[19,"TVMValue"],[3,"TVMByteArray"],[3,"TVMParallelGroupEnv"],[6,"Array"],[15,"f32"],[15,"u32"],[15,"u64"],[15,"isize"],[15,"i32"],[15,"i16"],[15,"i8"],[15,"f64"],[4,"ArgValue"],[3,"CStr"],[3,"CString"],[3,"UnsupportedDeviceError"]]},\
"tyck":{"doc":"","t":"DLLLLLLMLFLLL","n":["Opt","borrow","borrow_mut","clap","fmt","from","from_clap","input","into","main","try_from","try_into","type_id"],"q":["tyck","","","","","","","","","","","",""],"d":["","","","","","Returns the argument unchanged.","","Input file","Calls <code>U::from(self)</code>.","","","",""],"i":[0,2,2,2,2,2,2,2,2,0,2,2,2],"f":[0,[[]],[[]],[[],1],[[2,3],4],[[]],[5,2],0,[[]],[[],6],[[],7],[[],7],[[],8]],"p":[[3,"App"],[3,"Opt"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Result"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
